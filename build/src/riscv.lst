GAS LISTING /tmp/ccI1hA1R.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB40:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by os on 5/17/24.
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   7:src/riscv.cpp **** 
   8:src/riscv.cpp **** 
   9:src/riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 9 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  10:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 10 5
  21              		.loc 1 10 38 is_stmt 0
  22              	#APP
  23              	# 10 "src/riscv.cpp" 1
  11              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 11 5 is_stmt 1
  27              		.loc 1 11 29 is_stmt 0
  28              	# 11 "src/riscv.cpp" 1
  12              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 12 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE40:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB41:
  13:src/riscv.cpp **** 
  14:src/riscv.cpp **** void Riscv::handleSupervisorTrap() {
GAS LISTING /tmp/ccI1hA1R.s 			page 2


  47              		.loc 1 14 36 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F8 		addi	sp,sp,-128
  50              		.cfi_def_cfa_offset 128
  51 0024 233C1106 		sd	ra,120(sp)
  52 0028 23388106 		sd	s0,112(sp)
  53 002c 23349106 		sd	s1,104(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57 0030 13040108 		addi	s0,sp,128
  58              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp **** 
  16:src/riscv.cpp ****     uint64 ra = r_a0();
  59              		.loc 1 16 5
  60              	.LBB38:
  61              	.LBB39:
  62              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../lib/console.h"
  10:src/../h/riscv.hpp **** #include "print.hpp"
  11:src/../h/riscv.hpp **** #include "tcb.hpp"
  12:src/../h/riscv.hpp **** #include "MemoryAllocator.hpp"
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     //pop sstatus spp and sstatus spie
  18:src/../h/riscv.hpp ****     static void popSppSpie();
  19:src/../h/riscv.hpp ****     //push x3..31 registers
  20:src/../h/riscv.hpp ****     static void pushRegisters();
  21:src/../h/riscv.hpp ****     //pop x3..31 regiesters
  22:src/../h/riscv.hpp ****     static void popRegisters();
  23:src/../h/riscv.hpp **** 
  24:src/../h/riscv.hpp ****     // read register scause
  25:src/../h/riscv.hpp ****     static uint64 r_scause();
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // write register scause
  28:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // read register sepc
  31:src/../h/riscv.hpp ****     static uint64 r_sepc();
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // write register sepc
  34:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // read register stvec
  37:src/../h/riscv.hpp ****     static uint64 r_stvec();
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // write register stvec
GAS LISTING /tmp/ccI1hA1R.s 			page 3


  40:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // read register stval
  43:src/../h/riscv.hpp ****     static uint64 r_stval();
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // write register stval
  46:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     enum BitMaskSip
  49:src/../h/riscv.hpp ****     {
  50:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  51:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  52:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  53:src/../h/riscv.hpp ****     };
  54:src/../h/riscv.hpp **** 
  55:src/../h/riscv.hpp ****     // mask set register sip
  56:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // mask clear register sip
  59:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // read register sip
  62:src/../h/riscv.hpp ****     static uint64 r_sip();
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // write register sip
  65:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     enum BitMaskSstatus
  68:src/../h/riscv.hpp ****     {
  69:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  70:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  71:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  72:src/../h/riscv.hpp ****     };
  73:src/../h/riscv.hpp **** 
  74:src/../h/riscv.hpp ****     // mask set register sstatus
  75:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // mask clear register sstatus
  78:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // read register sstatus
  81:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // write register sstatus
  84:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     //read a0 register
  87:src/../h/riscv.hpp ****     static uint64 r_a0();
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     //write to a0 register
  90:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp ****     static void supervisorTrap();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp **** private:
  95:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  96:src/../h/riscv.hpp **** };
GAS LISTING /tmp/ccI1hA1R.s 			page 4


  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 100:src/../h/riscv.hpp **** {
 101:src/../h/riscv.hpp ****     uint64 volatile scause;
 102:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 103:src/../h/riscv.hpp ****     return scause;
 104:src/../h/riscv.hpp **** }
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 107:src/../h/riscv.hpp **** {
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     uint64 volatile sepc;
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 115:src/../h/riscv.hpp ****     return sepc;
 116:src/../h/riscv.hpp **** }
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 119:src/../h/riscv.hpp **** {
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     uint64 volatile stvec;
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 127:src/../h/riscv.hpp ****     return stvec;
 128:src/../h/riscv.hpp **** }
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 131:src/../h/riscv.hpp **** {
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     uint64 volatile stval;
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 139:src/../h/riscv.hpp ****     return stval;
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccI1hA1R.s 			page 5


 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     uint64 volatile sip;
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 161:src/../h/riscv.hpp ****     return sip;
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 183:src/../h/riscv.hpp ****     return sstatus;
 184:src/../h/riscv.hpp **** }
 185:src/../h/riscv.hpp **** 
 186:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 187:src/../h/riscv.hpp **** {
 188:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** //a0
 192:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 193:src/../h/riscv.hpp **** {
 194:src/../h/riscv.hpp ****     uint64 volatile a0;
  63              		.loc 2 194 5
 195:src/../h/riscv.hpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
  64              		.loc 2 195 5
  65              		.loc 2 195 46 is_stmt 0
  66              	#APP
  67              	# 195 "src/../h/riscv.hpp" 1
 196              	    return a0;
  68              		mv a5, a0
  69              	# 0 "" 2
  70              	#NO_APP
  71 0038 2334F4FA 		sd	a5,-88(s0)
  72              		.loc 2 196 5 is_stmt 1
  73              		.loc 2 196 12 is_stmt 0
  74 003c 833784FA 		ld	a5,-88(s0)
  75              	.LVL0:
  76              	.LBE39:
GAS LISTING /tmp/ccI1hA1R.s 			page 6


  77              	.LBE38:
  17:src/riscv.cpp ****     uint64 scause = r_scause();
  78              		.loc 1 17 5 is_stmt 1
  79              	.LBB40:
  80              	.LBB41:
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  81              		.loc 2 101 5
 102:src/../h/riscv.hpp ****     return scause;
  82              		.loc 2 102 5
 102:src/../h/riscv.hpp ****     return scause;
  83              		.loc 2 102 72 is_stmt 0
  84              	#APP
  85              	# 102 "src/../h/riscv.hpp" 1
  86              		csrr a4, scause
  87              	# 0 "" 2
  88              	#NO_APP
  89 0044 2330E4FA 		sd	a4,-96(s0)
 103:src/../h/riscv.hpp **** }
  90              		.loc 2 103 5 is_stmt 1
 103:src/../h/riscv.hpp **** }
  91              		.loc 2 103 12 is_stmt 0
  92 0048 033504FA 		ld	a0,-96(s0)
  93              	.LVL1:
  94              	.LBE41:
  95              	.LBE40:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){//pomera registar a3??
  96              		.loc 1 19 5 is_stmt 1
  97              	.LBB42:
  98              		.loc 1 19 39 is_stmt 0
  99 004c 930685FF 		addi	a3,a0,-8
 100              		.loc 1 19 5
 101 0050 13071000 		li	a4,1
 102 0054 637CD704 		bleu	a3,a4,.L18
 103              	.LBE42:
  20:src/riscv.cpp ****         //environment call
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  23:src/riscv.cpp ****         int ret;
  24:src/riscv.cpp ****         switch (ra) {
  25:src/riscv.cpp ****             case 0x01:
  26:src/riscv.cpp ****                 size_t size;
  27:src/riscv.cpp ****                 void *mallocr;
  28:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
  29:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
  30:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
  31:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  32:src/riscv.cpp ****                 break;
  33:src/riscv.cpp **** 
  34:src/riscv.cpp ****             case 0x02:
  35:src/riscv.cpp ****                 void *freep;
  36:src/riscv.cpp ****                 int greska;
  37:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(freep));
  38:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
  39:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
  40:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  41:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccI1hA1R.s 			page 7


  42:src/riscv.cpp **** 
  43:src/riscv.cpp ****             case 0x11:
  44:src/riscv.cpp ****                 TCB::Body start_routine;
  45:src/riscv.cpp ****                 void* arg;
  46:src/riscv.cpp ****                 thread_t* handle;
  47:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(handle));
  48:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
  49:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
  50:src/riscv.cpp ****                 *handle = TCB::createThread(start_routine,arg);
  51:src/riscv.cpp ****                 if(*handle != nullptr) ret =0;
  52:src/riscv.cpp ****                 else ret = -1;
  53:src/riscv.cpp **** 
  54:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  55:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  56:src/riscv.cpp ****                 break;
  57:src/riscv.cpp **** 
  58:src/riscv.cpp ****             case 0x12:
  59:src/riscv.cpp ****                 ret = TCB::exitThread();
  60:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  61:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  62:src/riscv.cpp ****                 break;
  63:src/riscv.cpp **** 
  64:src/riscv.cpp ****             case 0x13:
  65:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
  66:src/riscv.cpp ****                 TCB::dispatch();
  67:src/riscv.cpp ****                 break;
  68:src/riscv.cpp ****             default:
  69:src/riscv.cpp ****                 break;
  70:src/riscv.cpp ****         }
  71:src/riscv.cpp **** 
  72:src/riscv.cpp ****         w_sstatus(sstatus);
  73:src/riscv.cpp ****         w_sepc(sepc);
  74:src/riscv.cpp ****     }
  75:src/riscv.cpp ****     else if(scause == 0x8000000000000001UL){
 104              		.loc 1 75 10 is_stmt 1
 105              	.LBB76:
 106              	.LBB43:
 107 0058 9307F0FF 		li	a5,-1
 108              	.LVL2:
 109 005c 9397F703 		slli	a5,a5,63
 110 0060 93871700 		addi	a5,a5,1
 111 0064 6300F514 		beq	a0,a5,.L19
  76:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  77:src/riscv.cpp ****         TCB::timeSliceCounter++;
  78:src/riscv.cpp ****         //supervisor software interrupt; timer
  79:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
  80:src/riscv.cpp **** 
  81:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
  82:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
  83:src/riscv.cpp ****             TCB::timeSliceCounter=0;
  84:src/riscv.cpp ****             TCB::dispatch();
  85:src/riscv.cpp ****             w_sstatus(sstatus);
  86:src/riscv.cpp ****             w_sepc(sepc);
  87:src/riscv.cpp ****         }
  88:src/riscv.cpp **** 
  89:src/riscv.cpp **** 
  90:src/riscv.cpp ****     }else if(scause == 0x8000000000000009UL){
GAS LISTING /tmp/ccI1hA1R.s 			page 8


 112              		.loc 1 90 11
 113 0068 9307F0FF 		li	a5,-1
 114 006c 9397F703 		slli	a5,a5,63
 115 0070 93879700 		addi	a5,a5,9
 116 0074 6304F51A 		beq	a0,a5,.L20
  91:src/riscv.cpp ****         // supervisor external interrupt; console
  92:src/riscv.cpp **** 
  93:src/riscv.cpp ****         console_handler();
  94:src/riscv.cpp ****     }else{
  95:src/riscv.cpp ****         //unexpected interrupt;
  96:src/riscv.cpp ****         printInteger(scause);
 117              		.loc 1 96 9
 118              		.loc 1 96 21 is_stmt 0
 119 0078 97000000 		call	_Z12printIntegerm@plt
 119      E7800000 
 120              	.LVL3:
  97:src/riscv.cpp ****         printInteger(r_sepc());
 121              		.loc 1 97 9 is_stmt 1
 122              	.LBB44:
 123              	.LBB45:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 124              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 125              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 126              		.loc 2 114 64 is_stmt 0
 127              	#APP
 128              	# 114 "src/../h/riscv.hpp" 1
 129              		csrr a5, sepc
 130              	# 0 "" 2
 131              	#NO_APP
 132 0084 233CF4FC 		sd	a5,-40(s0)
 115:src/../h/riscv.hpp **** }
 133              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 134              		.loc 2 115 12 is_stmt 0
 135 0088 033584FD 		ld	a0,-40(s0)
 136              	.LBE45:
 137              	.LBE44:
 138              		.loc 1 97 21
 139 008c 97000000 		call	_Z12printIntegerm@plt
 139      E7800000 
 140              	.LVL4:
  98:src/riscv.cpp ****         printInteger(r_stval());
 141              		.loc 1 98 9 is_stmt 1
 142              	.LBB46:
 143              	.LBB47:
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 144              		.loc 2 137 5
 138:src/../h/riscv.hpp ****     return stval;
 145              		.loc 2 138 5
 138:src/../h/riscv.hpp ****     return stval;
 146              		.loc 2 138 68 is_stmt 0
 147              	#APP
 148              	# 138 "src/../h/riscv.hpp" 1
 149              		csrr a5, stval
 150              	# 0 "" 2
GAS LISTING /tmp/ccI1hA1R.s 			page 9


 151              	#NO_APP
 152 0098 2338F4FC 		sd	a5,-48(s0)
 139:src/../h/riscv.hpp **** }
 153              		.loc 2 139 5 is_stmt 1
 139:src/../h/riscv.hpp **** }
 154              		.loc 2 139 12 is_stmt 0
 155 009c 033504FD 		ld	a0,-48(s0)
 156              	.LBE47:
 157              	.LBE46:
 158              		.loc 1 98 21
 159 00a0 97000000 		call	_Z12printIntegerm@plt
 159      E7800000 
 160              	.LVL5:
 161              	.LBE43:
 162              	.LBE76:
  99:src/riscv.cpp ****     }
 100:src/riscv.cpp **** };...
 163              		.loc 1 100 1
 164 00a8 6F000007 		j	.L3
 165              	.LVL6:
 166              	.L18:
 167              	.LBB77:
 168              	.LBB63:
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 169              		.loc 1 21 9 is_stmt 1
 170              	.LBB64:
 171              	.LBB65:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 172              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 173              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 174              		.loc 2 114 64 is_stmt 0
 175              	#APP
 176              	# 114 "src/../h/riscv.hpp" 1
 177              		csrr a4, sepc
 178              	# 0 "" 2
 179              	#NO_APP
 180 00b0 233CE4FA 		sd	a4,-72(s0)
 115:src/../h/riscv.hpp **** }
 181              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 182              		.loc 2 115 12 is_stmt 0
 183 00b4 033784FB 		ld	a4,-72(s0)
 184              	.LBE65:
 185              	.LBE64:
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 186              		.loc 1 21 41
 187 00b8 13074700 		addi	a4,a4,4
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 188              		.loc 1 21 42
 189 00bc 2330E4F8 		sd	a4,-128(s0)
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 190              		.loc 1 22 9 is_stmt 1
 191              	.LBB66:
 192              	.LBB67:
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
GAS LISTING /tmp/ccI1hA1R.s 			page 10


 193              		.loc 2 181 5
 182:src/../h/riscv.hpp ****     return sstatus;
 194              		.loc 2 182 5
 182:src/../h/riscv.hpp ****     return sstatus;
 195              		.loc 2 182 76 is_stmt 0
 196              	#APP
 197              	# 182 "src/../h/riscv.hpp" 1
 198              		csrr a4, sstatus
 199              	# 0 "" 2
 200              	#NO_APP
 201 00c4 2338E4FA 		sd	a4,-80(s0)
 183:src/../h/riscv.hpp **** }
 202              		.loc 2 183 5 is_stmt 1
 183:src/../h/riscv.hpp **** }
 203              		.loc 2 183 12 is_stmt 0
 204 00c8 033704FB 		ld	a4,-80(s0)
 205              	.LBE67:
 206              	.LBE66:
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 207              		.loc 1 22 45
 208 00cc 2334E4F8 		sd	a4,-120(s0)
  23:src/riscv.cpp ****         int ret;
 209              		.loc 1 23 9 is_stmt 1
  24:src/riscv.cpp ****         switch (ra) {
 210              		.loc 1 24 9
 211 00d0 13073001 		li	a4,19
 212 00d4 636AF702 		bgtu	a5,a4,.L5
 213 00d8 93972700 		slli	a5,a5,2
 214              	.LVL7:
 215 00dc 17070000 		lla	a4,.L7
 215      13070700 
 216 00e4 B387E700 		add	a5,a5,a4
 217 00e8 83A70700 		lw	a5,0(a5)
 218 00ec B387E700 		add	a5,a5,a4
 219 00f0 67800700 		jr	a5
 220              		.section	.rodata
 221              		.align	2
 222              		.align	2
 223              	.L7:
 224 0000 00000000 		.word	.L5-.L7
 225 0004 00000000 		.word	.L11-.L7
 226 0008 00000000 		.word	.L10-.L7
 227 000c 00000000 		.word	.L5-.L7
 228 0010 00000000 		.word	.L5-.L7
 229 0014 00000000 		.word	.L5-.L7
 230 0018 00000000 		.word	.L5-.L7
 231 001c 00000000 		.word	.L5-.L7
 232 0020 00000000 		.word	.L5-.L7
 233 0024 00000000 		.word	.L5-.L7
 234 0028 00000000 		.word	.L5-.L7
 235 002c 00000000 		.word	.L5-.L7
 236 0030 00000000 		.word	.L5-.L7
 237 0034 00000000 		.word	.L5-.L7
 238 0038 00000000 		.word	.L5-.L7
 239 003c 00000000 		.word	.L5-.L7
 240 0040 00000000 		.word	.L5-.L7
 241 0044 00000000 		.word	.L9-.L7
GAS LISTING /tmp/ccI1hA1R.s 			page 11


 242 0048 00000000 		.word	.L8-.L7
 243 004c 00000000 		.word	.L6-.L7
 244              		.text
 245              	.L11:
 246              	.LBB68:
  25:src/riscv.cpp ****             case 0x01:
 247              		.loc 1 25 13
  26:src/riscv.cpp ****                 size_t size;
 248              		.loc 1 26 17
  27:src/riscv.cpp ****                 void *mallocr;
 249              		.loc 1 27 17
  28:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
 250              		.loc 1 28 17
  28:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
 251              		.loc 1 28 57 is_stmt 0
 252              	#APP
 253              	# 28 "src/riscv.cpp" 1
 254              		mv a0, a1
 255              	# 0 "" 2
 256              	.LVL8:
  29:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 257              		.loc 1 29 17 is_stmt 1
  29:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 258              		.loc 1 29 53 is_stmt 0
 259              	#NO_APP
 260 00f8 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 260      E7800000 
 261              	.LVL9:
  30:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 262              		.loc 1 30 17 is_stmt 1
  30:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 263              		.loc 1 30 60 is_stmt 0
 264              	#APP
 265              	# 30 "src/riscv.cpp" 1
  31:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 266              		mv t0, a0
 267              	# 0 "" 2
 268              		.loc 1 31 17 is_stmt 1
  31:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 269              		.loc 1 31 50 is_stmt 0
 270              	# 31 "src/riscv.cpp" 1
  32:src/riscv.cpp ****                 break;
 271              		sd t0, 80(x8)
 272              	# 0 "" 2
 273              		.loc 1 32 17 is_stmt 1
 274              	.LVL10:
 275              	#NO_APP
 276              	.L5:
 277              	.LBE68:
  72:src/riscv.cpp ****         w_sstatus(sstatus);
 278              		.loc 1 72 9
  72:src/riscv.cpp ****         w_sstatus(sstatus);
 279              		.loc 1 72 18 is_stmt 0
 280 0108 833784F8 		ld	a5,-120(s0)
 281              	.LVL11:
 282              	.LBB69:
 283              	.LBB70:
GAS LISTING /tmp/ccI1hA1R.s 			page 12


 188:src/../h/riscv.hpp **** }
 284              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 285              		.loc 2 188 77 is_stmt 0
 286              	#APP
 287              	# 188 "src/../h/riscv.hpp" 1
 288              		csrw sstatus, a5
 289              	# 0 "" 2
 290              	.LVL12:
 291              	#NO_APP
 292              	.LBE70:
 293              	.LBE69:
  73:src/riscv.cpp ****         w_sepc(sepc);
 294              		.loc 1 73 9 is_stmt 1
  73:src/riscv.cpp ****         w_sepc(sepc);
 295              		.loc 1 73 15 is_stmt 0
 296 0110 833704F8 		ld	a5,-128(s0)
 297              	.LVL13:
 298              	.LBB71:
 299              	.LBB72:
 120:src/../h/riscv.hpp **** }
 300              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 301              		.loc 2 120 65 is_stmt 0
 302              	#APP
 303              	# 120 "src/../h/riscv.hpp" 1
 304              		csrw sepc, a5
 305              	# 0 "" 2
 306              	.LVL14:
 307              	#NO_APP
 308              	.L3:
 309              	.LBE72:
 310              	.LBE71:
 311              	.LBE63:
 312              	.LBE77:
 313              		.loc 1 100 1
 314 0118 83308107 		ld	ra,120(sp)
 315              		.cfi_remember_state
 316              		.cfi_restore 1
 317 011c 03340107 		ld	s0,112(sp)
 318              		.cfi_restore 8
 319              		.cfi_def_cfa 2, 128
 320 0120 83348106 		ld	s1,104(sp)
 321              		.cfi_restore 9
 322 0124 13010108 		addi	sp,sp,128
 323              		.cfi_def_cfa_offset 0
 324 0128 67800000 		jr	ra
 325              	.LVL15:
 326              	.L10:
 327              		.cfi_restore_state
 328              	.LBB78:
 329              	.LBB74:
 330              	.LBB73:
  34:src/riscv.cpp ****             case 0x02:
 331              		.loc 1 34 13 is_stmt 1
  35:src/riscv.cpp ****                 void *freep;
 332              		.loc 1 35 17
GAS LISTING /tmp/ccI1hA1R.s 			page 13


  36:src/riscv.cpp ****                 int greska;
 333              		.loc 1 36 17
  37:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(freep));
 334              		.loc 1 37 17
  37:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(freep));
 335              		.loc 1 37 58 is_stmt 0
 336              	#APP
 337              	# 37 "src/riscv.cpp" 1
 338              		mv a0, a1
 339              	# 0 "" 2
 340              	.LVL16:
  38:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 341              		.loc 1 38 17 is_stmt 1
  38:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 342              		.loc 1 38 51 is_stmt 0
 343              	#NO_APP
 344 0130 97000000 		call	_ZN15MemoryAllocator8mem_freeEPKv@plt
 344      E7800000 
 345              	.LVL17:
  39:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 346              		.loc 1 39 17 is_stmt 1
  39:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 347              		.loc 1 39 60 is_stmt 0
 348              	#APP
 349              	# 39 "src/riscv.cpp" 1
  40:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 350              		mv t0, a0
 351              	# 0 "" 2
 352              		.loc 1 40 17 is_stmt 1
  40:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 353              		.loc 1 40 50 is_stmt 0
 354              	# 40 "src/riscv.cpp" 1
  41:src/riscv.cpp ****                 break;
 355              		sd t0, 80(x8)
 356              	# 0 "" 2
 357              		.loc 1 41 17 is_stmt 1
 358              	#NO_APP
 359 0140 6FF09FFC 		j	.L5
 360              	.LVL18:
 361              	.L9:
  43:src/riscv.cpp ****             case 0x11:
 362              		.loc 1 43 13
  44:src/riscv.cpp ****                 TCB::Body start_routine;
 363              		.loc 1 44 17
  45:src/riscv.cpp ****                 void* arg;
 364              		.loc 1 45 17
  46:src/riscv.cpp ****                 thread_t* handle;
 365              		.loc 1 46 17
  47:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(handle));
 366              		.loc 1 47 17
  47:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(handle));
 367              		.loc 1 47 64 is_stmt 0
 368              	#APP
 369              	# 47 "src/riscv.cpp" 1
 370              		ld s1, 88(x8)
 371              	# 0 "" 2
 372              	.LVL19:
GAS LISTING /tmp/ccI1hA1R.s 			page 14


  48:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 373              		.loc 1 48 17 is_stmt 1
  48:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 374              		.loc 1 48 71 is_stmt 0
 375              	# 48 "src/riscv.cpp" 1
 376              		ld a0, 96(x8)
 377              	# 0 "" 2
 378              	.LVL20:
  49:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 379              		.loc 1 49 17 is_stmt 1
  49:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 380              		.loc 1 49 62 is_stmt 0
 381              	# 49 "src/riscv.cpp" 1
 382              		ld a1, 104(x8)
 383              	# 0 "" 2
 384              	.LVL21:
  50:src/riscv.cpp ****                 *handle = TCB::createThread(start_routine,arg);
 385              		.loc 1 50 17 is_stmt 1
  50:src/riscv.cpp ****                 *handle = TCB::createThread(start_routine,arg);
 386              		.loc 1 50 44 is_stmt 0
 387              	#NO_APP
 388 0150 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 388      E7800000 
 389              	.LVL22:
  50:src/riscv.cpp ****                 *handle = TCB::createThread(start_routine,arg);
 390              		.loc 1 50 25
 391 0158 23B0A400 		sd	a0,0(s1)
  51:src/riscv.cpp ****                 if(*handle != nullptr) ret =0;
 392              		.loc 1 51 17 is_stmt 1
 393 015c 630A0500 		beqz	a0,.L16
  51:src/riscv.cpp ****                 if(*handle != nullptr) ret =0;
 394              		.loc 1 51 44 is_stmt 0
 395 0160 93070000 		li	a5,0
 396              	.L12:
 397              	.LVL23:
  54:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 398              		.loc 1 54 17 is_stmt 1
  54:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 399              		.loc 1 54 57 is_stmt 0
 400              	#APP
 401              	# 54 "src/riscv.cpp" 1
  55:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 402              		mv t0, a5
 403              	# 0 "" 2
 404              		.loc 1 55 17 is_stmt 1
  55:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 405              		.loc 1 55 50 is_stmt 0
 406              	# 55 "src/riscv.cpp" 1
  56:src/riscv.cpp ****                 break;
 407              		sd t0, 80(x8)
 408              	# 0 "" 2
 409              		.loc 1 56 17 is_stmt 1
 410              	#NO_APP
 411 016c 6FF0DFF9 		j	.L5
 412              	.LVL24:
 413              	.L16:
  52:src/riscv.cpp ****                 else ret = -1;
GAS LISTING /tmp/ccI1hA1R.s 			page 15


 414              		.loc 1 52 26 is_stmt 0
 415 0170 9307F0FF 		li	a5,-1
 416 0174 6FF01FFF 		j	.L12
 417              	.LVL25:
 418              	.L8:
  58:src/riscv.cpp ****             case 0x12:
 419              		.loc 1 58 13 is_stmt 1
  59:src/riscv.cpp ****                 ret = TCB::exitThread();
 420              		.loc 1 59 17
  59:src/riscv.cpp ****                 ret = TCB::exitThread();
 421              		.loc 1 59 38 is_stmt 0
 422 0178 97000000 		call	_ZN3TCB10exitThreadEv@plt
 422      E7800000 
 423              	.LVL26:
  60:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 424              		.loc 1 60 17 is_stmt 1
  60:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 425              		.loc 1 60 57 is_stmt 0
 426              	#APP
 427              	# 60 "src/riscv.cpp" 1
  61:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 428              		mv t0, a0
 429              	# 0 "" 2
 430              		.loc 1 61 17 is_stmt 1
  61:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 431              		.loc 1 61 50 is_stmt 0
 432              	# 61 "src/riscv.cpp" 1
  62:src/riscv.cpp ****                 break;
 433              		sw t0, 80(x8)
 434              	# 0 "" 2
 435              		.loc 1 62 17 is_stmt 1
 436              	#NO_APP
 437 0188 6FF01FF8 		j	.L5
 438              	.LVL27:
 439              	.L6:
  64:src/riscv.cpp ****             case 0x13:
 440              		.loc 1 64 13
  65:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 441              		.loc 1 65 17
  65:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 442              		.loc 1 65 38 is_stmt 0
 443 018c 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 443      83B70700 
 444 0194 23B00700 		sd	zero,0(a5)
  66:src/riscv.cpp ****                 TCB::dispatch();
 445              		.loc 1 66 17 is_stmt 1
  66:src/riscv.cpp ****                 TCB::dispatch();
 446              		.loc 1 66 30 is_stmt 0
 447 0198 97000000 		call	_ZN3TCB8dispatchEv@plt
 447      E7800000 
 448              	.LVL28:
  67:src/riscv.cpp ****                 break;
 449              		.loc 1 67 17 is_stmt 1
 450 01a0 6FF09FF6 		j	.L5
 451              	.LVL29:
 452              	.L19:
 453              	.LBE73:
GAS LISTING /tmp/ccI1hA1R.s 			page 16


 454              	.LBE74:
 455              	.LBB75:
 456              	.LBB48:
  76:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 457              		.loc 1 76 9
 458              	.LBB49:
 459              	.LBB50:
 154:src/../h/riscv.hpp **** }
 460              		.loc 2 154 5
 154:src/../h/riscv.hpp **** }
 461              		.loc 2 154 64 is_stmt 0
 462 01a4 93072000 		li	a5,2
 463              	#APP
 464              	# 154 "src/../h/riscv.hpp" 1
 465              		csrc sip, a5
 466              	# 0 "" 2
 467              	.LVL30:
 468              	#NO_APP
 469              	.LBE50:
 470              	.LBE49:
  77:src/riscv.cpp ****         TCB::timeSliceCounter++;
 471              		.loc 1 77 9 is_stmt 1
  77:src/riscv.cpp ****         TCB::timeSliceCounter++;
 472              		.loc 1 77 30 is_stmt 0
 473 01ac 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 473      03370700 
 474 01b4 83370700 		ld	a5,0(a4)
 475 01b8 93871700 		addi	a5,a5,1
 476 01bc 2330F700 		sd	a5,0(a4)
  79:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 477              		.loc 1 79 9 is_stmt 1
 478              	.LBB51:
  79:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 479              		.loc 1 79 63 is_stmt 0
 480 01c0 17070000 		la	a4,_ZN3TCB7runningE
 480      03370700 
 481 01c8 03370700 		ld	a4,0(a4)
 482              	.LVL31:
 483              	.LBB52:
 484              	.LBB53:
 485              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 5/19/24.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJEKAT_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJEKAT_TCB_HPP
   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "riscv.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** class TCB {
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp ****     void *operator new(size_t n);
  14:src/../h/tcb.hpp **** 
  15:src/../h/tcb.hpp ****     void *operator new[](size_t n);
  16:src/../h/tcb.hpp **** 
GAS LISTING /tmp/ccI1hA1R.s 			page 17


  17:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept;
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void operator delete[](void *p) noexcept;
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp **** public:
  22:src/../h/tcb.hpp ****     ~TCB(){TCB::operator delete[](stack);}
  23:src/../h/tcb.hpp ****     bool isFinished() const {return finished;}
  24:src/../h/tcb.hpp ****     void setFinished(bool f) { TCB::finished = f;}
  25:src/../h/tcb.hpp **** 
  26:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 486              		.loc 3 26 35 is_stmt 1
 487              		.loc 3 26 42 is_stmt 0
 488 01cc 03378702 		ld	a4,40(a4)
 489              	.LVL32:
 490              	.LBE53:
 491              	.LBE52:
  79:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 492              		.loc 1 79 9
 493 01d0 E3E4E7F4 		bltu	a5,a4,.L3
 494              	.LBB54:
  81:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 495              		.loc 1 81 13 is_stmt 1
 496              	.LBB55:
 497              	.LBB56:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 498              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 499              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 500              		.loc 2 114 64 is_stmt 0
 501              	#APP
 502              	# 114 "src/../h/riscv.hpp" 1
 503              		csrr a5, sepc
 504              	# 0 "" 2
 505              	#NO_APP
 506 01d8 2334F4FC 		sd	a5,-56(s0)
 115:src/../h/riscv.hpp **** }
 507              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 508              		.loc 2 115 12 is_stmt 0
 509 01dc 833784FC 		ld	a5,-56(s0)
 510              	.LBE56:
 511              	.LBE55:
  81:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 512              		.loc 1 81 43
 513 01e0 2338F4F8 		sd	a5,-112(s0)
  82:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 514              		.loc 1 82 13 is_stmt 1
 515              	.LBB57:
 516              	.LBB58:
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 517              		.loc 2 181 5
 182:src/../h/riscv.hpp ****     return sstatus;
 518              		.loc 2 182 5
 182:src/../h/riscv.hpp ****     return sstatus;
 519              		.loc 2 182 76 is_stmt 0
 520              	#APP
GAS LISTING /tmp/ccI1hA1R.s 			page 18


 521              	# 182 "src/../h/riscv.hpp" 1
 522              		csrr a5, sstatus
 523              	# 0 "" 2
 524              	#NO_APP
 525 01e8 2330F4FC 		sd	a5,-64(s0)
 183:src/../h/riscv.hpp **** }
 526              		.loc 2 183 5 is_stmt 1
 183:src/../h/riscv.hpp **** }
 527              		.loc 2 183 12 is_stmt 0
 528 01ec 833704FC 		ld	a5,-64(s0)
 529              	.LBE58:
 530              	.LBE57:
  82:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 531              		.loc 1 82 49
 532 01f0 233CF4F8 		sd	a5,-104(s0)
  83:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 533              		.loc 1 83 13 is_stmt 1
  83:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 534              		.loc 1 83 34 is_stmt 0
 535 01f4 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 535      83B70700 
 536 01fc 23B00700 		sd	zero,0(a5)
  84:src/riscv.cpp ****             TCB::dispatch();
 537              		.loc 1 84 13 is_stmt 1
  84:src/riscv.cpp ****             TCB::dispatch();
 538              		.loc 1 84 26 is_stmt 0
 539 0200 97000000 		call	_ZN3TCB8dispatchEv@plt
 539      E7800000 
 540              	.LVL33:
  85:src/riscv.cpp ****             w_sstatus(sstatus);
 541              		.loc 1 85 13 is_stmt 1
  85:src/riscv.cpp ****             w_sstatus(sstatus);
 542              		.loc 1 85 22 is_stmt 0
 543 0208 833784F9 		ld	a5,-104(s0)
 544              	.LVL34:
 545              	.LBB59:
 546              	.LBB60:
 188:src/../h/riscv.hpp **** }
 547              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 548              		.loc 2 188 77 is_stmt 0
 549              	#APP
 550              	# 188 "src/../h/riscv.hpp" 1
 551              		csrw sstatus, a5
 552              	# 0 "" 2
 553              	.LVL35:
 554              	#NO_APP
 555              	.LBE60:
 556              	.LBE59:
  86:src/riscv.cpp ****             w_sepc(sepc);
 557              		.loc 1 86 13 is_stmt 1
  86:src/riscv.cpp ****             w_sepc(sepc);
 558              		.loc 1 86 19 is_stmt 0
 559 0210 833704F9 		ld	a5,-112(s0)
 560              	.LVL36:
 561              	.LBB61:
 562              	.LBB62:
GAS LISTING /tmp/ccI1hA1R.s 			page 19


 120:src/../h/riscv.hpp **** }
 563              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 564              		.loc 2 120 65 is_stmt 0
 565              	#APP
 566              	# 120 "src/../h/riscv.hpp" 1
 121:src/../h/riscv.hpp **** 
 567              		csrw sepc, a5
 568              	# 0 "" 2
 569              		.loc 2 121 1
 570              	#NO_APP
 571 0218 6FF01FF0 		j	.L3
 572              	.LVL37:
 573              	.L20:
 574              	.LBE62:
 575              	.LBE61:
 576              	.LBE54:
 577              	.LBE51:
 578              	.LBE48:
  93:src/riscv.cpp ****         console_handler();
 579              		.loc 1 93 9 is_stmt 1
  93:src/riscv.cpp ****         console_handler();
 580              		.loc 1 93 24 is_stmt 0
 581 021c 97000000 		call	console_handler@plt
 581      E7800000 
 582              	.LVL38:
 583 0224 6FF05FEF 		j	.L3
 584              	.LBE75:
 585              	.LBE78:
 586              		.cfi_endproc
 587              	.LFE41:
 589              	.Letext0:
 590              		.file 4 "src/../h/../lib/hw.h"
 591              		.file 5 "src/../h/MemoryAllocator.hpp"
 592              		.file 6 "src/../h/syscall_c.hpp"
 593              		.file 7 "src/../h/print.hpp"
 594              		.file 8 "src/../h/../lib/console.h"
GAS LISTING /tmp/ccI1hA1R.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccI1hA1R.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccI1hA1R.s:13     .text:0000000000000000 .L0 
     /tmp/ccI1hA1R.s:14     .text:0000000000000000 .L0 
     /tmp/ccI1hA1R.s:15     .text:0000000000000004 .L0 
     /tmp/ccI1hA1R.s:17     .text:0000000000000008 .L0 
     /tmp/ccI1hA1R.s:19     .text:000000000000000c .L0 
     /tmp/ccI1hA1R.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:10     .text:000000000000000c .L0 
     /tmp/ccI1hA1R.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:11     .text:0000000000000010 .L0 
     /tmp/ccI1hA1R.s:33     .text:0000000000000014 .L0 
     /tmp/ccI1hA1R.s:34     .text:0000000000000018 .L0 
     /tmp/ccI1hA1R.s:35     .text:0000000000000018 .L0 
     /tmp/ccI1hA1R.s:37     .text:000000000000001c .L0 
     /tmp/ccI1hA1R.s:39     .text:0000000000000020 .L0 
     /tmp/ccI1hA1R.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccI1hA1R.s:48     .text:0000000000000020 .L0 
     /tmp/ccI1hA1R.s:49     .text:0000000000000020 .L0 
     /tmp/ccI1hA1R.s:50     .text:0000000000000024 .L0 
     /tmp/ccI1hA1R.s:54     .text:0000000000000030 .L0 
     /tmp/ccI1hA1R.s:55     .text:0000000000000030 .L0 
     /tmp/ccI1hA1R.s:56     .text:0000000000000030 .L0 
     /tmp/ccI1hA1R.s:58     .text:0000000000000034 .L0 
     /tmp/ccI1hA1R.s:63     .text:0000000000000034 .L0 
     /tmp/ccI1hA1R.s:64     .text:0000000000000034 .L0 
     /tmp/ccI1hA1R.s:65     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:195    .text:0000000000000034 .L0 
     /tmp/ccI1hA1R.s:73     .text:000000000000003c .L0 
     /tmp/ccI1hA1R.s:74     .text:000000000000003c .L0 
     /tmp/ccI1hA1R.s:81     .text:0000000000000040 .L0 
     /tmp/ccI1hA1R.s:82     .text:0000000000000040 .L0 
     /tmp/ccI1hA1R.s:83     .text:0000000000000040 .L0 
  src/../h/riscv.hpp:102    .text:0000000000000040 .L0 
     /tmp/ccI1hA1R.s:91     .text:0000000000000048 .L0 
     /tmp/ccI1hA1R.s:92     .text:0000000000000048 .L0 
     /tmp/ccI1hA1R.s:98     .text:000000000000004c .L0 
     /tmp/ccI1hA1R.s:99     .text:000000000000004c .L0 
     /tmp/ccI1hA1R.s:101    .text:0000000000000050 .L0 
     /tmp/ccI1hA1R.s:107    .text:0000000000000058 .L0 
     /tmp/ccI1hA1R.s:113    .text:0000000000000068 .L0 
     /tmp/ccI1hA1R.s:118    .text:0000000000000078 .L0 
     /tmp/ccI1hA1R.s:119    .text:0000000000000078 .L0 
     /tmp/ccI1hA1R.s:124    .text:0000000000000080 .L0 
     /tmp/ccI1hA1R.s:125    .text:0000000000000080 .L0 
     /tmp/ccI1hA1R.s:126    .text:0000000000000080 .L0 
  src/../h/riscv.hpp:114    .text:0000000000000080 .L0 
     /tmp/ccI1hA1R.s:134    .text:0000000000000088 .L0 
     /tmp/ccI1hA1R.s:135    .text:0000000000000088 .L0 
     /tmp/ccI1hA1R.s:139    .text:000000000000008c .L0 
     /tmp/ccI1hA1R.s:144    .text:0000000000000094 .L0 
     /tmp/ccI1hA1R.s:145    .text:0000000000000094 .L0 
     /tmp/ccI1hA1R.s:146    .text:0000000000000094 .L0 
  src/../h/riscv.hpp:138    .text:0000000000000094 .L0 
     /tmp/ccI1hA1R.s:154    .text:000000000000009c .L0 
     /tmp/ccI1hA1R.s:155    .text:000000000000009c .L0 
GAS LISTING /tmp/ccI1hA1R.s 			page 21


     /tmp/ccI1hA1R.s:159    .text:00000000000000a0 .L0 
     /tmp/ccI1hA1R.s:164    .text:00000000000000a8 .L0 
     /tmp/ccI1hA1R.s:172    .text:00000000000000ac .L0 
     /tmp/ccI1hA1R.s:173    .text:00000000000000ac .L0 
     /tmp/ccI1hA1R.s:174    .text:00000000000000ac .L0 
  src/../h/riscv.hpp:114    .text:00000000000000ac .L0 
     /tmp/ccI1hA1R.s:182    .text:00000000000000b4 .L0 
     /tmp/ccI1hA1R.s:183    .text:00000000000000b4 .L0 
     /tmp/ccI1hA1R.s:187    .text:00000000000000b8 .L0 
     /tmp/ccI1hA1R.s:189    .text:00000000000000bc .L0 
     /tmp/ccI1hA1R.s:193    .text:00000000000000c0 .L0 
     /tmp/ccI1hA1R.s:194    .text:00000000000000c0 .L0 
     /tmp/ccI1hA1R.s:195    .text:00000000000000c0 .L0 
  src/../h/riscv.hpp:182    .text:00000000000000c0 .L0 
     /tmp/ccI1hA1R.s:203    .text:00000000000000c8 .L0 
     /tmp/ccI1hA1R.s:204    .text:00000000000000c8 .L0 
     /tmp/ccI1hA1R.s:208    .text:00000000000000cc .L0 
     /tmp/ccI1hA1R.s:210    .text:00000000000000d0 .L0 
     /tmp/ccI1hA1R.s:211    .text:00000000000000d0 .L0 
     /tmp/ccI1hA1R.s:248    .text:00000000000000f4 .L0 
     /tmp/ccI1hA1R.s:249    .text:00000000000000f4 .L0 
     /tmp/ccI1hA1R.s:250    .text:00000000000000f4 .L0 
     /tmp/ccI1hA1R.s:251    .text:00000000000000f4 .L0 
       src/riscv.cpp:28     .text:00000000000000f4 .L0 
     /tmp/ccI1hA1R.s:258    .text:00000000000000f8 .L0 
     /tmp/ccI1hA1R.s:260    .text:00000000000000f8 .L0 
     /tmp/ccI1hA1R.s:263    .text:0000000000000100 .L0 
       src/riscv.cpp:30     .text:0000000000000100 .L0 
     /tmp/ccI1hA1R.s:269    .text:0000000000000104 .L0 
       src/riscv.cpp:31     .text:0000000000000104 .L0 
     /tmp/ccI1hA1R.s:278    .text:0000000000000108 .L0 
     /tmp/ccI1hA1R.s:279    .text:0000000000000108 .L0 
     /tmp/ccI1hA1R.s:280    .text:0000000000000108 .L0 
     /tmp/ccI1hA1R.s:285    .text:000000000000010c .L0 
  src/../h/riscv.hpp:188    .text:000000000000010c .L0 
     /tmp/ccI1hA1R.s:295    .text:0000000000000110 .L0 
     /tmp/ccI1hA1R.s:296    .text:0000000000000110 .L0 
     /tmp/ccI1hA1R.s:301    .text:0000000000000114 .L0 
  src/../h/riscv.hpp:120    .text:0000000000000114 .L0 
     /tmp/ccI1hA1R.s:314    .text:0000000000000118 .L0 
     /tmp/ccI1hA1R.s:315    .text:000000000000011c .L0 
     /tmp/ccI1hA1R.s:316    .text:000000000000011c .L0 
     /tmp/ccI1hA1R.s:318    .text:0000000000000120 .L0 
     /tmp/ccI1hA1R.s:319    .text:0000000000000120 .L0 
     /tmp/ccI1hA1R.s:321    .text:0000000000000124 .L0 
     /tmp/ccI1hA1R.s:323    .text:0000000000000128 .L0 
     /tmp/ccI1hA1R.s:327    .text:000000000000012c .L0 
     /tmp/ccI1hA1R.s:332    .text:000000000000012c .L0 
     /tmp/ccI1hA1R.s:333    .text:000000000000012c .L0 
     /tmp/ccI1hA1R.s:334    .text:000000000000012c .L0 
     /tmp/ccI1hA1R.s:335    .text:000000000000012c .L0 
       src/riscv.cpp:37     .text:000000000000012c .L0 
     /tmp/ccI1hA1R.s:342    .text:0000000000000130 .L0 
     /tmp/ccI1hA1R.s:344    .text:0000000000000130 .L0 
     /tmp/ccI1hA1R.s:347    .text:0000000000000138 .L0 
       src/riscv.cpp:39     .text:0000000000000138 .L0 
     /tmp/ccI1hA1R.s:353    .text:000000000000013c .L0 
GAS LISTING /tmp/ccI1hA1R.s 			page 22


       src/riscv.cpp:40     .text:000000000000013c .L0 
     /tmp/ccI1hA1R.s:359    .text:0000000000000140 .L0 
     /tmp/ccI1hA1R.s:363    .text:0000000000000144 .L0 
     /tmp/ccI1hA1R.s:364    .text:0000000000000144 .L0 
     /tmp/ccI1hA1R.s:365    .text:0000000000000144 .L0 
     /tmp/ccI1hA1R.s:366    .text:0000000000000144 .L0 
     /tmp/ccI1hA1R.s:367    .text:0000000000000144 .L0 
       src/riscv.cpp:47     .text:0000000000000144 .L0 
     /tmp/ccI1hA1R.s:374    .text:0000000000000148 .L0 
       src/riscv.cpp:48     .text:0000000000000148 .L0 
     /tmp/ccI1hA1R.s:380    .text:000000000000014c .L0 
       src/riscv.cpp:49     .text:000000000000014c .L0 
     /tmp/ccI1hA1R.s:386    .text:0000000000000150 .L0 
     /tmp/ccI1hA1R.s:388    .text:0000000000000150 .L0 
     /tmp/ccI1hA1R.s:391    .text:0000000000000158 .L0 
     /tmp/ccI1hA1R.s:393    .text:000000000000015c .L0 
     /tmp/ccI1hA1R.s:395    .text:0000000000000160 .L0 
     /tmp/ccI1hA1R.s:399    .text:0000000000000164 .L0 
       src/riscv.cpp:54     .text:0000000000000164 .L0 
     /tmp/ccI1hA1R.s:405    .text:0000000000000168 .L0 
       src/riscv.cpp:55     .text:0000000000000168 .L0 
     /tmp/ccI1hA1R.s:411    .text:000000000000016c .L0 
     /tmp/ccI1hA1R.s:415    .text:0000000000000170 .L0 
     /tmp/ccI1hA1R.s:420    .text:0000000000000178 .L0 
     /tmp/ccI1hA1R.s:421    .text:0000000000000178 .L0 
     /tmp/ccI1hA1R.s:422    .text:0000000000000178 .L0 
     /tmp/ccI1hA1R.s:425    .text:0000000000000180 .L0 
       src/riscv.cpp:60     .text:0000000000000180 .L0 
     /tmp/ccI1hA1R.s:431    .text:0000000000000184 .L0 
       src/riscv.cpp:61     .text:0000000000000184 .L0 
     /tmp/ccI1hA1R.s:437    .text:0000000000000188 .L0 
     /tmp/ccI1hA1R.s:441    .text:000000000000018c .L0 
     /tmp/ccI1hA1R.s:442    .text:000000000000018c .L0 
     /tmp/ccI1hA1R.s:443    .text:000000000000018c .L0 
     /tmp/ccI1hA1R.s:446    .text:0000000000000198 .L0 
     /tmp/ccI1hA1R.s:447    .text:0000000000000198 .L0 
     /tmp/ccI1hA1R.s:450    .text:00000000000001a0 .L0 
     /tmp/ccI1hA1R.s:460    .text:00000000000001a4 .L0 
     /tmp/ccI1hA1R.s:461    .text:00000000000001a4 .L0 
     /tmp/ccI1hA1R.s:462    .text:00000000000001a4 .L0 
     /tmp/ccI1hA1R.s:472    .text:00000000000001ac .L0 
     /tmp/ccI1hA1R.s:473    .text:00000000000001ac .L0 
     /tmp/ccI1hA1R.s:479    .text:00000000000001c0 .L0 
     /tmp/ccI1hA1R.s:480    .text:00000000000001c0 .L0 
     /tmp/ccI1hA1R.s:487    .text:00000000000001cc .L0 
     /tmp/ccI1hA1R.s:488    .text:00000000000001cc .L0 
     /tmp/ccI1hA1R.s:493    .text:00000000000001d0 .L0 
     /tmp/ccI1hA1R.s:498    .text:00000000000001d4 .L0 
     /tmp/ccI1hA1R.s:499    .text:00000000000001d4 .L0 
     /tmp/ccI1hA1R.s:500    .text:00000000000001d4 .L0 
  src/../h/riscv.hpp:114    .text:00000000000001d4 .L0 
     /tmp/ccI1hA1R.s:508    .text:00000000000001dc .L0 
     /tmp/ccI1hA1R.s:509    .text:00000000000001dc .L0 
     /tmp/ccI1hA1R.s:513    .text:00000000000001e0 .L0 
     /tmp/ccI1hA1R.s:517    .text:00000000000001e4 .L0 
     /tmp/ccI1hA1R.s:518    .text:00000000000001e4 .L0 
     /tmp/ccI1hA1R.s:519    .text:00000000000001e4 .L0 
GAS LISTING /tmp/ccI1hA1R.s 			page 23


  src/../h/riscv.hpp:182    .text:00000000000001e4 .L0 
     /tmp/ccI1hA1R.s:527    .text:00000000000001ec .L0 
     /tmp/ccI1hA1R.s:528    .text:00000000000001ec .L0 
     /tmp/ccI1hA1R.s:532    .text:00000000000001f0 .L0 
     /tmp/ccI1hA1R.s:534    .text:00000000000001f4 .L0 
     /tmp/ccI1hA1R.s:535    .text:00000000000001f4 .L0 
     /tmp/ccI1hA1R.s:538    .text:0000000000000200 .L0 
     /tmp/ccI1hA1R.s:539    .text:0000000000000200 .L0 
     /tmp/ccI1hA1R.s:542    .text:0000000000000208 .L0 
     /tmp/ccI1hA1R.s:543    .text:0000000000000208 .L0 
     /tmp/ccI1hA1R.s:548    .text:000000000000020c .L0 
  src/../h/riscv.hpp:188    .text:000000000000020c .L0 
     /tmp/ccI1hA1R.s:558    .text:0000000000000210 .L0 
     /tmp/ccI1hA1R.s:559    .text:0000000000000210 .L0 
     /tmp/ccI1hA1R.s:564    .text:0000000000000214 .L0 
  src/../h/riscv.hpp:120    .text:0000000000000214 .L0 
     /tmp/ccI1hA1R.s:571    .text:0000000000000218 .L0 
     /tmp/ccI1hA1R.s:580    .text:000000000000021c .L0 
     /tmp/ccI1hA1R.s:581    .text:000000000000021c .L0 
     /tmp/ccI1hA1R.s:586    .text:0000000000000228 .L0 
     /tmp/ccI1hA1R.s:595    .text:0000000000000228 .L0 
     /tmp/ccI1hA1R.s:223    .rodata:0000000000000000 .L7
     /tmp/ccI1hA1R.s:215    .text:00000000000000dc .L0 
     /tmp/ccI1hA1R.s:443    .text:000000000000018c .L0 
     /tmp/ccI1hA1R.s:473    .text:00000000000001ac .L0 
     /tmp/ccI1hA1R.s:480    .text:00000000000001c0 .L0 
     /tmp/ccI1hA1R.s:535    .text:00000000000001f4 .L0 
     /tmp/ccI1hA1R.s:166    .text:00000000000000ac .L18
     /tmp/ccI1hA1R.s:452    .text:00000000000001a4 .L19
     /tmp/ccI1hA1R.s:573    .text:000000000000021c .L20
     /tmp/ccI1hA1R.s:308    .text:0000000000000118 .L3
     /tmp/ccI1hA1R.s:276    .text:0000000000000108 .L5
     /tmp/ccI1hA1R.s:413    .text:0000000000000170 .L16
     /tmp/ccI1hA1R.s:396    .text:0000000000000164 .L12
     /tmp/ccI1hA1R.s:245    .text:00000000000000f4 .L11
     /tmp/ccI1hA1R.s:326    .text:000000000000012c .L10
     /tmp/ccI1hA1R.s:361    .text:0000000000000144 .L9
     /tmp/ccI1hA1R.s:418    .text:0000000000000178 .L8
     /tmp/ccI1hA1R.s:439    .text:000000000000018c .L6
     /tmp/ccI1hA1R.s:1866   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccI1hA1R.s:3039   .debug_str:00000000000000b6 .LASF136
     /tmp/ccI1hA1R.s:3187   .debug_str:00000000000005af .LASF137
     /tmp/ccI1hA1R.s:3147   .debug_str:00000000000004b9 .LASF138
     /tmp/ccI1hA1R.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccI1hA1R.s:589    .text:0000000000000228 .Letext0
     /tmp/ccI1hA1R.s:3009   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccI1hA1R.s:3161   .debug_str:000000000000051a .LASF0
     /tmp/ccI1hA1R.s:3181   .debug_str:0000000000000584 .LASF1
     /tmp/ccI1hA1R.s:3143   .debug_str:000000000000049b .LASF2
     /tmp/ccI1hA1R.s:3117   .debug_str:00000000000003f6 .LASF4
     /tmp/ccI1hA1R.s:3229   .debug_str:00000000000006b8 .LASF3
     /tmp/ccI1hA1R.s:3041   .debug_str:000000000000017a .LASF5
     /tmp/ccI1hA1R.s:3185   .debug_str:000000000000059c .LASF6
     /tmp/ccI1hA1R.s:3159   .debug_str:0000000000000507 .LASF7
     /tmp/ccI1hA1R.s:3271   .debug_str:000000000000080f .LASF8
     /tmp/ccI1hA1R.s:3103   .debug_str:0000000000000363 .LASF9
     /tmp/ccI1hA1R.s:3199   .debug_str:00000000000005f7 .LASF10
GAS LISTING /tmp/ccI1hA1R.s 			page 24


     /tmp/ccI1hA1R.s:3259   .debug_str:00000000000007a8 .LASF11
     /tmp/ccI1hA1R.s:3045   .debug_str:0000000000000186 .LASF12
     /tmp/ccI1hA1R.s:3017   .debug_str:0000000000000032 .LASF13
     /tmp/ccI1hA1R.s:3053   .debug_str:00000000000001d0 .LASF14
     /tmp/ccI1hA1R.s:3221   .debug_str:000000000000067c .LASF15
     /tmp/ccI1hA1R.s:3061   .debug_str:0000000000000203 .LASF16
     /tmp/ccI1hA1R.s:3145   .debug_str:00000000000004a9 .LASF26
     /tmp/ccI1hA1R.s:3087   .debug_str:00000000000002f8 .LASF27
     /tmp/ccI1hA1R.s:3261   .debug_str:00000000000007b7 .LASF17
     /tmp/ccI1hA1R.s:3247   .debug_str:0000000000000744 .LASF18
     /tmp/ccI1hA1R.s:3195   .debug_str:00000000000005d5 .LASF19
     /tmp/ccI1hA1R.s:3233   .debug_str:00000000000006db .LASF29
     /tmp/ccI1hA1R.s:3263   .debug_str:00000000000007bc .LASF31
     /tmp/ccI1hA1R.s:3121   .debug_str:0000000000000410 .LASF20
     /tmp/ccI1hA1R.s:3013   .debug_str:0000000000000009 .LASF51
     /tmp/ccI1hA1R.s:3067   .debug_str:000000000000024f .LASF53
     /tmp/ccI1hA1R.s:3275   .debug_str:0000000000000826 .LASF21
     /tmp/ccI1hA1R.s:3243   .debug_str:000000000000071c .LASF23
     /tmp/ccI1hA1R.s:3205   .debug_str:0000000000000619 .LASF22
     /tmp/ccI1hA1R.s:3295   .debug_str:00000000000008bb .LASF24
     /tmp/ccI1hA1R.s:3191   .debug_str:00000000000005c8 .LASF55
     /tmp/ccI1hA1R.s:3255   .debug_str:000000000000077f .LASF57
     /tmp/ccI1hA1R.s:3085   .debug_str:00000000000002f3 .LASF25
     /tmp/ccI1hA1R.s:3025   .debug_str:000000000000006c .LASF28
     /tmp/ccI1hA1R.s:3283   .debug_str:0000000000000860 .LASF30
     /tmp/ccI1hA1R.s:3037   .debug_str:00000000000000aa .LASF32
     /tmp/ccI1hA1R.s:3097   .debug_str:0000000000000336 .LASF33
     /tmp/ccI1hA1R.s:3105   .debug_str:0000000000000371 .LASF34
     /tmp/ccI1hA1R.s:3239   .debug_str:0000000000000703 .LASF35
     /tmp/ccI1hA1R.s:3217   .debug_str:0000000000000664 .LASF37
     /tmp/ccI1hA1R.s:3119   .debug_str:00000000000003fd .LASF36
     /tmp/ccI1hA1R.s:3257   .debug_str:000000000000079b .LASF38
     /tmp/ccI1hA1R.s:3071   .debug_str:0000000000000286 .LASF39
     /tmp/ccI1hA1R.s:3209   .debug_str:0000000000000635 .LASF40
     /tmp/ccI1hA1R.s:3189   .debug_str:00000000000005bd .LASF43
     /tmp/ccI1hA1R.s:3101   .debug_str:000000000000034c .LASF45
     /tmp/ccI1hA1R.s:3149   .debug_str:00000000000004d7 .LASF41
     /tmp/ccI1hA1R.s:3113   .debug_str:00000000000003b7 .LASF42
     /tmp/ccI1hA1R.s:3141   .debug_str:000000000000048e .LASF44
     /tmp/ccI1hA1R.s:3249   .debug_str:0000000000000749 .LASF46
     /tmp/ccI1hA1R.s:3077   .debug_str:00000000000002af .LASF139
     /tmp/ccI1hA1R.s:3129   .debug_str:0000000000000434 .LASF47
     /tmp/ccI1hA1R.s:3179   .debug_str:0000000000000564 .LASF48
     /tmp/ccI1hA1R.s:3213   .debug_str:0000000000000649 .LASF140
     /tmp/ccI1hA1R.s:3055   .debug_str:00000000000001dc .LASF49
     /tmp/ccI1hA1R.s:3023   .debug_str:0000000000000052 .LASF50
     /tmp/ccI1hA1R.s:3201   .debug_str:0000000000000606 .LASF52
     /tmp/ccI1hA1R.s:3215   .debug_str:000000000000064e .LASF54
     /tmp/ccI1hA1R.s:3223   .debug_str:0000000000000692 .LASF56
     /tmp/ccI1hA1R.s:3155   .debug_str:00000000000004f1 .LASF58
     /tmp/ccI1hA1R.s:3291   .debug_str:000000000000088e .LASF141
     /tmp/ccI1hA1R.s:3123   .debug_str:000000000000041e .LASF59
     /tmp/ccI1hA1R.s:3169   .debug_str:000000000000053d .LASF60
     /tmp/ccI1hA1R.s:3167   .debug_str:0000000000000537 .LASF61
     /tmp/ccI1hA1R.s:3127   .debug_str:000000000000042c .LASF62
     /tmp/ccI1hA1R.s:3173   .debug_str:000000000000054b .LASF63
     /tmp/ccI1hA1R.s:3285   .debug_str:000000000000086d .LASF64
GAS LISTING /tmp/ccI1hA1R.s 			page 25


     /tmp/ccI1hA1R.s:3231   .debug_str:00000000000006ca .LASF65
     /tmp/ccI1hA1R.s:3133   .debug_str:000000000000044c .LASF66
     /tmp/ccI1hA1R.s:3111   .debug_str:00000000000003ac .LASF67
     /tmp/ccI1hA1R.s:3135   .debug_str:0000000000000457 .LASF68
     /tmp/ccI1hA1R.s:3109   .debug_str:0000000000000393 .LASF70
     /tmp/ccI1hA1R.s:3165   .debug_str:000000000000052e .LASF69
     /tmp/ccI1hA1R.s:3083   .debug_str:00000000000002e0 .LASF71
     /tmp/ccI1hA1R.s:3279   .debug_str:0000000000000845 .LASF142
     /tmp/ccI1hA1R.s:3115   .debug_str:00000000000003ce .LASF143
     /tmp/ccI1hA1R.s:3177   .debug_str:000000000000055e .LASF72
     /tmp/ccI1hA1R.s:3131   .debug_str:0000000000000441 .LASF144
     /tmp/ccI1hA1R.s:3241   .debug_str:0000000000000713 .LASF73
     /tmp/ccI1hA1R.s:3175   .debug_str:0000000000000555 .LASF74
     /tmp/ccI1hA1R.s:3125   .debug_str:0000000000000423 .LASF75
     /tmp/ccI1hA1R.s:3219   .debug_str:0000000000000671 .LASF76
     /tmp/ccI1hA1R.s:3293   .debug_str:00000000000008a3 .LASF77
     /tmp/ccI1hA1R.s:3035   .debug_str:000000000000009c .LASF78
     /tmp/ccI1hA1R.s:3075   .debug_str:0000000000000294 .LASF79
     /tmp/ccI1hA1R.s:3089   .debug_str:0000000000000300 .LASF80
     /tmp/ccI1hA1R.s:3015   .debug_str:0000000000000018 .LASF81
     /tmp/ccI1hA1R.s:3019   .debug_str:0000000000000042 .LASF82
     /tmp/ccI1hA1R.s:3079   .debug_str:00000000000002b7 .LASF83
     /tmp/ccI1hA1R.s:3073   .debug_str:000000000000028b .LASF84
     /tmp/ccI1hA1R.s:3059   .debug_str:00000000000001ee .LASF85
     /tmp/ccI1hA1R.s:3153   .debug_str:00000000000004ea .LASF86
     /tmp/ccI1hA1R.s:3207   .debug_str:0000000000000622 .LASF87
     /tmp/ccI1hA1R.s:3273   .debug_str:000000000000081f .LASF88
     /tmp/ccI1hA1R.s:3267   .debug_str:00000000000007f6 .LASF89
     /tmp/ccI1hA1R.s:3093   .debug_str:0000000000000320 .LASF90
     /tmp/ccI1hA1R.s:3063   .debug_str:0000000000000219 .LASF91
     /tmp/ccI1hA1R.s:3225   .debug_str:0000000000000698 .LASF92
     /tmp/ccI1hA1R.s:3235   .debug_str:00000000000006e0 .LASF93
     /tmp/ccI1hA1R.s:3193   .debug_str:00000000000005cd .LASF94
     /tmp/ccI1hA1R.s:3047   .debug_str:0000000000000196 .LASF95
     /tmp/ccI1hA1R.s:3299   .debug_str:00000000000008e8 .LASF96
     /tmp/ccI1hA1R.s:3081   .debug_str:00000000000002cc .LASF97
     /tmp/ccI1hA1R.s:3163   .debug_str:0000000000000527 .LASF98
     /tmp/ccI1hA1R.s:3287   .debug_str:0000000000000876 .LASF99
     /tmp/ccI1hA1R.s:3031   .debug_str:0000000000000084 .LASF100
     /tmp/ccI1hA1R.s:3091   .debug_str:000000000000030d .LASF101
     /tmp/ccI1hA1R.s:3157   .debug_str:0000000000000501 .LASF102
     /tmp/ccI1hA1R.s:3253   .debug_str:000000000000076d .LASF103
     /tmp/ccI1hA1R.s:3029   .debug_str:000000000000007e .LASF104
     /tmp/ccI1hA1R.s:3301   .debug_str:00000000000008f0 .LASF105
     /tmp/ccI1hA1R.s:3297   .debug_str:00000000000008dd .LASF106
     /tmp/ccI1hA1R.s:3227   .debug_str:00000000000006a0 .LASF107
     /tmp/ccI1hA1R.s:3251   .debug_str:0000000000000762 .LASF108
     /tmp/ccI1hA1R.s:3137   .debug_str:0000000000000465 .LASF109
     /tmp/ccI1hA1R.s:3051   .debug_str:00000000000001c6 .LASF110
     /tmp/ccI1hA1R.s:3197   .debug_str:00000000000005e1 .LASF111
     /tmp/ccI1hA1R.s:3027   .debug_str:0000000000000074 .LASF112
     /tmp/ccI1hA1R.s:3107   .debug_str:000000000000037d .LASF113
     /tmp/ccI1hA1R.s:3183   .debug_str:0000000000000597 .LASF114
     /tmp/ccI1hA1R.s:3139   .debug_str:000000000000047d .LASF115
     /tmp/ccI1hA1R.s:3043   .debug_str:0000000000000181 .LASF116
     /tmp/ccI1hA1R.s:3033   .debug_str:000000000000008b .LASF117
     /tmp/ccI1hA1R.s:3237   .debug_str:00000000000006f4 .LASF118
GAS LISTING /tmp/ccI1hA1R.s 			page 26


     /tmp/ccI1hA1R.s:3049   .debug_str:00000000000001aa .LASF119
     /tmp/ccI1hA1R.s:3277   .debug_str:0000000000000830 .LASF120
     /tmp/ccI1hA1R.s:3065   .debug_str:000000000000022d .LASF121
     /tmp/ccI1hA1R.s:3011   .debug_str:0000000000000000 .LASF122
     /tmp/ccI1hA1R.s:46     .text:0000000000000020 .LFB41
     /tmp/ccI1hA1R.s:587    .text:0000000000000228 .LFE41
     /tmp/ccI1hA1R.s:2815   .debug_loc:0000000000000000 .LLST0
     /tmp/ccI1hA1R.s:3021   .debug_str:000000000000004b .LASF123
     /tmp/ccI1hA1R.s:2826   .debug_loc:0000000000000036 .LLST1
     /tmp/ccI1hA1R.s:2995   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccI1hA1R.s:3171   .debug_str:0000000000000546 .LASF124
     /tmp/ccI1hA1R.s:3211   .debug_str:0000000000000641 .LASF125
     /tmp/ccI1hA1R.s:2879   .debug_loc:000000000000011d .LLST6
     /tmp/ccI1hA1R.s:2890   .debug_loc:0000000000000153 .LLST7
     /tmp/ccI1hA1R.s:3203   .debug_str:0000000000000611 .LASF126
     /tmp/ccI1hA1R.s:2897   .debug_loc:0000000000000176 .LLST8
     /tmp/ccI1hA1R.s:3269   .debug_str:0000000000000809 .LASF127
     /tmp/ccI1hA1R.s:2904   .debug_loc:0000000000000199 .LLST9
     /tmp/ccI1hA1R.s:3245   .debug_str:000000000000073d .LASF128
     /tmp/ccI1hA1R.s:2911   .debug_loc:00000000000001bc .LLST10
     /tmp/ccI1hA1R.s:3095   .debug_str:0000000000000328 .LASF129
     /tmp/ccI1hA1R.s:2918   .debug_loc:00000000000001df .LLST11
     /tmp/ccI1hA1R.s:2925   .debug_loc:0000000000000202 .LLST12
     /tmp/ccI1hA1R.s:3151   .debug_str:00000000000004e3 .LASF130
     /tmp/ccI1hA1R.s:2932   .debug_loc:0000000000000225 .LLST13
     /tmp/ccI1hA1R.s:261    .text:0000000000000100 .LVL9
     /tmp/ccI1hA1R.s:345    .text:0000000000000138 .LVL17
     /tmp/ccI1hA1R.s:389    .text:0000000000000158 .LVL22
     /tmp/ccI1hA1R.s:423    .text:0000000000000180 .LVL26
     /tmp/ccI1hA1R.s:448    .text:00000000000001a0 .LVL28
     /tmp/ccI1hA1R.s:170    .text:00000000000000ac .LBB64
     /tmp/ccI1hA1R.s:185    .text:00000000000000b8 .LBE64
     /tmp/ccI1hA1R.s:191    .text:00000000000000c0 .LBB66
     /tmp/ccI1hA1R.s:206    .text:00000000000000cc .LBE66
     /tmp/ccI1hA1R.s:282    .text:000000000000010c .LBB69
     /tmp/ccI1hA1R.s:293    .text:0000000000000110 .LBE69
     /tmp/ccI1hA1R.s:2939   .debug_loc:0000000000000248 .LLST14
     /tmp/ccI1hA1R.s:298    .text:0000000000000114 .LBB71
     /tmp/ccI1hA1R.s:310    .text:0000000000000118 .LBE71
     /tmp/ccI1hA1R.s:2946   .debug_loc:000000000000026b .LLST15
     /tmp/ccI1hA1R.s:494    .text:00000000000001d4 .LBB54
     /tmp/ccI1hA1R.s:576    .text:000000000000021c .LBE54
     /tmp/ccI1hA1R.s:496    .text:00000000000001d4 .LBB55
     /tmp/ccI1hA1R.s:511    .text:00000000000001e0 .LBE55
     /tmp/ccI1hA1R.s:515    .text:00000000000001e4 .LBB57
     /tmp/ccI1hA1R.s:530    .text:00000000000001f0 .LBE57
     /tmp/ccI1hA1R.s:545    .text:000000000000020c .LBB59
     /tmp/ccI1hA1R.s:556    .text:0000000000000210 .LBE59
     /tmp/ccI1hA1R.s:2953   .debug_loc:000000000000028e .LLST4
     /tmp/ccI1hA1R.s:561    .text:0000000000000214 .LBB61
     /tmp/ccI1hA1R.s:575    .text:000000000000021c .LBE61
     /tmp/ccI1hA1R.s:2960   .debug_loc:00000000000002b1 .LLST5
     /tmp/ccI1hA1R.s:540    .text:0000000000000208 .LVL33
     /tmp/ccI1hA1R.s:60     .text:0000000000000034 .LBB38
     /tmp/ccI1hA1R.s:77     .text:0000000000000040 .LBE38
     /tmp/ccI1hA1R.s:79     .text:0000000000000040 .LBB40
     /tmp/ccI1hA1R.s:95     .text:000000000000004c .LBE40
GAS LISTING /tmp/ccI1hA1R.s 			page 27


     /tmp/ccI1hA1R.s:122    .text:0000000000000080 .LBB44
     /tmp/ccI1hA1R.s:137    .text:000000000000008c .LBE44
     /tmp/ccI1hA1R.s:142    .text:0000000000000094 .LBB46
     /tmp/ccI1hA1R.s:157    .text:00000000000000a0 .LBE46
     /tmp/ccI1hA1R.s:458    .text:00000000000001a4 .LBB49
     /tmp/ccI1hA1R.s:470    .text:00000000000001ac .LBE49
     /tmp/ccI1hA1R.s:2967   .debug_loc:00000000000002d4 .LLST2
     /tmp/ccI1hA1R.s:483    .text:00000000000001cc .LBB52
     /tmp/ccI1hA1R.s:491    .text:00000000000001d0 .LBE52
     /tmp/ccI1hA1R.s:2975   .debug_loc:00000000000002f8 .LLST3
     /tmp/ccI1hA1R.s:120    .text:0000000000000080 .LVL3
     /tmp/ccI1hA1R.s:140    .text:0000000000000094 .LVL4
     /tmp/ccI1hA1R.s:160    .text:00000000000000a8 .LVL5
     /tmp/ccI1hA1R.s:582    .text:0000000000000224 .LVL38
     /tmp/ccI1hA1R.s:10     .text:0000000000000000 .LFB40
     /tmp/ccI1hA1R.s:40     .text:0000000000000020 .LFE40
     /tmp/ccI1hA1R.s:3057   .debug_str:00000000000001e9 .LASF131
     /tmp/ccI1hA1R.s:3099   .debug_str:0000000000000346 .LASF132
     /tmp/ccI1hA1R.s:3289   .debug_str:0000000000000889 .LASF145
     /tmp/ccI1hA1R.s:3265   .debug_str:00000000000007e4 .LASF133
     /tmp/ccI1hA1R.s:3281   .debug_str:0000000000000853 .LASF135
     /tmp/ccI1hA1R.s:3069   .debug_str:0000000000000276 .LASF134
     /tmp/ccI1hA1R.s:75     .text:0000000000000040 .LVL0
     /tmp/ccI1hA1R.s:108    .text:000000000000005c .LVL2
     /tmp/ccI1hA1R.s:165    .text:00000000000000ac .LVL6
     /tmp/ccI1hA1R.s:214    .text:00000000000000dc .LVL7
     /tmp/ccI1hA1R.s:93     .text:000000000000004c .LVL1
     /tmp/ccI1hA1R.s:256    .text:00000000000000f8 .LVL8
     /tmp/ccI1hA1R.s:325    .text:000000000000012c .LVL15
     /tmp/ccI1hA1R.s:340    .text:0000000000000130 .LVL16
     /tmp/ccI1hA1R.s:360    .text:0000000000000144 .LVL18
     /tmp/ccI1hA1R.s:378    .text:000000000000014c .LVL20
     /tmp/ccI1hA1R.s:417    .text:0000000000000178 .LVL25
     /tmp/ccI1hA1R.s:438    .text:000000000000018c .LVL27
     /tmp/ccI1hA1R.s:451    .text:00000000000001a4 .LVL29
     /tmp/ccI1hA1R.s:572    .text:000000000000021c .LVL37
     /tmp/ccI1hA1R.s:397    .text:0000000000000164 .LVL23
     /tmp/ccI1hA1R.s:412    .text:0000000000000170 .LVL24
     /tmp/ccI1hA1R.s:274    .text:0000000000000108 .LVL10
     /tmp/ccI1hA1R.s:384    .text:0000000000000150 .LVL21
     /tmp/ccI1hA1R.s:372    .text:0000000000000148 .LVL19
     /tmp/ccI1hA1R.s:281    .text:000000000000010c .LVL11
     /tmp/ccI1hA1R.s:290    .text:0000000000000110 .LVL12
     /tmp/ccI1hA1R.s:297    .text:0000000000000114 .LVL13
     /tmp/ccI1hA1R.s:306    .text:0000000000000118 .LVL14
     /tmp/ccI1hA1R.s:544    .text:000000000000020c .LVL34
     /tmp/ccI1hA1R.s:553    .text:0000000000000210 .LVL35
     /tmp/ccI1hA1R.s:560    .text:0000000000000214 .LVL36
     /tmp/ccI1hA1R.s:467    .text:00000000000001ac .LVL30
     /tmp/ccI1hA1R.s:482    .text:00000000000001cc .LVL31
     /tmp/ccI1hA1R.s:489    .text:00000000000001d0 .LVL32
     /tmp/ccI1hA1R.s:596    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccI1hA1R.s:168    .text:00000000000000ac .LBB63
     /tmp/ccI1hA1R.s:311    .text:0000000000000118 .LBE63
     /tmp/ccI1hA1R.s:329    .text:000000000000012c .LBB74
     /tmp/ccI1hA1R.s:454    .text:00000000000001a4 .LBE74
     /tmp/ccI1hA1R.s:246    .text:00000000000000f4 .LBB68
GAS LISTING /tmp/ccI1hA1R.s 			page 28


     /tmp/ccI1hA1R.s:277    .text:0000000000000108 .LBE68
     /tmp/ccI1hA1R.s:330    .text:000000000000012c .LBB73
     /tmp/ccI1hA1R.s:453    .text:00000000000001a4 .LBE73

UNDEFINED SYMBOLS
_Z12printIntegerm
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPKv
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB10exitThreadEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN3TCB7runningE
console_handler
