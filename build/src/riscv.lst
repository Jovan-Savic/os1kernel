GAS LISTING /tmp/cc1EFYOa.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB39:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by os on 5/17/24.
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** 
   8:src/riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 8 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
   9:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 9 5
  21              		.loc 1 9 38 is_stmt 0
  22              	#APP
  23              	# 9 "src/riscv.cpp" 1
  10              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 10 5 is_stmt 1
  27              		.loc 1 10 29 is_stmt 0
  28              	# 10 "src/riscv.cpp" 1
  11              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 11 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE39:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB40:
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::handleSupervisorTrap() {
  47              		.loc 1 13 36 is_stmt 1
GAS LISTING /tmp/cc1EFYOa.s 			page 2


  48              		.cfi_startproc
  49 0020 130101F9 		addi	sp,sp,-112
  50              		.cfi_def_cfa_offset 112
  51 0024 23341106 		sd	ra,104(sp)
  52 0028 23308106 		sd	s0,96(sp)
  53              		.cfi_offset 1, -8
  54              		.cfi_offset 8, -16
  55 002c 13040107 		addi	s0,sp,112
  56              		.cfi_def_cfa 8, 0
  14:src/riscv.cpp **** 
  15:src/riscv.cpp ****     uint64 ra = r_a0();
  57              		.loc 1 15 5
  58              	.LBB38:
  59              	.LBB39:
  60              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../lib/console.h"
  10:src/../h/riscv.hpp **** #include "print.hpp"
  11:src/../h/riscv.hpp **** #include "tcb.hpp"
  12:src/../h/riscv.hpp **** #include "MemoryAllocator.hpp"
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     //pop sstatus spp and sstatus spie
  18:src/../h/riscv.hpp ****     static void popSppSpie();
  19:src/../h/riscv.hpp ****     //push x3..31 registers
  20:src/../h/riscv.hpp ****     static void pushRegisters();
  21:src/../h/riscv.hpp ****     //pop x3..31 regiesters
  22:src/../h/riscv.hpp ****     static void popRegisters();
  23:src/../h/riscv.hpp **** 
  24:src/../h/riscv.hpp ****     // read register scause
  25:src/../h/riscv.hpp ****     static uint64 r_scause();
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // write register scause
  28:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // read register sepc
  31:src/../h/riscv.hpp ****     static uint64 r_sepc();
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // write register sepc
  34:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // read register stvec
  37:src/../h/riscv.hpp ****     static uint64 r_stvec();
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // write register stvec
  40:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // read register stval
GAS LISTING /tmp/cc1EFYOa.s 			page 3


  43:src/../h/riscv.hpp ****     static uint64 r_stval();
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // write register stval
  46:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     enum BitMaskSip
  49:src/../h/riscv.hpp ****     {
  50:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  51:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  52:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  53:src/../h/riscv.hpp ****     };
  54:src/../h/riscv.hpp **** 
  55:src/../h/riscv.hpp ****     // mask set register sip
  56:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // mask clear register sip
  59:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // read register sip
  62:src/../h/riscv.hpp ****     static uint64 r_sip();
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // write register sip
  65:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     enum BitMaskSstatus
  68:src/../h/riscv.hpp ****     {
  69:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  70:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  71:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  72:src/../h/riscv.hpp ****     };
  73:src/../h/riscv.hpp **** 
  74:src/../h/riscv.hpp ****     // mask set register sstatus
  75:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // mask clear register sstatus
  78:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // read register sstatus
  81:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // write register sstatus
  84:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     //read a0 register
  87:src/../h/riscv.hpp ****     static uint64 r_a0();
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     //write to a0 register
  90:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp ****     static void supervisorTrap();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp **** private:
  95:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  96:src/../h/riscv.hpp **** };
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
GAS LISTING /tmp/cc1EFYOa.s 			page 4


 100:src/../h/riscv.hpp **** {
 101:src/../h/riscv.hpp ****     uint64 volatile scause;
 102:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 103:src/../h/riscv.hpp ****     return scause;
 104:src/../h/riscv.hpp **** }
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 107:src/../h/riscv.hpp **** {
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     uint64 volatile sepc;
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 115:src/../h/riscv.hpp ****     return sepc;
 116:src/../h/riscv.hpp **** }
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 119:src/../h/riscv.hpp **** {
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     uint64 volatile stvec;
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 127:src/../h/riscv.hpp ****     return stvec;
 128:src/../h/riscv.hpp **** }
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 131:src/../h/riscv.hpp **** {
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     uint64 volatile stval;
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 139:src/../h/riscv.hpp ****     return stval;
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
GAS LISTING /tmp/cc1EFYOa.s 			page 5


 157:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     uint64 volatile sip;
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 161:src/../h/riscv.hpp ****     return sip;
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 183:src/../h/riscv.hpp ****     return sstatus;
 184:src/../h/riscv.hpp **** }
 185:src/../h/riscv.hpp **** 
 186:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 187:src/../h/riscv.hpp **** {
 188:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** //a0
 192:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 193:src/../h/riscv.hpp **** {
 194:src/../h/riscv.hpp ****     uint64 volatile a0;
  61              		.loc 2 194 5
 195:src/../h/riscv.hpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
  62              		.loc 2 195 5
  63              		.loc 2 195 46 is_stmt 0
  64              	#APP
  65              	# 195 "src/../h/riscv.hpp" 1
 196              	    return a0;
  66              		mv a5, a0
  67              	# 0 "" 2
  68              	#NO_APP
  69 0034 233CF4FA 		sd	a5,-72(s0)
  70              		.loc 2 196 5 is_stmt 1
  71              		.loc 2 196 12 is_stmt 0
  72 0038 833784FB 		ld	a5,-72(s0)
  73              	.LVL0:
  74              	.LBE39:
  75              	.LBE38:
  16:src/riscv.cpp ****     uint64 scause = r_scause();
  76              		.loc 1 16 5 is_stmt 1
GAS LISTING /tmp/cc1EFYOa.s 			page 6


  77              	.LBB40:
  78              	.LBB41:
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  79              		.loc 2 101 5
 102:src/../h/riscv.hpp ****     return scause;
  80              		.loc 2 102 5
 102:src/../h/riscv.hpp ****     return scause;
  81              		.loc 2 102 72 is_stmt 0
  82              	#APP
  83              	# 102 "src/../h/riscv.hpp" 1
  84              		csrr a4, scause
  85              	# 0 "" 2
  86              	#NO_APP
  87 0040 2338E4FA 		sd	a4,-80(s0)
 103:src/../h/riscv.hpp **** }
  88              		.loc 2 103 5 is_stmt 1
 103:src/../h/riscv.hpp **** }
  89              		.loc 2 103 12 is_stmt 0
  90 0044 033504FB 		ld	a0,-80(s0)
  91              	.LVL1:
  92              	.LBE41:
  93              	.LBE40:
  17:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){
  94              		.loc 1 17 5 is_stmt 1
  95              	.LBB42:
  96              		.loc 1 17 39 is_stmt 0
  97 0048 930685FF 		addi	a3,a0,-8
  98              		.loc 1 17 5
  99 004c 13071000 		li	a4,1
 100 0050 637CD704 		bleu	a3,a4,.L12
 101              	.LBE42:
  18:src/riscv.cpp ****         //environment call
  19:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
  20:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  21:src/riscv.cpp **** 
  22:src/riscv.cpp ****         switch (ra) {
  23:src/riscv.cpp ****             case 0x01:
  24:src/riscv.cpp ****                 size_t size;
  25:src/riscv.cpp ****                 void *mallocr;
  26:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
  27:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
  28:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
  29:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  30:src/riscv.cpp ****                 break;
  31:src/riscv.cpp ****             case 0x02:
  32:src/riscv.cpp ****                 void *freep;
  33:src/riscv.cpp ****                 int greska;
  34:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(freep));
  35:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
  36:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
  37:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  38:src/riscv.cpp ****                 break;
  39:src/riscv.cpp ****             case 0x13:
  40:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
  41:src/riscv.cpp ****                 TCB::dispatch();
  42:src/riscv.cpp ****                 break;
  43:src/riscv.cpp ****             default:
GAS LISTING /tmp/cc1EFYOa.s 			page 7


  44:src/riscv.cpp ****                 break;
  45:src/riscv.cpp ****         }
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****         w_sstatus(sstatus);
  48:src/riscv.cpp ****         w_sepc(sepc);
  49:src/riscv.cpp ****     }
  50:src/riscv.cpp ****     else if(scause == 0x8000000000000001UL){
 102              		.loc 1 50 10 is_stmt 1
 103              	.LBB77:
 104              	.LBB43:
 105 0054 9307F0FF 		li	a5,-1
 106              	.LVL2:
 107 0058 9397F703 		slli	a5,a5,63
 108 005c 93871700 		addi	a5,a5,1
 109 0060 6306F50E 		beq	a0,a5,.L13
  51:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  52:src/riscv.cpp ****         TCB::timeSliceCounter++;
  53:src/riscv.cpp ****         //supervisor software interrupt; timer
  54:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
  55:src/riscv.cpp **** 
  56:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
  57:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
  58:src/riscv.cpp ****             TCB::timeSliceCounter=0;
  59:src/riscv.cpp ****             TCB::dispatch();
  60:src/riscv.cpp ****             w_sstatus(sstatus);
  61:src/riscv.cpp ****             w_sepc(sepc);
  62:src/riscv.cpp ****         }
  63:src/riscv.cpp **** 
  64:src/riscv.cpp **** 
  65:src/riscv.cpp ****     }else if(scause == 0x8000000000000009UL){
 110              		.loc 1 65 11
 111 0064 9307F0FF 		li	a5,-1
 112 0068 9397F703 		slli	a5,a5,63
 113 006c 93879700 		addi	a5,a5,9
 114 0070 630AF514 		beq	a0,a5,.L14
  66:src/riscv.cpp ****         // supervisor external interrupt; console
  67:src/riscv.cpp **** 
  68:src/riscv.cpp ****         console_handler();
  69:src/riscv.cpp ****     }else{
  70:src/riscv.cpp ****         //unexpected interrupt;
  71:src/riscv.cpp ****         printInteger(scause);
 115              		.loc 1 71 9
 116              		.loc 1 71 21 is_stmt 0
 117 0074 97000000 		call	_Z12printIntegerm@plt
 117      E7800000 
 118              	.LVL3:
  72:src/riscv.cpp ****         printInteger(r_sepc());
 119              		.loc 1 72 9 is_stmt 1
 120              	.LBB44:
 121              	.LBB45:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 122              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 123              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 124              		.loc 2 114 64 is_stmt 0
 125              	#APP
GAS LISTING /tmp/cc1EFYOa.s 			page 8


 126              	# 114 "src/../h/riscv.hpp" 1
 127              		csrr a5, sepc
 128              	# 0 "" 2
 129              	#NO_APP
 130 0080 2334F4FE 		sd	a5,-24(s0)
 115:src/../h/riscv.hpp **** }
 131              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 132              		.loc 2 115 12 is_stmt 0
 133 0084 033584FE 		ld	a0,-24(s0)
 134              	.LBE45:
 135              	.LBE44:
 136              		.loc 1 72 21
 137 0088 97000000 		call	_Z12printIntegerm@plt
 137      E7800000 
 138              	.LVL4:
  73:src/riscv.cpp ****         printInteger(r_stval());
 139              		.loc 1 73 9 is_stmt 1
 140              	.LBB46:
 141              	.LBB47:
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 142              		.loc 2 137 5
 138:src/../h/riscv.hpp ****     return stval;
 143              		.loc 2 138 5
 138:src/../h/riscv.hpp ****     return stval;
 144              		.loc 2 138 68 is_stmt 0
 145              	#APP
 146              	# 138 "src/../h/riscv.hpp" 1
 147              		csrr a5, stval
 148              	# 0 "" 2
 149              	#NO_APP
 150 0094 2330F4FE 		sd	a5,-32(s0)
 139:src/../h/riscv.hpp **** }
 151              		.loc 2 139 5 is_stmt 1
 139:src/../h/riscv.hpp **** }
 152              		.loc 2 139 12 is_stmt 0
 153 0098 033504FE 		ld	a0,-32(s0)
 154              	.LBE47:
 155              	.LBE46:
 156              		.loc 1 73 21
 157 009c 97000000 		call	_Z12printIntegerm@plt
 157      E7800000 
 158              	.LVL5:
 159              	.LBE43:
 160              	.LBE77:
  74:src/riscv.cpp ****     }
  75:src/riscv.cpp **** };...
 161              		.loc 1 75 1
 162 00a4 6F000005 		j	.L3
 163              	.LVL6:
 164              	.L12:
 165              	.LBB78:
 166              	.LBB63:
  19:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 167              		.loc 1 19 9 is_stmt 1
 168              	.LBB64:
 169              	.LBB65:
GAS LISTING /tmp/cc1EFYOa.s 			page 9


 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 170              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 171              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 172              		.loc 2 114 64 is_stmt 0
 173              	#APP
 174              	# 114 "src/../h/riscv.hpp" 1
 175              		csrr a4, sepc
 176              	# 0 "" 2
 177              	#NO_APP
 178 00ac 2334E4FC 		sd	a4,-56(s0)
 115:src/../h/riscv.hpp **** }
 179              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 180              		.loc 2 115 12 is_stmt 0
 181 00b0 033784FC 		ld	a4,-56(s0)
 182              	.LBE65:
 183              	.LBE64:
  19:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 184              		.loc 1 19 41
 185 00b4 13074700 		addi	a4,a4,4
  19:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 186              		.loc 1 19 42
 187 00b8 2338E4F8 		sd	a4,-112(s0)
  20:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 188              		.loc 1 20 9 is_stmt 1
 189              	.LBB66:
 190              	.LBB67:
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 191              		.loc 2 181 5
 182:src/../h/riscv.hpp ****     return sstatus;
 192              		.loc 2 182 5
 182:src/../h/riscv.hpp ****     return sstatus;
 193              		.loc 2 182 76 is_stmt 0
 194              	#APP
 195              	# 182 "src/../h/riscv.hpp" 1
 196              		csrr a4, sstatus
 197              	# 0 "" 2
 198              	#NO_APP
 199 00c0 2330E4FC 		sd	a4,-64(s0)
 183:src/../h/riscv.hpp **** }
 200              		.loc 2 183 5 is_stmt 1
 183:src/../h/riscv.hpp **** }
 201              		.loc 2 183 12 is_stmt 0
 202 00c4 033704FC 		ld	a4,-64(s0)
 203              	.LBE67:
 204              	.LBE66:
  20:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 205              		.loc 1 20 45
 206 00c8 233CE4F8 		sd	a4,-104(s0)
  22:src/riscv.cpp ****         switch (ra) {
 207              		.loc 1 22 9 is_stmt 1
 208              	.LBB68:
 209 00cc 13072000 		li	a4,2
 210 00d0 6386E704 		beq	a5,a4,.L5
 211 00d4 13073001 		li	a4,19
GAS LISTING /tmp/cc1EFYOa.s 			page 10


 212 00d8 638EE704 		beq	a5,a4,.L6
 213 00dc 13071000 		li	a4,1
 214 00e0 6382E702 		beq	a5,a4,.L15
 215              	.LVL7:
 216              	.L7:
 217              	.LBE68:
  47:src/riscv.cpp ****         w_sstatus(sstatus);
 218              		.loc 1 47 9
  47:src/riscv.cpp ****         w_sstatus(sstatus);
 219              		.loc 1 47 18 is_stmt 0
 220 00e4 833784F9 		ld	a5,-104(s0)
 221              	.LVL8:
 222              	.LBB70:
 223              	.LBB71:
 188:src/../h/riscv.hpp **** }
 224              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 225              		.loc 2 188 77 is_stmt 0
 226              	#APP
 227              	# 188 "src/../h/riscv.hpp" 1
 228              		csrw sstatus, a5
 229              	# 0 "" 2
 230              	.LVL9:
 231              	#NO_APP
 232              	.LBE71:
 233              	.LBE70:
  48:src/riscv.cpp ****         w_sepc(sepc);
 234              		.loc 1 48 9 is_stmt 1
  48:src/riscv.cpp ****         w_sepc(sepc);
 235              		.loc 1 48 15 is_stmt 0
 236 00ec 833704F9 		ld	a5,-112(s0)
 237              	.LVL10:
 238              	.LBB72:
 239              	.LBB73:
 120:src/../h/riscv.hpp **** }
 240              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 241              		.loc 2 120 65 is_stmt 0
 242              	#APP
 243              	# 120 "src/../h/riscv.hpp" 1
 244              		csrw sepc, a5
 245              	# 0 "" 2
 246              	.LVL11:
 247              	#NO_APP
 248              	.L3:
 249              	.LBE73:
 250              	.LBE72:
 251              	.LBE63:
 252              	.LBE78:
 253              		.loc 1 75 1
 254 00f4 83308106 		ld	ra,104(sp)
 255              		.cfi_remember_state
 256              		.cfi_restore 1
 257 00f8 03340106 		ld	s0,96(sp)
 258              		.cfi_restore 8
 259              		.cfi_def_cfa 2, 112
 260 00fc 13010107 		addi	sp,sp,112
GAS LISTING /tmp/cc1EFYOa.s 			page 11


 261              		.cfi_def_cfa_offset 0
 262 0100 67800000 		jr	ra
 263              	.LVL12:
 264              	.L15:
 265              		.cfi_restore_state
 266              	.LBB79:
 267              	.LBB75:
 268              	.LBB74:
 269              	.LBB69:
  23:src/riscv.cpp ****             case 0x01:
 270              		.loc 1 23 13 is_stmt 1
  24:src/riscv.cpp ****                 size_t size;
 271              		.loc 1 24 17
  25:src/riscv.cpp ****                 void *mallocr;
 272              		.loc 1 25 17
  26:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
 273              		.loc 1 26 17
  26:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
 274              		.loc 1 26 57 is_stmt 0
 275              	#APP
 276              	# 26 "src/riscv.cpp" 1
 277              		mv a0, a1
 278              	# 0 "" 2
 279              	.LVL13:
  27:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 280              		.loc 1 27 17 is_stmt 1
  27:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 281              		.loc 1 27 53 is_stmt 0
 282              	#NO_APP
 283 0108 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 283      E7800000 
 284              	.LVL14:
  28:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 285              		.loc 1 28 17 is_stmt 1
  28:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 286              		.loc 1 28 60 is_stmt 0
 287              	#APP
 288              	# 28 "src/riscv.cpp" 1
  29:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 289              		mv t0, a0
 290              	# 0 "" 2
 291              		.loc 1 29 17 is_stmt 1
  29:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 292              		.loc 1 29 50 is_stmt 0
 293              	# 29 "src/riscv.cpp" 1
  30:src/riscv.cpp ****                 break;
 294              		sw t0, 80(x8)
 295              	# 0 "" 2
 296              		.loc 1 30 17 is_stmt 1
 297              	#NO_APP
 298 0118 6FF0DFFC 		j	.L7
 299              	.LVL15:
 300              	.L5:
  31:src/riscv.cpp ****             case 0x02:
 301              		.loc 1 31 13
  32:src/riscv.cpp ****                 void *freep;
 302              		.loc 1 32 17
GAS LISTING /tmp/cc1EFYOa.s 			page 12


  33:src/riscv.cpp ****                 int greska;
 303              		.loc 1 33 17
  34:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(freep));
 304              		.loc 1 34 17
  34:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(freep));
 305              		.loc 1 34 58 is_stmt 0
 306              	#APP
 307              	# 34 "src/riscv.cpp" 1
 308              		mv a0, a1
 309              	# 0 "" 2
 310              	.LVL16:
  35:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 311              		.loc 1 35 17 is_stmt 1
  35:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 312              		.loc 1 35 51 is_stmt 0
 313              	#NO_APP
 314 0120 97000000 		call	_ZN15MemoryAllocator8mem_freeEPKv@plt
 314      E7800000 
 315              	.LVL17:
  36:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 316              		.loc 1 36 17 is_stmt 1
  36:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 317              		.loc 1 36 60 is_stmt 0
 318              	#APP
 319              	# 36 "src/riscv.cpp" 1
  37:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 320              		mv t0, a0
 321              	# 0 "" 2
 322              		.loc 1 37 17 is_stmt 1
  37:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 323              		.loc 1 37 50 is_stmt 0
 324              	# 37 "src/riscv.cpp" 1
  38:src/riscv.cpp ****                 break;
 325              		sw t0, 80(x8)
 326              	# 0 "" 2
 327              		.loc 1 38 17 is_stmt 1
 328              	#NO_APP
 329 0130 6FF05FFB 		j	.L7
 330              	.LVL18:
 331              	.L6:
  39:src/riscv.cpp ****             case 0x13:
 332              		.loc 1 39 13
  40:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 333              		.loc 1 40 17
  40:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 334              		.loc 1 40 38 is_stmt 0
 335 0134 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 335      83B70700 
 336              	.LVL19:
 337 013c 23B00700 		sd	zero,0(a5)
  41:src/riscv.cpp ****                 TCB::dispatch();
 338              		.loc 1 41 17 is_stmt 1
  41:src/riscv.cpp ****                 TCB::dispatch();
 339              		.loc 1 41 30 is_stmt 0
 340 0140 97000000 		call	_ZN3TCB8dispatchEv@plt
 340      E7800000 
 341              	.LVL20:
GAS LISTING /tmp/cc1EFYOa.s 			page 13


  42:src/riscv.cpp ****                 break;
 342              		.loc 1 42 17 is_stmt 1
 343 0148 6FF0DFF9 		j	.L7
 344              	.LVL21:
 345              	.L13:
 346              	.LBE69:
 347              	.LBE74:
 348              	.LBE75:
 349              	.LBB76:
 350              	.LBB48:
  51:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 351              		.loc 1 51 9
 352              	.LBB49:
 353              	.LBB50:
 154:src/../h/riscv.hpp **** }
 354              		.loc 2 154 5
 154:src/../h/riscv.hpp **** }
 355              		.loc 2 154 64 is_stmt 0
 356 014c 93072000 		li	a5,2
 357              	#APP
 358              	# 154 "src/../h/riscv.hpp" 1
 359              		csrc sip, a5
 360              	# 0 "" 2
 361              	.LVL22:
 362              	#NO_APP
 363              	.LBE50:
 364              	.LBE49:
  52:src/riscv.cpp ****         TCB::timeSliceCounter++;
 365              		.loc 1 52 9 is_stmt 1
  52:src/riscv.cpp ****         TCB::timeSliceCounter++;
 366              		.loc 1 52 30 is_stmt 0
 367 0154 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 367      03370700 
 368 015c 83370700 		ld	a5,0(a4)
 369 0160 93871700 		addi	a5,a5,1
 370 0164 2330F700 		sd	a5,0(a4)
  54:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 371              		.loc 1 54 9 is_stmt 1
 372              	.LBB51:
  54:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 373              		.loc 1 54 63 is_stmt 0
 374 0168 17070000 		la	a4,_ZN3TCB7runningE
 374      03370700 
 375 0170 03370700 		ld	a4,0(a4)
 376              	.LVL23:
 377              	.LBB52:
 378              	.LBB53:
 379              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 5/19/24.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJEKAT_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJEKAT_TCB_HPP
   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "riscv.hpp"
GAS LISTING /tmp/cc1EFYOa.s 			page 14


  10:src/../h/tcb.hpp **** class TCB {
  11:src/../h/tcb.hpp **** 
  12:src/../h/tcb.hpp ****     void *operator new(size_t n);
  13:src/../h/tcb.hpp **** 
  14:src/../h/tcb.hpp ****     void *operator new[](size_t n);
  15:src/../h/tcb.hpp **** 
  16:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept;
  17:src/../h/tcb.hpp **** 
  18:src/../h/tcb.hpp ****     void operator delete[](void *p) noexcept;
  19:src/../h/tcb.hpp **** 
  20:src/../h/tcb.hpp **** public:
  21:src/../h/tcb.hpp ****     ~TCB(){TCB::operator delete[](stack);}
  22:src/../h/tcb.hpp ****     bool isFinished() const {return finished;}
  23:src/../h/tcb.hpp ****     void setFinished(bool finished) { TCB::finished = finished;}
  24:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 380              		.loc 3 24 35 is_stmt 1
 381              		.loc 3 24 42 is_stmt 0
 382 0174 03370702 		ld	a4,32(a4)
 383              	.LVL24:
 384              	.LBE53:
 385              	.LBE52:
  54:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 386              		.loc 1 54 9
 387 0178 E3EEE7F6 		bltu	a5,a4,.L3
 388              	.LBB54:
  56:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 389              		.loc 1 56 13 is_stmt 1
 390              	.LBB55:
 391              	.LBB56:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 392              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 393              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 394              		.loc 2 114 64 is_stmt 0
 395              	#APP
 396              	# 114 "src/../h/riscv.hpp" 1
 397              		csrr a5, sepc
 398              	# 0 "" 2
 399              	#NO_APP
 400 0180 233CF4FC 		sd	a5,-40(s0)
 115:src/../h/riscv.hpp **** }
 401              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 402              		.loc 2 115 12 is_stmt 0
 403 0184 833784FD 		ld	a5,-40(s0)
 404              	.LBE56:
 405              	.LBE55:
  56:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 406              		.loc 1 56 43
 407 0188 2330F4FA 		sd	a5,-96(s0)
  57:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 408              		.loc 1 57 13 is_stmt 1
 409              	.LBB57:
 410              	.LBB58:
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 411              		.loc 2 181 5
GAS LISTING /tmp/cc1EFYOa.s 			page 15


 182:src/../h/riscv.hpp ****     return sstatus;
 412              		.loc 2 182 5
 182:src/../h/riscv.hpp ****     return sstatus;
 413              		.loc 2 182 76 is_stmt 0
 414              	#APP
 415              	# 182 "src/../h/riscv.hpp" 1
 416              		csrr a5, sstatus
 417              	# 0 "" 2
 418              	#NO_APP
 419 0190 2338F4FC 		sd	a5,-48(s0)
 183:src/../h/riscv.hpp **** }
 420              		.loc 2 183 5 is_stmt 1
 183:src/../h/riscv.hpp **** }
 421              		.loc 2 183 12 is_stmt 0
 422 0194 833704FD 		ld	a5,-48(s0)
 423              	.LBE58:
 424              	.LBE57:
  57:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 425              		.loc 1 57 49
 426 0198 2334F4FA 		sd	a5,-88(s0)
  58:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 427              		.loc 1 58 13 is_stmt 1
  58:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 428              		.loc 1 58 34 is_stmt 0
 429 019c 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 429      83B70700 
 430 01a4 23B00700 		sd	zero,0(a5)
  59:src/riscv.cpp ****             TCB::dispatch();
 431              		.loc 1 59 13 is_stmt 1
  59:src/riscv.cpp ****             TCB::dispatch();
 432              		.loc 1 59 26 is_stmt 0
 433 01a8 97000000 		call	_ZN3TCB8dispatchEv@plt
 433      E7800000 
 434              	.LVL25:
  60:src/riscv.cpp ****             w_sstatus(sstatus);
 435              		.loc 1 60 13 is_stmt 1
  60:src/riscv.cpp ****             w_sstatus(sstatus);
 436              		.loc 1 60 22 is_stmt 0
 437 01b0 833784FA 		ld	a5,-88(s0)
 438              	.LVL26:
 439              	.LBB59:
 440              	.LBB60:
 188:src/../h/riscv.hpp **** }
 441              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 442              		.loc 2 188 77 is_stmt 0
 443              	#APP
 444              	# 188 "src/../h/riscv.hpp" 1
 445              		csrw sstatus, a5
 446              	# 0 "" 2
 447              	.LVL27:
 448              	#NO_APP
 449              	.LBE60:
 450              	.LBE59:
  61:src/riscv.cpp ****             w_sepc(sepc);
 451              		.loc 1 61 13 is_stmt 1
  61:src/riscv.cpp ****             w_sepc(sepc);
GAS LISTING /tmp/cc1EFYOa.s 			page 16


 452              		.loc 1 61 19 is_stmt 0
 453 01b8 833704FA 		ld	a5,-96(s0)
 454              	.LVL28:
 455              	.LBB61:
 456              	.LBB62:
 120:src/../h/riscv.hpp **** }
 457              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 458              		.loc 2 120 65 is_stmt 0
 459              	#APP
 460              	# 120 "src/../h/riscv.hpp" 1
 121:src/../h/riscv.hpp **** 
 461              		csrw sepc, a5
 462              	# 0 "" 2
 463              		.loc 2 121 1
 464              	#NO_APP
 465 01c0 6FF05FF3 		j	.L3
 466              	.LVL29:
 467              	.L14:
 468              	.LBE62:
 469              	.LBE61:
 470              	.LBE54:
 471              	.LBE51:
 472              	.LBE48:
  68:src/riscv.cpp ****         console_handler();
 473              		.loc 1 68 9 is_stmt 1
  68:src/riscv.cpp ****         console_handler();
 474              		.loc 1 68 24 is_stmt 0
 475 01c4 97000000 		call	console_handler@plt
 475      E7800000 
 476              	.LVL30:
 477 01cc 6FF09FF2 		j	.L3
 478              	.LBE76:
 479              	.LBE79:
 480              		.cfi_endproc
 481              	.LFE40:
 483              	.Letext0:
 484              		.file 4 "src/../h/../lib/hw.h"
 485              		.file 5 "src/../h/MemoryAllocator.hpp"
 486              		.file 6 "src/../h/print.hpp"
 487              		.file 7 "src/../h/../lib/console.h"
GAS LISTING /tmp/cc1EFYOa.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/cc1EFYOa.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cc1EFYOa.s:13     .text:0000000000000000 .L0 
     /tmp/cc1EFYOa.s:14     .text:0000000000000000 .L0 
     /tmp/cc1EFYOa.s:15     .text:0000000000000004 .L0 
     /tmp/cc1EFYOa.s:17     .text:0000000000000008 .L0 
     /tmp/cc1EFYOa.s:19     .text:000000000000000c .L0 
     /tmp/cc1EFYOa.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:9      .text:000000000000000c .L0 
     /tmp/cc1EFYOa.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:10     .text:0000000000000010 .L0 
     /tmp/cc1EFYOa.s:33     .text:0000000000000014 .L0 
     /tmp/cc1EFYOa.s:34     .text:0000000000000018 .L0 
     /tmp/cc1EFYOa.s:35     .text:0000000000000018 .L0 
     /tmp/cc1EFYOa.s:37     .text:000000000000001c .L0 
     /tmp/cc1EFYOa.s:39     .text:0000000000000020 .L0 
     /tmp/cc1EFYOa.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/cc1EFYOa.s:48     .text:0000000000000020 .L0 
     /tmp/cc1EFYOa.s:49     .text:0000000000000020 .L0 
     /tmp/cc1EFYOa.s:50     .text:0000000000000024 .L0 
     /tmp/cc1EFYOa.s:53     .text:000000000000002c .L0 
     /tmp/cc1EFYOa.s:54     .text:000000000000002c .L0 
     /tmp/cc1EFYOa.s:56     .text:0000000000000030 .L0 
     /tmp/cc1EFYOa.s:61     .text:0000000000000030 .L0 
     /tmp/cc1EFYOa.s:62     .text:0000000000000030 .L0 
     /tmp/cc1EFYOa.s:63     .text:0000000000000030 .L0 
  src/../h/riscv.hpp:195    .text:0000000000000030 .L0 
     /tmp/cc1EFYOa.s:71     .text:0000000000000038 .L0 
     /tmp/cc1EFYOa.s:72     .text:0000000000000038 .L0 
     /tmp/cc1EFYOa.s:79     .text:000000000000003c .L0 
     /tmp/cc1EFYOa.s:80     .text:000000000000003c .L0 
     /tmp/cc1EFYOa.s:81     .text:000000000000003c .L0 
  src/../h/riscv.hpp:102    .text:000000000000003c .L0 
     /tmp/cc1EFYOa.s:89     .text:0000000000000044 .L0 
     /tmp/cc1EFYOa.s:90     .text:0000000000000044 .L0 
     /tmp/cc1EFYOa.s:96     .text:0000000000000048 .L0 
     /tmp/cc1EFYOa.s:97     .text:0000000000000048 .L0 
     /tmp/cc1EFYOa.s:99     .text:000000000000004c .L0 
     /tmp/cc1EFYOa.s:105    .text:0000000000000054 .L0 
     /tmp/cc1EFYOa.s:111    .text:0000000000000064 .L0 
     /tmp/cc1EFYOa.s:116    .text:0000000000000074 .L0 
     /tmp/cc1EFYOa.s:117    .text:0000000000000074 .L0 
     /tmp/cc1EFYOa.s:122    .text:000000000000007c .L0 
     /tmp/cc1EFYOa.s:123    .text:000000000000007c .L0 
     /tmp/cc1EFYOa.s:124    .text:000000000000007c .L0 
  src/../h/riscv.hpp:114    .text:000000000000007c .L0 
     /tmp/cc1EFYOa.s:132    .text:0000000000000084 .L0 
     /tmp/cc1EFYOa.s:133    .text:0000000000000084 .L0 
     /tmp/cc1EFYOa.s:137    .text:0000000000000088 .L0 
     /tmp/cc1EFYOa.s:142    .text:0000000000000090 .L0 
     /tmp/cc1EFYOa.s:143    .text:0000000000000090 .L0 
     /tmp/cc1EFYOa.s:144    .text:0000000000000090 .L0 
  src/../h/riscv.hpp:138    .text:0000000000000090 .L0 
     /tmp/cc1EFYOa.s:152    .text:0000000000000098 .L0 
     /tmp/cc1EFYOa.s:153    .text:0000000000000098 .L0 
     /tmp/cc1EFYOa.s:157    .text:000000000000009c .L0 
GAS LISTING /tmp/cc1EFYOa.s 			page 18


     /tmp/cc1EFYOa.s:162    .text:00000000000000a4 .L0 
     /tmp/cc1EFYOa.s:170    .text:00000000000000a8 .L0 
     /tmp/cc1EFYOa.s:171    .text:00000000000000a8 .L0 
     /tmp/cc1EFYOa.s:172    .text:00000000000000a8 .L0 
  src/../h/riscv.hpp:114    .text:00000000000000a8 .L0 
     /tmp/cc1EFYOa.s:180    .text:00000000000000b0 .L0 
     /tmp/cc1EFYOa.s:181    .text:00000000000000b0 .L0 
     /tmp/cc1EFYOa.s:185    .text:00000000000000b4 .L0 
     /tmp/cc1EFYOa.s:187    .text:00000000000000b8 .L0 
     /tmp/cc1EFYOa.s:191    .text:00000000000000bc .L0 
     /tmp/cc1EFYOa.s:192    .text:00000000000000bc .L0 
     /tmp/cc1EFYOa.s:193    .text:00000000000000bc .L0 
  src/../h/riscv.hpp:182    .text:00000000000000bc .L0 
     /tmp/cc1EFYOa.s:201    .text:00000000000000c4 .L0 
     /tmp/cc1EFYOa.s:202    .text:00000000000000c4 .L0 
     /tmp/cc1EFYOa.s:206    .text:00000000000000c8 .L0 
     /tmp/cc1EFYOa.s:209    .text:00000000000000cc .L0 
     /tmp/cc1EFYOa.s:219    .text:00000000000000e4 .L0 
     /tmp/cc1EFYOa.s:220    .text:00000000000000e4 .L0 
     /tmp/cc1EFYOa.s:225    .text:00000000000000e8 .L0 
  src/../h/riscv.hpp:188    .text:00000000000000e8 .L0 
     /tmp/cc1EFYOa.s:235    .text:00000000000000ec .L0 
     /tmp/cc1EFYOa.s:236    .text:00000000000000ec .L0 
     /tmp/cc1EFYOa.s:241    .text:00000000000000f0 .L0 
  src/../h/riscv.hpp:120    .text:00000000000000f0 .L0 
     /tmp/cc1EFYOa.s:254    .text:00000000000000f4 .L0 
     /tmp/cc1EFYOa.s:255    .text:00000000000000f8 .L0 
     /tmp/cc1EFYOa.s:256    .text:00000000000000f8 .L0 
     /tmp/cc1EFYOa.s:258    .text:00000000000000fc .L0 
     /tmp/cc1EFYOa.s:259    .text:00000000000000fc .L0 
     /tmp/cc1EFYOa.s:261    .text:0000000000000100 .L0 
     /tmp/cc1EFYOa.s:265    .text:0000000000000104 .L0 
     /tmp/cc1EFYOa.s:271    .text:0000000000000104 .L0 
     /tmp/cc1EFYOa.s:272    .text:0000000000000104 .L0 
     /tmp/cc1EFYOa.s:273    .text:0000000000000104 .L0 
     /tmp/cc1EFYOa.s:274    .text:0000000000000104 .L0 
       src/riscv.cpp:26     .text:0000000000000104 .L0 
     /tmp/cc1EFYOa.s:281    .text:0000000000000108 .L0 
     /tmp/cc1EFYOa.s:283    .text:0000000000000108 .L0 
     /tmp/cc1EFYOa.s:286    .text:0000000000000110 .L0 
       src/riscv.cpp:28     .text:0000000000000110 .L0 
     /tmp/cc1EFYOa.s:292    .text:0000000000000114 .L0 
       src/riscv.cpp:29     .text:0000000000000114 .L0 
     /tmp/cc1EFYOa.s:298    .text:0000000000000118 .L0 
     /tmp/cc1EFYOa.s:302    .text:000000000000011c .L0 
     /tmp/cc1EFYOa.s:303    .text:000000000000011c .L0 
     /tmp/cc1EFYOa.s:304    .text:000000000000011c .L0 
     /tmp/cc1EFYOa.s:305    .text:000000000000011c .L0 
       src/riscv.cpp:34     .text:000000000000011c .L0 
     /tmp/cc1EFYOa.s:312    .text:0000000000000120 .L0 
     /tmp/cc1EFYOa.s:314    .text:0000000000000120 .L0 
     /tmp/cc1EFYOa.s:317    .text:0000000000000128 .L0 
       src/riscv.cpp:36     .text:0000000000000128 .L0 
     /tmp/cc1EFYOa.s:323    .text:000000000000012c .L0 
       src/riscv.cpp:37     .text:000000000000012c .L0 
     /tmp/cc1EFYOa.s:329    .text:0000000000000130 .L0 
     /tmp/cc1EFYOa.s:333    .text:0000000000000134 .L0 
GAS LISTING /tmp/cc1EFYOa.s 			page 19


     /tmp/cc1EFYOa.s:334    .text:0000000000000134 .L0 
     /tmp/cc1EFYOa.s:335    .text:0000000000000134 .L0 
     /tmp/cc1EFYOa.s:339    .text:0000000000000140 .L0 
     /tmp/cc1EFYOa.s:340    .text:0000000000000140 .L0 
     /tmp/cc1EFYOa.s:343    .text:0000000000000148 .L0 
     /tmp/cc1EFYOa.s:354    .text:000000000000014c .L0 
     /tmp/cc1EFYOa.s:355    .text:000000000000014c .L0 
     /tmp/cc1EFYOa.s:356    .text:000000000000014c .L0 
     /tmp/cc1EFYOa.s:366    .text:0000000000000154 .L0 
     /tmp/cc1EFYOa.s:367    .text:0000000000000154 .L0 
     /tmp/cc1EFYOa.s:373    .text:0000000000000168 .L0 
     /tmp/cc1EFYOa.s:374    .text:0000000000000168 .L0 
     /tmp/cc1EFYOa.s:381    .text:0000000000000174 .L0 
     /tmp/cc1EFYOa.s:382    .text:0000000000000174 .L0 
     /tmp/cc1EFYOa.s:387    .text:0000000000000178 .L0 
     /tmp/cc1EFYOa.s:392    .text:000000000000017c .L0 
     /tmp/cc1EFYOa.s:393    .text:000000000000017c .L0 
     /tmp/cc1EFYOa.s:394    .text:000000000000017c .L0 
  src/../h/riscv.hpp:114    .text:000000000000017c .L0 
     /tmp/cc1EFYOa.s:402    .text:0000000000000184 .L0 
     /tmp/cc1EFYOa.s:403    .text:0000000000000184 .L0 
     /tmp/cc1EFYOa.s:407    .text:0000000000000188 .L0 
     /tmp/cc1EFYOa.s:411    .text:000000000000018c .L0 
     /tmp/cc1EFYOa.s:412    .text:000000000000018c .L0 
     /tmp/cc1EFYOa.s:413    .text:000000000000018c .L0 
  src/../h/riscv.hpp:182    .text:000000000000018c .L0 
     /tmp/cc1EFYOa.s:421    .text:0000000000000194 .L0 
     /tmp/cc1EFYOa.s:422    .text:0000000000000194 .L0 
     /tmp/cc1EFYOa.s:426    .text:0000000000000198 .L0 
     /tmp/cc1EFYOa.s:428    .text:000000000000019c .L0 
     /tmp/cc1EFYOa.s:429    .text:000000000000019c .L0 
     /tmp/cc1EFYOa.s:432    .text:00000000000001a8 .L0 
     /tmp/cc1EFYOa.s:433    .text:00000000000001a8 .L0 
     /tmp/cc1EFYOa.s:436    .text:00000000000001b0 .L0 
     /tmp/cc1EFYOa.s:437    .text:00000000000001b0 .L0 
     /tmp/cc1EFYOa.s:442    .text:00000000000001b4 .L0 
  src/../h/riscv.hpp:188    .text:00000000000001b4 .L0 
     /tmp/cc1EFYOa.s:452    .text:00000000000001b8 .L0 
     /tmp/cc1EFYOa.s:453    .text:00000000000001b8 .L0 
     /tmp/cc1EFYOa.s:458    .text:00000000000001bc .L0 
  src/../h/riscv.hpp:120    .text:00000000000001bc .L0 
     /tmp/cc1EFYOa.s:465    .text:00000000000001c0 .L0 
     /tmp/cc1EFYOa.s:474    .text:00000000000001c4 .L0 
     /tmp/cc1EFYOa.s:475    .text:00000000000001c4 .L0 
     /tmp/cc1EFYOa.s:480    .text:00000000000001d0 .L0 
     /tmp/cc1EFYOa.s:488    .text:00000000000001d0 .L0 
     /tmp/cc1EFYOa.s:335    .text:0000000000000134 .L0 
     /tmp/cc1EFYOa.s:367    .text:0000000000000154 .L0 
     /tmp/cc1EFYOa.s:374    .text:0000000000000168 .L0 
     /tmp/cc1EFYOa.s:429    .text:000000000000019c .L0 
     /tmp/cc1EFYOa.s:164    .text:00000000000000a8 .L12
     /tmp/cc1EFYOa.s:345    .text:000000000000014c .L13
     /tmp/cc1EFYOa.s:467    .text:00000000000001c4 .L14
     /tmp/cc1EFYOa.s:248    .text:00000000000000f4 .L3
     /tmp/cc1EFYOa.s:300    .text:000000000000011c .L5
     /tmp/cc1EFYOa.s:331    .text:0000000000000134 .L6
     /tmp/cc1EFYOa.s:264    .text:0000000000000104 .L15
GAS LISTING /tmp/cc1EFYOa.s 			page 20


     /tmp/cc1EFYOa.s:216    .text:00000000000000e4 .L7
     /tmp/cc1EFYOa.s:1677   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc1EFYOa.s:2793   .debug_str:00000000000000a6 .LASF128
     /tmp/cc1EFYOa.s:2931   .debug_str:0000000000000557 .LASF129
     /tmp/cc1EFYOa.s:2897   .debug_str:000000000000048b .LASF130
     /tmp/cc1EFYOa.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc1EFYOa.s:483    .text:00000000000001d0 .Letext0
     /tmp/cc1EFYOa.s:2765   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc1EFYOa.s:2909   .debug_str:00000000000004e5 .LASF0
     /tmp/cc1EFYOa.s:2927   .debug_str:0000000000000531 .LASF1
     /tmp/cc1EFYOa.s:2893   .debug_str:000000000000046d .LASF2
     /tmp/cc1EFYOa.s:2867   .debug_str:00000000000003bd .LASF4
     /tmp/cc1EFYOa.s:2967   .debug_str:0000000000000637 .LASF3
     /tmp/cc1EFYOa.s:2795   .debug_str:000000000000016a .LASF5
     /tmp/cc1EFYOa.s:2929   .debug_str:0000000000000544 .LASF6
     /tmp/cc1EFYOa.s:2907   .debug_str:00000000000004d2 .LASF7
     /tmp/cc1EFYOa.s:3011   .debug_str:0000000000000799 .LASF8
     /tmp/cc1EFYOa.s:2853   .debug_str:000000000000032a .LASF9
     /tmp/cc1EFYOa.s:2943   .debug_str:000000000000059f .LASF10
     /tmp/cc1EFYOa.s:2999   .debug_str:0000000000000732 .LASF11
     /tmp/cc1EFYOa.s:2799   .debug_str:0000000000000176 .LASF12
     /tmp/cc1EFYOa.s:2771   .debug_str:0000000000000022 .LASF13
     /tmp/cc1EFYOa.s:2807   .debug_str:00000000000001c0 .LASF14
     /tmp/cc1EFYOa.s:2961   .debug_str:0000000000000603 .LASF15
     /tmp/cc1EFYOa.s:2813   .debug_str:00000000000001ee .LASF16
     /tmp/cc1EFYOa.s:2895   .debug_str:000000000000047b .LASF26
     /tmp/cc1EFYOa.s:2837   .debug_str:00000000000002bc .LASF27
     /tmp/cc1EFYOa.s:3001   .debug_str:0000000000000741 .LASF17
     /tmp/cc1EFYOa.s:2985   .debug_str:00000000000006c3 .LASF18
     /tmp/cc1EFYOa.s:2939   .debug_str:000000000000057d .LASF19
     /tmp/cc1EFYOa.s:2971   .debug_str:000000000000065a .LASF29
     /tmp/cc1EFYOa.s:3003   .debug_str:0000000000000746 .LASF31
     /tmp/cc1EFYOa.s:2871   .debug_str:00000000000003d7 .LASF20
     /tmp/cc1EFYOa.s:3015   .debug_str:00000000000007b0 .LASF21
     /tmp/cc1EFYOa.s:2981   .debug_str:000000000000069b .LASF23
     /tmp/cc1EFYOa.s:2947   .debug_str:00000000000005b6 .LASF22
     /tmp/cc1EFYOa.s:3033   .debug_str:0000000000000830 .LASF24
     /tmp/cc1EFYOa.s:2935   .debug_str:0000000000000570 .LASF51
     /tmp/cc1EFYOa.s:2993   .debug_str:00000000000006f8 .LASF53
     /tmp/cc1EFYOa.s:2835   .debug_str:00000000000002b7 .LASF25
     /tmp/cc1EFYOa.s:2779   .debug_str:000000000000005c .LASF28
     /tmp/cc1EFYOa.s:3023   .debug_str:00000000000007ea .LASF30
     /tmp/cc1EFYOa.s:2791   .debug_str:000000000000009a .LASF32
     /tmp/cc1EFYOa.s:2847   .debug_str:00000000000002fd .LASF33
     /tmp/cc1EFYOa.s:2855   .debug_str:0000000000000338 .LASF34
     /tmp/cc1EFYOa.s:2977   .debug_str:0000000000000682 .LASF35
     /tmp/cc1EFYOa.s:2957   .debug_str:00000000000005eb .LASF37
     /tmp/cc1EFYOa.s:2869   .debug_str:00000000000003c4 .LASF36
     /tmp/cc1EFYOa.s:2995   .debug_str:0000000000000714 .LASF38
     /tmp/cc1EFYOa.s:2821   .debug_str:000000000000024a .LASF39
     /tmp/cc1EFYOa.s:2951   .debug_str:00000000000005d2 .LASF40
     /tmp/cc1EFYOa.s:2933   .debug_str:0000000000000565 .LASF43
     /tmp/cc1EFYOa.s:2851   .debug_str:0000000000000313 .LASF45
     /tmp/cc1EFYOa.s:2899   .debug_str:00000000000004a9 .LASF41
     /tmp/cc1EFYOa.s:2863   .debug_str:000000000000037e .LASF42
     /tmp/cc1EFYOa.s:2891   .debug_str:0000000000000460 .LASF44
     /tmp/cc1EFYOa.s:2987   .debug_str:00000000000006c8 .LASF46
GAS LISTING /tmp/cc1EFYOa.s 			page 21


     /tmp/cc1EFYOa.s:2827   .debug_str:0000000000000273 .LASF131
     /tmp/cc1EFYOa.s:2879   .debug_str:00000000000003fb .LASF47
     /tmp/cc1EFYOa.s:2889   .debug_str:0000000000000444 .LASF48
     /tmp/cc1EFYOa.s:2955   .debug_str:00000000000005e6 .LASF132
     /tmp/cc1EFYOa.s:2809   .debug_str:00000000000001cc .LASF49
     /tmp/cc1EFYOa.s:2777   .debug_str:0000000000000042 .LASF50
     /tmp/cc1EFYOa.s:2963   .debug_str:0000000000000619 .LASF52
     /tmp/cc1EFYOa.s:2903   .debug_str:00000000000004bc .LASF54
     /tmp/cc1EFYOa.s:2845   .debug_str:00000000000002ec .LASF133
     /tmp/cc1EFYOa.s:2873   .debug_str:00000000000003e5 .LASF55
     /tmp/cc1EFYOa.s:2915   .debug_str:0000000000000502 .LASF56
     /tmp/cc1EFYOa.s:2877   .debug_str:00000000000003f3 .LASF57
     /tmp/cc1EFYOa.s:2919   .debug_str:000000000000050d .LASF58
     /tmp/cc1EFYOa.s:3025   .debug_str:00000000000007f7 .LASF59
     /tmp/cc1EFYOa.s:2969   .debug_str:0000000000000649 .LASF60
     /tmp/cc1EFYOa.s:2883   .debug_str:0000000000000413 .LASF61
     /tmp/cc1EFYOa.s:2861   .debug_str:0000000000000373 .LASF62
     /tmp/cc1EFYOa.s:2885   .debug_str:000000000000041e .LASF63
     /tmp/cc1EFYOa.s:2859   .debug_str:000000000000035a .LASF65
     /tmp/cc1EFYOa.s:2913   .debug_str:00000000000004f9 .LASF64
     /tmp/cc1EFYOa.s:2833   .debug_str:00000000000002a4 .LASF66
     /tmp/cc1EFYOa.s:3019   .debug_str:00000000000007cf .LASF134
     /tmp/cc1EFYOa.s:2865   .debug_str:0000000000000395 .LASF135
     /tmp/cc1EFYOa.s:2923   .debug_str:0000000000000520 .LASF67
     /tmp/cc1EFYOa.s:2881   .debug_str:0000000000000408 .LASF136
     /tmp/cc1EFYOa.s:2979   .debug_str:0000000000000692 .LASF68
     /tmp/cc1EFYOa.s:2921   .debug_str:0000000000000517 .LASF69
     /tmp/cc1EFYOa.s:2875   .debug_str:00000000000003ea .LASF70
     /tmp/cc1EFYOa.s:2959   .debug_str:00000000000005f8 .LASF71
     /tmp/cc1EFYOa.s:3031   .debug_str:0000000000000818 .LASF72
     /tmp/cc1EFYOa.s:2789   .debug_str:000000000000008c .LASF73
     /tmp/cc1EFYOa.s:2825   .debug_str:0000000000000258 .LASF74
     /tmp/cc1EFYOa.s:2839   .debug_str:00000000000002c4 .LASF75
     /tmp/cc1EFYOa.s:2769   .debug_str:0000000000000008 .LASF76
     /tmp/cc1EFYOa.s:2773   .debug_str:0000000000000032 .LASF79
     /tmp/cc1EFYOa.s:2829   .debug_str:000000000000027b .LASF81
     /tmp/cc1EFYOa.s:2823   .debug_str:000000000000024f .LASF77
     /tmp/cc1EFYOa.s:2811   .debug_str:00000000000001d9 .LASF78
     /tmp/cc1EFYOa.s:2901   .debug_str:00000000000004b5 .LASF80
     /tmp/cc1EFYOa.s:2949   .debug_str:00000000000005bf .LASF82
     /tmp/cc1EFYOa.s:3013   .debug_str:00000000000007a9 .LASF83
     /tmp/cc1EFYOa.s:3007   .debug_str:0000000000000780 .LASF84
     /tmp/cc1EFYOa.s:2843   .debug_str:00000000000002e4 .LASF85
     /tmp/cc1EFYOa.s:2815   .debug_str:0000000000000204 .LASF86
     /tmp/cc1EFYOa.s:2767   .debug_str:0000000000000000 .LASF87
     /tmp/cc1EFYOa.s:2973   .debug_str:000000000000065f .LASF88
     /tmp/cc1EFYOa.s:2937   .debug_str:0000000000000575 .LASF89
     /tmp/cc1EFYOa.s:2801   .debug_str:0000000000000186 .LASF90
     /tmp/cc1EFYOa.s:3037   .debug_str:000000000000085d .LASF91
     /tmp/cc1EFYOa.s:2831   .debug_str:0000000000000290 .LASF92
     /tmp/cc1EFYOa.s:2911   .debug_str:00000000000004f2 .LASF93
     /tmp/cc1EFYOa.s:3027   .debug_str:0000000000000800 .LASF94
     /tmp/cc1EFYOa.s:2785   .debug_str:0000000000000074 .LASF95
     /tmp/cc1EFYOa.s:2841   .debug_str:00000000000002d1 .LASF96
     /tmp/cc1EFYOa.s:2905   .debug_str:00000000000004cc .LASF97
     /tmp/cc1EFYOa.s:2991   .debug_str:00000000000006e6 .LASF98
     /tmp/cc1EFYOa.s:2783   .debug_str:000000000000006e .LASF99
GAS LISTING /tmp/cc1EFYOa.s 			page 22


     /tmp/cc1EFYOa.s:3041   .debug_str:000000000000086a .LASF100
     /tmp/cc1EFYOa.s:3035   .debug_str:0000000000000852 .LASF101
     /tmp/cc1EFYOa.s:2965   .debug_str:000000000000061f .LASF102
     /tmp/cc1EFYOa.s:2925   .debug_str:0000000000000526 .LASF103
     /tmp/cc1EFYOa.s:2887   .debug_str:000000000000042c .LASF104
     /tmp/cc1EFYOa.s:2805   .debug_str:00000000000001b6 .LASF105
     /tmp/cc1EFYOa.s:2941   .debug_str:0000000000000589 .LASF106
     /tmp/cc1EFYOa.s:2781   .debug_str:0000000000000064 .LASF107
     /tmp/cc1EFYOa.s:2857   .debug_str:0000000000000344 .LASF108
     /tmp/cc1EFYOa.s:2989   .debug_str:00000000000006e1 .LASF109
     /tmp/cc1EFYOa.s:2997   .debug_str:0000000000000721 .LASF110
     /tmp/cc1EFYOa.s:2797   .debug_str:0000000000000171 .LASF111
     /tmp/cc1EFYOa.s:2787   .debug_str:000000000000007b .LASF112
     /tmp/cc1EFYOa.s:2975   .debug_str:0000000000000673 .LASF113
     /tmp/cc1EFYOa.s:2803   .debug_str:000000000000019a .LASF114
     /tmp/cc1EFYOa.s:3017   .debug_str:00000000000007ba .LASF115
     /tmp/cc1EFYOa.s:2817   .debug_str:0000000000000218 .LASF116
     /tmp/cc1EFYOa.s:46     .text:0000000000000020 .LFB40
     /tmp/cc1EFYOa.s:481    .text:00000000000001d0 .LFE40
     /tmp/cc1EFYOa.s:2607   .debug_loc:0000000000000000 .LLST0
     /tmp/cc1EFYOa.s:2775   .debug_str:000000000000003b .LASF117
     /tmp/cc1EFYOa.s:2630   .debug_loc:000000000000006f .LLST1
     /tmp/cc1EFYOa.s:2757   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc1EFYOa.s:2917   .debug_str:0000000000000508 .LASF118
     /tmp/cc1EFYOa.s:2953   .debug_str:00000000000005de .LASF119
     /tmp/cc1EFYOa.s:269    .text:0000000000000104 .LBB69
     /tmp/cc1EFYOa.s:346    .text:000000000000014c .LBE69
     /tmp/cc1EFYOa.s:2673   .debug_loc:000000000000012e .LLST6
     /tmp/cc1EFYOa.s:2945   .debug_str:00000000000005ae .LASF120
     /tmp/cc1EFYOa.s:2680   .debug_loc:0000000000000151 .LLST7
     /tmp/cc1EFYOa.s:3009   .debug_str:0000000000000793 .LASF121
     /tmp/cc1EFYOa.s:2687   .debug_loc:0000000000000174 .LLST8
     /tmp/cc1EFYOa.s:2983   .debug_str:00000000000006bc .LASF122
     /tmp/cc1EFYOa.s:2694   .debug_loc:0000000000000197 .LLST9
     /tmp/cc1EFYOa.s:284    .text:0000000000000110 .LVL14
     /tmp/cc1EFYOa.s:315    .text:0000000000000128 .LVL17
     /tmp/cc1EFYOa.s:341    .text:0000000000000148 .LVL20
     /tmp/cc1EFYOa.s:168    .text:00000000000000a8 .LBB64
     /tmp/cc1EFYOa.s:183    .text:00000000000000b4 .LBE64
     /tmp/cc1EFYOa.s:189    .text:00000000000000bc .LBB66
     /tmp/cc1EFYOa.s:204    .text:00000000000000c8 .LBE66
     /tmp/cc1EFYOa.s:222    .text:00000000000000e8 .LBB70
     /tmp/cc1EFYOa.s:233    .text:00000000000000ec .LBE70
     /tmp/cc1EFYOa.s:2701   .debug_loc:00000000000001ba .LLST10
     /tmp/cc1EFYOa.s:238    .text:00000000000000f0 .LBB72
     /tmp/cc1EFYOa.s:250    .text:00000000000000f4 .LBE72
     /tmp/cc1EFYOa.s:2708   .debug_loc:00000000000001dd .LLST11
     /tmp/cc1EFYOa.s:388    .text:000000000000017c .LBB54
     /tmp/cc1EFYOa.s:470    .text:00000000000001c4 .LBE54
     /tmp/cc1EFYOa.s:390    .text:000000000000017c .LBB55
     /tmp/cc1EFYOa.s:405    .text:0000000000000188 .LBE55
     /tmp/cc1EFYOa.s:409    .text:000000000000018c .LBB57
     /tmp/cc1EFYOa.s:424    .text:0000000000000198 .LBE57
     /tmp/cc1EFYOa.s:439    .text:00000000000001b4 .LBB59
     /tmp/cc1EFYOa.s:450    .text:00000000000001b8 .LBE59
     /tmp/cc1EFYOa.s:2715   .debug_loc:0000000000000200 .LLST4
     /tmp/cc1EFYOa.s:455    .text:00000000000001bc .LBB61
GAS LISTING /tmp/cc1EFYOa.s 			page 23


     /tmp/cc1EFYOa.s:469    .text:00000000000001c4 .LBE61
     /tmp/cc1EFYOa.s:2722   .debug_loc:0000000000000223 .LLST5
     /tmp/cc1EFYOa.s:434    .text:00000000000001b0 .LVL25
     /tmp/cc1EFYOa.s:58     .text:0000000000000030 .LBB38
     /tmp/cc1EFYOa.s:75     .text:000000000000003c .LBE38
     /tmp/cc1EFYOa.s:77     .text:000000000000003c .LBB40
     /tmp/cc1EFYOa.s:93     .text:0000000000000048 .LBE40
     /tmp/cc1EFYOa.s:120    .text:000000000000007c .LBB44
     /tmp/cc1EFYOa.s:135    .text:0000000000000088 .LBE44
     /tmp/cc1EFYOa.s:140    .text:0000000000000090 .LBB46
     /tmp/cc1EFYOa.s:155    .text:000000000000009c .LBE46
     /tmp/cc1EFYOa.s:352    .text:000000000000014c .LBB49
     /tmp/cc1EFYOa.s:364    .text:0000000000000154 .LBE49
     /tmp/cc1EFYOa.s:2729   .debug_loc:0000000000000246 .LLST2
     /tmp/cc1EFYOa.s:377    .text:0000000000000174 .LBB52
     /tmp/cc1EFYOa.s:385    .text:0000000000000178 .LBE52
     /tmp/cc1EFYOa.s:2737   .debug_loc:000000000000026a .LLST3
     /tmp/cc1EFYOa.s:118    .text:000000000000007c .LVL3
     /tmp/cc1EFYOa.s:138    .text:0000000000000090 .LVL4
     /tmp/cc1EFYOa.s:158    .text:00000000000000a4 .LVL5
     /tmp/cc1EFYOa.s:476    .text:00000000000001cc .LVL30
     /tmp/cc1EFYOa.s:10     .text:0000000000000000 .LFB39
     /tmp/cc1EFYOa.s:40     .text:0000000000000020 .LFE39
     /tmp/cc1EFYOa.s:3039   .debug_str:0000000000000865 .LASF123
     /tmp/cc1EFYOa.s:2849   .debug_str:000000000000030d .LASF124
     /tmp/cc1EFYOa.s:3029   .debug_str:0000000000000813 .LASF137
     /tmp/cc1EFYOa.s:3005   .debug_str:000000000000076e .LASF125
     /tmp/cc1EFYOa.s:3021   .debug_str:00000000000007dd .LASF127
     /tmp/cc1EFYOa.s:2819   .debug_str:000000000000023a .LASF126
     /tmp/cc1EFYOa.s:73     .text:000000000000003c .LVL0
     /tmp/cc1EFYOa.s:106    .text:0000000000000058 .LVL2
     /tmp/cc1EFYOa.s:163    .text:00000000000000a8 .LVL6
     /tmp/cc1EFYOa.s:215    .text:00000000000000e4 .LVL7
     /tmp/cc1EFYOa.s:263    .text:0000000000000104 .LVL12
     /tmp/cc1EFYOa.s:299    .text:000000000000011c .LVL15
     /tmp/cc1EFYOa.s:330    .text:0000000000000134 .LVL18
     /tmp/cc1EFYOa.s:336    .text:000000000000013c .LVL19
     /tmp/cc1EFYOa.s:91     .text:0000000000000048 .LVL1
     /tmp/cc1EFYOa.s:279    .text:0000000000000108 .LVL13
     /tmp/cc1EFYOa.s:310    .text:0000000000000120 .LVL16
     /tmp/cc1EFYOa.s:344    .text:000000000000014c .LVL21
     /tmp/cc1EFYOa.s:466    .text:00000000000001c4 .LVL29
     /tmp/cc1EFYOa.s:221    .text:00000000000000e8 .LVL8
     /tmp/cc1EFYOa.s:230    .text:00000000000000ec .LVL9
     /tmp/cc1EFYOa.s:237    .text:00000000000000f0 .LVL10
     /tmp/cc1EFYOa.s:246    .text:00000000000000f4 .LVL11
     /tmp/cc1EFYOa.s:438    .text:00000000000001b4 .LVL26
     /tmp/cc1EFYOa.s:447    .text:00000000000001b8 .LVL27
     /tmp/cc1EFYOa.s:454    .text:00000000000001bc .LVL28
     /tmp/cc1EFYOa.s:361    .text:0000000000000154 .LVL22
     /tmp/cc1EFYOa.s:376    .text:0000000000000174 .LVL23
     /tmp/cc1EFYOa.s:383    .text:0000000000000178 .LVL24
     /tmp/cc1EFYOa.s:489    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc1EFYOa.s:166    .text:00000000000000a8 .LBB63
     /tmp/cc1EFYOa.s:251    .text:00000000000000f4 .LBE63
     /tmp/cc1EFYOa.s:267    .text:0000000000000104 .LBB75
     /tmp/cc1EFYOa.s:348    .text:000000000000014c .LBE75
GAS LISTING /tmp/cc1EFYOa.s 			page 24



UNDEFINED SYMBOLS
_Z12printIntegerm
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPKv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN3TCB7runningE
console_handler
