GAS LISTING /tmp/ccQPIkfG.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB41:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by os on 5/17/24.
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   7:src/riscv.cpp **** #include "../h/tcb.hpp"
   8:src/riscv.cpp **** #include "../h/semaphore.hpp"
   9:src/riscv.cpp **** #include "../h/print.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 11 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  12:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 12 5
  21              		.loc 1 12 38 is_stmt 0
  22              	#APP
  23              	# 12 "src/riscv.cpp" 1
  13              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 13 5 is_stmt 1
  27              		.loc 1 13 29 is_stmt 0
  28              	# 13 "src/riscv.cpp" 1
  14              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 14 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE41:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
  45 0000 67726573 		.string	"greska\n"
GAS LISTING /tmp/ccQPIkfG.s 			page 2


  45      6B610A00 
  46              		.text
  47              		.align	2
  48              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  50              	_ZN5Riscv20handleSupervisorTrapEv:
  51              	.LFB42:
  15:src/riscv.cpp **** 
  16:src/riscv.cpp **** void Riscv::handleSupervisorTrap() {
  52              		.loc 1 16 36 is_stmt 1
  53              		.cfi_startproc
  54 0020 130101F9 		addi	sp,sp,-112
  55              		.cfi_def_cfa_offset 112
  56 0024 23341106 		sd	ra,104(sp)
  57 0028 23308106 		sd	s0,96(sp)
  58 002c 233C9104 		sd	s1,88(sp)
  59              		.cfi_offset 1, -8
  60              		.cfi_offset 8, -16
  61              		.cfi_offset 9, -24
  62 0030 13040107 		addi	s0,sp,112
  63              		.cfi_def_cfa 8, 0
  17:src/riscv.cpp **** 
  18:src/riscv.cpp ****     uint64 ra = r_a0();
  64              		.loc 1 18 5
  65              	.LBB32:
  66              	.LBB33:
  67              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../lib/console.h"
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     //pop sstatus spp and sstatus spie
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp ****     //push x3..31 registers
  17:src/../h/riscv.hpp ****     static void pushRegisters();
  18:src/../h/riscv.hpp ****     //pop x3..31 regiesters
  19:src/../h/riscv.hpp ****     static void popRegisters();
  20:src/../h/riscv.hpp **** 
  21:src/../h/riscv.hpp ****     // read register scause
  22:src/../h/riscv.hpp ****     static uint64 r_scause();
  23:src/../h/riscv.hpp **** 
  24:src/../h/riscv.hpp ****     // write register scause
  25:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // read register sepc
  28:src/../h/riscv.hpp ****     static uint64 r_sepc();
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // write register sepc
  31:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
GAS LISTING /tmp/ccQPIkfG.s 			page 3


  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // read register stvec
  34:src/../h/riscv.hpp ****     static uint64 r_stvec();
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // write register stvec
  37:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // read register stval
  40:src/../h/riscv.hpp ****     static uint64 r_stval();
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // write register stval
  43:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     enum BitMaskSip
  46:src/../h/riscv.hpp ****     {
  47:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  48:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  49:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  50:src/../h/riscv.hpp ****     };
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp ****     // mask set register sip
  53:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  54:src/../h/riscv.hpp **** 
  55:src/../h/riscv.hpp ****     // mask clear register sip
  56:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // read register sip
  59:src/../h/riscv.hpp ****     static uint64 r_sip();
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // write register sip
  62:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     enum BitMaskSstatus
  65:src/../h/riscv.hpp ****     {
  66:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  67:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  68:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  69:src/../h/riscv.hpp ****     };
  70:src/../h/riscv.hpp **** 
  71:src/../h/riscv.hpp ****     // mask set register sstatus
  72:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  73:src/../h/riscv.hpp **** 
  74:src/../h/riscv.hpp ****     // mask clear register sstatus
  75:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // read register sstatus
  78:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // write register sstatus
  81:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     //read a0 register
  84:src/../h/riscv.hpp ****     static uint64 r_a0();
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     //write to a0 register
  87:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  88:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccQPIkfG.s 			page 4


  89:src/../h/riscv.hpp ****     static void supervisorTrap();
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp **** private:
  92:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  93:src/../h/riscv.hpp **** };
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     uint64 volatile scause;
  99:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 100:src/../h/riscv.hpp ****     return scause;
 101:src/../h/riscv.hpp **** }
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 104:src/../h/riscv.hpp **** {
 105:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     uint64 volatile sepc;
 111:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 112:src/../h/riscv.hpp ****     return sepc;
 113:src/../h/riscv.hpp **** }
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 116:src/../h/riscv.hpp **** {
 117:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     uint64 volatile stvec;
 123:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 124:src/../h/riscv.hpp ****     return stvec;
 125:src/../h/riscv.hpp **** }
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 128:src/../h/riscv.hpp **** {
 129:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     uint64 volatile stval;
 135:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 136:src/../h/riscv.hpp ****     return stval;
 137:src/../h/riscv.hpp **** }
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 140:src/../h/riscv.hpp **** {
 141:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 145:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccQPIkfG.s 			page 5


 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 147:src/../h/riscv.hpp **** }
 148:src/../h/riscv.hpp **** 
 149:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 150:src/../h/riscv.hpp **** {
 151:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     uint64 volatile sip;
 157:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 158:src/../h/riscv.hpp ****     return sip;
 159:src/../h/riscv.hpp **** }
 160:src/../h/riscv.hpp **** 
 161:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 162:src/../h/riscv.hpp **** {
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 164:src/../h/riscv.hpp **** }
 165:src/../h/riscv.hpp **** 
 166:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 167:src/../h/riscv.hpp **** {
 168:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 169:src/../h/riscv.hpp **** }
 170:src/../h/riscv.hpp **** 
 171:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 172:src/../h/riscv.hpp **** {
 173:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 179:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 180:src/../h/riscv.hpp ****     return sstatus;
 181:src/../h/riscv.hpp **** }
 182:src/../h/riscv.hpp **** 
 183:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 184:src/../h/riscv.hpp **** {
 185:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 186:src/../h/riscv.hpp **** }
 187:src/../h/riscv.hpp **** 
 188:src/../h/riscv.hpp **** //a0
 189:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 190:src/../h/riscv.hpp **** {
 191:src/../h/riscv.hpp ****     uint64 volatile a0;
  68              		.loc 2 191 5
 192:src/../h/riscv.hpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
  69              		.loc 2 192 5
  70              		.loc 2 192 46 is_stmt 0
  71              	#APP
  72              	# 192 "src/../h/riscv.hpp" 1
 193              	    return a0;
  73              		mv a5, a0
  74              	# 0 "" 2
  75              	#NO_APP
  76 0038 233CF4FA 		sd	a5,-72(s0)
GAS LISTING /tmp/ccQPIkfG.s 			page 6


  77              		.loc 2 193 5 is_stmt 1
  78              		.loc 2 193 12 is_stmt 0
  79 003c 833784FB 		ld	a5,-72(s0)
  80              	.LVL0:
  81              	.LBE33:
  82              	.LBE32:
  19:src/riscv.cpp ****     uint64 scause = r_scause();
  83              		.loc 1 19 5 is_stmt 1
  84              	.LBB34:
  85              	.LBB35:
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  86              		.loc 2 98 5
  99:src/../h/riscv.hpp ****     return scause;
  87              		.loc 2 99 5
  99:src/../h/riscv.hpp ****     return scause;
  88              		.loc 2 99 72 is_stmt 0
  89              	#APP
  90              	# 99 "src/../h/riscv.hpp" 1
  91              		csrr a4, scause
  92              	# 0 "" 2
  93              	#NO_APP
  94 0044 2338E4FA 		sd	a4,-80(s0)
 100:src/../h/riscv.hpp **** }
  95              		.loc 2 100 5 is_stmt 1
 100:src/../h/riscv.hpp **** }
  96              		.loc 2 100 12 is_stmt 0
  97 0048 033704FB 		ld	a4,-80(s0)
  98              	.LVL1:
  99              	.LBE35:
 100              	.LBE34:
  20:src/riscv.cpp **** 
  21:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){//pomera registar a3??
 101              		.loc 1 21 5 is_stmt 1
 102              	.LBB36:
 103              		.loc 1 21 39 is_stmt 0
 104 004c 130687FF 		addi	a2,a4,-8
 105              		.loc 1 21 5
 106 0050 93061000 		li	a3,1
 107 0054 63F8C604 		bleu	a2,a3,.L28
 108              	.LBE36:
  22:src/riscv.cpp ****         //environment call
  23:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
  24:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  25:src/riscv.cpp ****         int ret;
  26:src/riscv.cpp ****         semaphore ** shandle;
  27:src/riscv.cpp ****         semaphore * id;
  28:src/riscv.cpp ****         switch (ra) {
  29:src/riscv.cpp ****             case 0x01:
  30:src/riscv.cpp ****                 size_t size;
  31:src/riscv.cpp ****                 void *mallocr;
  32:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
  33:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
  34:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
  35:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  36:src/riscv.cpp ****                 break;
  37:src/riscv.cpp **** 
  38:src/riscv.cpp ****             case 0x02:
GAS LISTING /tmp/ccQPIkfG.s 			page 7


  39:src/riscv.cpp ****                 void *freep;
  40:src/riscv.cpp ****                 int greska;
  41:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
  42:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
  43:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
  44:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  45:src/riscv.cpp ****                 break;
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****             case 0x11:
  48:src/riscv.cpp ****                 TCB::Body start_routine;
  49:src/riscv.cpp ****                 void* arg;
  50:src/riscv.cpp ****                 thread_t* thandle;
  51:src/riscv.cpp ****                 void* stek;
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
  53:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
  54:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
  55:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
  56:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
  57:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
  58:src/riscv.cpp ****                 else ret = -1;
  59:src/riscv.cpp **** 
  60:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  61:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  62:src/riscv.cpp ****                 break;
  63:src/riscv.cpp **** 
  64:src/riscv.cpp ****             case 0x12:
  65:src/riscv.cpp ****                 ret = TCB::exitThread();
  66:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  67:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  68:src/riscv.cpp ****                 break;
  69:src/riscv.cpp **** 
  70:src/riscv.cpp ****             case 0x13:
  71:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
  72:src/riscv.cpp ****                 TCB::dispatch();
  73:src/riscv.cpp ****                 break;
  74:src/riscv.cpp **** 
  75:src/riscv.cpp ****             case 0x21:
  76:src/riscv.cpp ****                 int val;
  77:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
  78:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
  79:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
  80:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
  81:src/riscv.cpp ****                 else ret = -1;
  82:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  83:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  84:src/riscv.cpp ****                 break;
  85:src/riscv.cpp **** 
  86:src/riscv.cpp ****             case 0x22:
  87:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
  88:src/riscv.cpp ****                 ret = id->semaphore::closeSemaphore();
  89:src/riscv.cpp ****                 //MemoryAllocator::mem_free(id);
  90:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  91:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  92:src/riscv.cpp ****                 break;
  93:src/riscv.cpp **** 
  94:src/riscv.cpp ****             case 0x23:
  95:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
GAS LISTING /tmp/ccQPIkfG.s 			page 8


  96:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
  97:src/riscv.cpp ****                 else ret = -1;
  98:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  99:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 100:src/riscv.cpp ****                 break;
 101:src/riscv.cpp **** 
 102:src/riscv.cpp ****             case 0x24:
 103:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 104:src/riscv.cpp ****                 ret = id->semaphore::signal();
 105:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 106:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 107:src/riscv.cpp ****                 break;
 108:src/riscv.cpp **** 
 109:src/riscv.cpp ****             case 0x26:
 110:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 111:src/riscv.cpp ****                 ret = id->semaphore::trywait();
 112:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 113:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 114:src/riscv.cpp ****                 break;
 115:src/riscv.cpp ****             default:
 116:src/riscv.cpp ****                     break;
 117:src/riscv.cpp **** 
 118:src/riscv.cpp ****         }
 119:src/riscv.cpp **** 
 120:src/riscv.cpp ****         w_sstatus(sstatus);
 121:src/riscv.cpp ****         w_sepc(sepc);
 122:src/riscv.cpp ****     }
 123:src/riscv.cpp ****     else if(scause == 0x8000000000000001UL){
 109              		.loc 1 123 10 is_stmt 1
 110              	.LBB64:
 111              	.LBB37:
 112 0058 9307F0FF 		li	a5,-1
 113              	.LVL2:
 114 005c 9397F703 		slli	a5,a5,63
 115 0060 93871700 		addi	a5,a5,1
 116 0064 630EF71C 		beq	a4,a5,.L29
 124:src/riscv.cpp **** 
 125:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 126:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 127:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 128:src/riscv.cpp **** 
 129:src/riscv.cpp ****         TCB::timeSliceCounter++;
 130:src/riscv.cpp ****         //supervisor software interrupt; timer
 131:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 132:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 133:src/riscv.cpp ****             TCB::dispatch();
 134:src/riscv.cpp ****         }
 135:src/riscv.cpp **** 
 136:src/riscv.cpp ****         w_sstatus(sstatus);
 137:src/riscv.cpp ****         w_sepc(sepc);
 138:src/riscv.cpp **** 
 139:src/riscv.cpp **** 
 140:src/riscv.cpp ****     }else if(scause == 0x8000000000000009UL){
 117              		.loc 1 140 11
 118 0068 9307F0FF 		li	a5,-1
 119 006c 9397F703 		slli	a5,a5,63
 120 0070 93879700 		addi	a5,a5,9
GAS LISTING /tmp/ccQPIkfG.s 			page 9


 121 0074 6304F724 		beq	a4,a5,.L30
 141:src/riscv.cpp ****         // supervisor external interrupt; console
 142:src/riscv.cpp **** 
 143:src/riscv.cpp ****         console_handler();
 144:src/riscv.cpp ****     }else if(scause == 0x0000000000000002UL){
 122              		.loc 1 144 11
 123 0078 93072000 		li	a5,2
 124 007c 631AF708 		bne	a4,a5,.L3
 145:src/riscv.cpp ****         //unexpected interrupt;
 146:src/riscv.cpp ****         //printInteger(scause);
 147:src/riscv.cpp ****         //printInteger(r_sepc());
 148:src/riscv.cpp ****         //printInteger(r_stval());
 149:src/riscv.cpp ****         printString("greska\n");
 125              		.loc 1 149 9
 126              		.loc 1 149 20 is_stmt 0
 127 0080 17050000 		lla	a0,.LC0
 127      13050500 
 128 0088 97000000 		call	_Z11printStringPKc@plt
 128      E7800000 
 129              	.LVL3:
 150:src/riscv.cpp **** 
 151:src/riscv.cpp ****         __asm__ volatile("li t0, 0x5555");
 130              		.loc 1 151 9 is_stmt 1
 131              		.loc 1 151 42 is_stmt 0
 132              	#APP
 133              	# 151 "src/riscv.cpp" 1
 152              	        __asm__ volatile("li t1, 0x100000");
 134              		li t0, 0x5555
 135              	# 0 "" 2
 136              		.loc 1 152 9 is_stmt 1
 137              		.loc 1 152 44 is_stmt 0
 138              	# 152 "src/riscv.cpp" 1
 153              	        __asm__ volatile("sw t0, 0(t1)");
 139              		li t1, 0x100000
 140              	# 0 "" 2
 141              		.loc 1 153 9 is_stmt 1
 142              		.loc 1 153 41 is_stmt 0
 143              	# 153 "src/riscv.cpp" 1
 154              	    }
 144              		sw t0, 0(t1)
 145              	# 0 "" 2
 146              	#NO_APP
 147              	.LBE37:
 148              	.LBE64:
 155:src/riscv.cpp **** };...
 149              		.loc 1 155 1
 150 00a0 6F000007 		j	.L3
 151              	.LVL4:
 152              	.L28:
 153              	.LBB65:
 154              	.LBB51:
  23:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 155              		.loc 1 23 9 is_stmt 1
 156              	.LBB52:
 157              	.LBB53:
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 158              		.loc 2 110 5
GAS LISTING /tmp/ccQPIkfG.s 			page 10


 111:src/../h/riscv.hpp ****     return sepc;
 159              		.loc 2 111 5
 111:src/../h/riscv.hpp ****     return sepc;
 160              		.loc 2 111 64 is_stmt 0
 161              	#APP
 162              	# 111 "src/../h/riscv.hpp" 1
 163              		csrr a4, sepc
 164              	# 0 "" 2
 165              	.LVL5:
 166              	#NO_APP
 167 00a8 2334E4FC 		sd	a4,-56(s0)
 112:src/../h/riscv.hpp **** }
 168              		.loc 2 112 5 is_stmt 1
 112:src/../h/riscv.hpp **** }
 169              		.loc 2 112 12 is_stmt 0
 170 00ac 033784FC 		ld	a4,-56(s0)
 171              	.LBE53:
 172              	.LBE52:
  23:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 173              		.loc 1 23 41
 174 00b0 13074700 		addi	a4,a4,4
  23:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 175              		.loc 1 23 42
 176 00b4 2338E4F8 		sd	a4,-112(s0)
  24:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 177              		.loc 1 24 9 is_stmt 1
 178              	.LBB54:
 179              	.LBB55:
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 180              		.loc 2 178 5
 179:src/../h/riscv.hpp ****     return sstatus;
 181              		.loc 2 179 5
 179:src/../h/riscv.hpp ****     return sstatus;
 182              		.loc 2 179 76 is_stmt 0
 183              	#APP
 184              	# 179 "src/../h/riscv.hpp" 1
 185              		csrr a4, sstatus
 186              	# 0 "" 2
 187              	#NO_APP
 188 00bc 2330E4FC 		sd	a4,-64(s0)
 180:src/../h/riscv.hpp **** }
 189              		.loc 2 180 5 is_stmt 1
 180:src/../h/riscv.hpp **** }
 190              		.loc 2 180 12 is_stmt 0
 191 00c0 033704FC 		ld	a4,-64(s0)
 192              	.LBE55:
 193              	.LBE54:
  24:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 194              		.loc 1 24 45
 195 00c4 233CE4F8 		sd	a4,-104(s0)
  25:src/riscv.cpp ****         int ret;
 196              		.loc 1 25 9 is_stmt 1
  26:src/riscv.cpp ****         semaphore ** shandle;
 197              		.loc 1 26 9
  27:src/riscv.cpp ****         semaphore * id;
 198              		.loc 1 27 9
  28:src/riscv.cpp ****         switch (ra) {
GAS LISTING /tmp/ccQPIkfG.s 			page 11


 199              		.loc 1 28 9
 200 00c8 13076002 		li	a4,38
 201 00cc 636AF702 		bgtu	a5,a4,.L5
 202 00d0 93972700 		slli	a5,a5,2
 203              	.LVL6:
 204 00d4 17070000 		lla	a4,.L7
 204      13070700 
 205 00dc B387E700 		add	a5,a5,a4
 206 00e0 83A70700 		lw	a5,0(a5)
 207 00e4 B387E700 		add	a5,a5,a4
 208 00e8 67800700 		jr	a5
 209              		.section	.rodata
 210              		.align	2
 211              		.align	2
 212              	.L7:
 213 0000 00000000 		.word	.L5-.L7
 214 0004 00000000 		.word	.L16-.L7
 215 0008 00000000 		.word	.L15-.L7
 216 000c 00000000 		.word	.L5-.L7
 217 0010 00000000 		.word	.L5-.L7
 218 0014 00000000 		.word	.L5-.L7
 219 0018 00000000 		.word	.L5-.L7
 220 001c 00000000 		.word	.L5-.L7
 221 0020 00000000 		.word	.L5-.L7
 222 0024 00000000 		.word	.L5-.L7
 223 0028 00000000 		.word	.L5-.L7
 224 002c 00000000 		.word	.L5-.L7
 225 0030 00000000 		.word	.L5-.L7
 226 0034 00000000 		.word	.L5-.L7
 227 0038 00000000 		.word	.L5-.L7
 228 003c 00000000 		.word	.L5-.L7
 229 0040 00000000 		.word	.L5-.L7
 230 0044 00000000 		.word	.L14-.L7
 231 0048 00000000 		.word	.L13-.L7
 232 004c 00000000 		.word	.L12-.L7
 233 0050 00000000 		.word	.L5-.L7
 234 0054 00000000 		.word	.L5-.L7
 235 0058 00000000 		.word	.L5-.L7
 236 005c 00000000 		.word	.L5-.L7
 237 0060 00000000 		.word	.L5-.L7
 238 0064 00000000 		.word	.L5-.L7
 239 0068 00000000 		.word	.L5-.L7
 240 006c 00000000 		.word	.L5-.L7
 241 0070 00000000 		.word	.L5-.L7
 242 0074 00000000 		.word	.L5-.L7
 243 0078 00000000 		.word	.L5-.L7
 244 007c 00000000 		.word	.L5-.L7
 245 0080 00000000 		.word	.L5-.L7
 246 0084 00000000 		.word	.L11-.L7
 247 0088 00000000 		.word	.L10-.L7
 248 008c 00000000 		.word	.L9-.L7
 249 0090 00000000 		.word	.L8-.L7
 250 0094 00000000 		.word	.L5-.L7
 251 0098 00000000 		.word	.L6-.L7
 252              		.text
 253              	.L16:
 254              	.LBB56:
GAS LISTING /tmp/ccQPIkfG.s 			page 12


  29:src/riscv.cpp ****             case 0x01:
 255              		.loc 1 29 13
  30:src/riscv.cpp ****                 size_t size;
 256              		.loc 1 30 17
  31:src/riscv.cpp ****                 void *mallocr;
 257              		.loc 1 31 17
  32:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
 258              		.loc 1 32 17
  32:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
 259              		.loc 1 32 61 is_stmt 0
 260              	#APP
 261              	# 32 "src/riscv.cpp" 1
 262              		ld a0, 88(x8)
 263              	# 0 "" 2
 264              	.LVL7:
  33:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 265              		.loc 1 33 17 is_stmt 1
  33:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 266              		.loc 1 33 53 is_stmt 0
 267              	#NO_APP
 268 00f0 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 268      E7800000 
 269              	.LVL8:
  34:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 270              		.loc 1 34 17 is_stmt 1
  34:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 271              		.loc 1 34 60 is_stmt 0
 272              	#APP
 273              	# 34 "src/riscv.cpp" 1
  35:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 274              		mv t0, a0
 275              	# 0 "" 2
 276              		.loc 1 35 17 is_stmt 1
  35:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 277              		.loc 1 35 50 is_stmt 0
 278              	# 35 "src/riscv.cpp" 1
  36:src/riscv.cpp ****                 break;
 279              		sd t0, 80(x8)
 280              	# 0 "" 2
 281              		.loc 1 36 17 is_stmt 1
 282              	.LVL9:
 283              	#NO_APP
 284              	.L5:
 285              	.LBE56:
 120:src/riscv.cpp ****         w_sstatus(sstatus);
 286              		.loc 1 120 9
 120:src/riscv.cpp ****         w_sstatus(sstatus);
 287              		.loc 1 120 18 is_stmt 0
 288 0100 833784F9 		ld	a5,-104(s0)
 289              	.LVL10:
 290              	.LBB57:
 291              	.LBB58:
 185:src/../h/riscv.hpp **** }
 292              		.loc 2 185 5 is_stmt 1
 185:src/../h/riscv.hpp **** }
 293              		.loc 2 185 77 is_stmt 0
 294              	#APP
GAS LISTING /tmp/ccQPIkfG.s 			page 13


 295              	# 185 "src/../h/riscv.hpp" 1
 296              		csrw sstatus, a5
 297              	# 0 "" 2
 298              	.LVL11:
 299              	#NO_APP
 300              	.LBE58:
 301              	.LBE57:
 121:src/riscv.cpp ****         w_sepc(sepc);
 302              		.loc 1 121 9 is_stmt 1
 121:src/riscv.cpp ****         w_sepc(sepc);
 303              		.loc 1 121 15 is_stmt 0
 304 0108 833704F9 		ld	a5,-112(s0)
 305              	.LVL12:
 306              	.LBB59:
 307              	.LBB60:
 117:src/../h/riscv.hpp **** }
 308              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 309              		.loc 2 117 65 is_stmt 0
 310              	#APP
 311              	# 117 "src/../h/riscv.hpp" 1
 312              		csrw sepc, a5
 313              	# 0 "" 2
 314              	.LVL13:
 315              	#NO_APP
 316              	.L3:
 317              	.LBE60:
 318              	.LBE59:
 319              	.LBE51:
 320              	.LBE65:
 321              		.loc 1 155 1
 322 0110 83308106 		ld	ra,104(sp)
 323              		.cfi_remember_state
 324              		.cfi_restore 1
 325 0114 03340106 		ld	s0,96(sp)
 326              		.cfi_restore 8
 327              		.cfi_def_cfa 2, 112
 328 0118 83348105 		ld	s1,88(sp)
 329              		.cfi_restore 9
 330 011c 13010107 		addi	sp,sp,112
 331              		.cfi_def_cfa_offset 0
 332 0120 67800000 		jr	ra
 333              	.LVL14:
 334              	.L15:
 335              		.cfi_restore_state
 336              	.LBB66:
 337              	.LBB62:
 338              	.LBB61:
  38:src/riscv.cpp ****             case 0x02:
 339              		.loc 1 38 13 is_stmt 1
  39:src/riscv.cpp ****                 void *freep;
 340              		.loc 1 39 17
  40:src/riscv.cpp ****                 int greska;
 341              		.loc 1 40 17
  41:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
 342              		.loc 1 41 17
  41:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
GAS LISTING /tmp/ccQPIkfG.s 			page 14


 343              		.loc 1 41 62 is_stmt 0
 344              	#APP
 345              	# 41 "src/riscv.cpp" 1
 346              		ld a0, 88(x8)
 347              	# 0 "" 2
 348              	.LVL15:
  42:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 349              		.loc 1 42 17 is_stmt 1
  42:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 350              		.loc 1 42 51 is_stmt 0
 351              	#NO_APP
 352 0128 97000000 		call	_ZN15MemoryAllocator8mem_freeEPKv@plt
 352      E7800000 
 353              	.LVL16:
  43:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 354              		.loc 1 43 17 is_stmt 1
  43:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 355              		.loc 1 43 60 is_stmt 0
 356              	#APP
 357              	# 43 "src/riscv.cpp" 1
  44:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 358              		mv t0, a0
 359              	# 0 "" 2
 360              		.loc 1 44 17 is_stmt 1
  44:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 361              		.loc 1 44 50 is_stmt 0
 362              	# 44 "src/riscv.cpp" 1
  45:src/riscv.cpp ****                 break;
 363              		sd t0, 80(x8)
 364              	# 0 "" 2
 365              		.loc 1 45 17 is_stmt 1
 366              	#NO_APP
 367 0138 6FF09FFC 		j	.L5
 368              	.LVL17:
 369              	.L14:
  47:src/riscv.cpp ****             case 0x11:
 370              		.loc 1 47 13
  48:src/riscv.cpp ****                 TCB::Body start_routine;
 371              		.loc 1 48 17
  49:src/riscv.cpp ****                 void* arg;
 372              		.loc 1 49 17
  50:src/riscv.cpp ****                 thread_t* thandle;
 373              		.loc 1 50 17
  51:src/riscv.cpp ****                 void* stek;
 374              		.loc 1 51 17
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
 375              		.loc 1 52 17
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
 376              		.loc 1 52 65 is_stmt 0
 377              	#APP
 378              	# 52 "src/riscv.cpp" 1
 379              		ld s1, 88(x8)
 380              	# 0 "" 2
 381              	.LVL18:
  53:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 382              		.loc 1 53 17 is_stmt 1
  53:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
GAS LISTING /tmp/ccQPIkfG.s 			page 15


 383              		.loc 1 53 71 is_stmt 0
 384              	# 53 "src/riscv.cpp" 1
 385              		ld a0, 96(x8)
 386              	# 0 "" 2
 387              	.LVL19:
  54:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 388              		.loc 1 54 17 is_stmt 1
  54:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 389              		.loc 1 54 62 is_stmt 0
 390              	# 54 "src/riscv.cpp" 1
 391              		ld a1, 104(x8)
 392              	# 0 "" 2
 393              	.LVL20:
  55:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
 394              		.loc 1 55 17 is_stmt 1
  55:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
 395              		.loc 1 55 63 is_stmt 0
 396              	# 55 "src/riscv.cpp" 1
 397              		ld a2, 112(x8)
 398              	# 0 "" 2
 399              	.LVL21:
  56:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 400              		.loc 1 56 17 is_stmt 1
  56:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 401              		.loc 1 56 45 is_stmt 0
 402              	#NO_APP
 403 014c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_@plt
 403      E7800000 
 404              	.LVL22:
  56:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 405              		.loc 1 56 26
 406 0154 23B0A400 		sd	a0,0(s1)
  57:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
 407              		.loc 1 57 17 is_stmt 1
 408 0158 630A0500 		beqz	a0,.L24
  57:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
 409              		.loc 1 57 45 is_stmt 0
 410 015c 93070000 		li	a5,0
 411              	.L17:
 412              	.LVL23:
  60:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 413              		.loc 1 60 17 is_stmt 1
  60:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 414              		.loc 1 60 57 is_stmt 0
 415              	#APP
 416              	# 60 "src/riscv.cpp" 1
  61:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 417              		mv t0, a5
 418              	# 0 "" 2
 419              		.loc 1 61 17 is_stmt 1
  61:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 420              		.loc 1 61 50 is_stmt 0
 421              	# 61 "src/riscv.cpp" 1
  62:src/riscv.cpp ****                 break;
 422              		sd t0, 80(x8)
 423              	# 0 "" 2
 424              		.loc 1 62 17 is_stmt 1
GAS LISTING /tmp/ccQPIkfG.s 			page 16


 425              	#NO_APP
 426 0168 6FF09FF9 		j	.L5
 427              	.LVL24:
 428              	.L24:
  58:src/riscv.cpp ****                 else ret = -1;
 429              		.loc 1 58 26 is_stmt 0
 430 016c 9307F0FF 		li	a5,-1
 431 0170 6FF01FFF 		j	.L17
 432              	.LVL25:
 433              	.L13:
  64:src/riscv.cpp ****             case 0x12:
 434              		.loc 1 64 13 is_stmt 1
  65:src/riscv.cpp ****                 ret = TCB::exitThread();
 435              		.loc 1 65 17
  65:src/riscv.cpp ****                 ret = TCB::exitThread();
 436              		.loc 1 65 38 is_stmt 0
 437 0174 97000000 		call	_ZN3TCB10exitThreadEv@plt
 437      E7800000 
 438              	.LVL26:
  66:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 439              		.loc 1 66 17 is_stmt 1
  66:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 440              		.loc 1 66 57 is_stmt 0
 441              	#APP
 442              	# 66 "src/riscv.cpp" 1
  67:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 443              		mv t0, a0
 444              	# 0 "" 2
 445              		.loc 1 67 17 is_stmt 1
  67:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 446              		.loc 1 67 50 is_stmt 0
 447              	# 67 "src/riscv.cpp" 1
  68:src/riscv.cpp ****                 break;
 448              		sw t0, 80(x8)
 449              	# 0 "" 2
 450              		.loc 1 68 17 is_stmt 1
 451              	#NO_APP
 452 0184 6FF0DFF7 		j	.L5
 453              	.LVL27:
 454              	.L12:
  70:src/riscv.cpp ****             case 0x13:
 455              		.loc 1 70 13
  71:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 456              		.loc 1 71 17
  71:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 457              		.loc 1 71 38 is_stmt 0
 458 0188 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 458      83B70700 
 459 0190 23B00700 		sd	zero,0(a5)
  72:src/riscv.cpp ****                 TCB::dispatch();
 460              		.loc 1 72 17 is_stmt 1
  72:src/riscv.cpp ****                 TCB::dispatch();
 461              		.loc 1 72 30 is_stmt 0
 462 0194 97000000 		call	_ZN3TCB8dispatchEv@plt
 462      E7800000 
 463              	.LVL28:
  73:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccQPIkfG.s 			page 17


 464              		.loc 1 73 17 is_stmt 1
 465 019c 6FF05FF6 		j	.L5
 466              	.LVL29:
 467              	.L11:
  75:src/riscv.cpp ****             case 0x21:
 468              		.loc 1 75 13
  76:src/riscv.cpp ****                 int val;
 469              		.loc 1 76 17
  77:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 470              		.loc 1 77 17
  77:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 471              		.loc 1 77 65 is_stmt 0
 472              	#APP
 473              	# 77 "src/riscv.cpp" 1
 474              		ld s1, 88(x8)
 475              	# 0 "" 2
 476              	.LVL30:
  78:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
 477              		.loc 1 78 17 is_stmt 1
  78:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
 478              		.loc 1 78 61 is_stmt 0
 479              	# 78 "src/riscv.cpp" 1
 480              		ld a0, 96(x8)
 481              	# 0 "" 2
 482              	.LVL31:
  79:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
 483              		.loc 1 79 17 is_stmt 1
  79:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
 484              		.loc 1 79 52 is_stmt 0
 485              	#NO_APP
 486 01a8 1B050500 		sext.w	a0,a0
 487 01ac 97000000 		call	_ZN9semaphore13openSemaphoreEi@plt
 487      E7800000 
 488              	.LVL32:
  79:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
 489              		.loc 1 79 26
 490 01b4 23B0A400 		sd	a0,0(s1)
  80:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
 491              		.loc 1 80 17 is_stmt 1
 492 01b8 630A0500 		beqz	a0,.L25
  80:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
 493              		.loc 1 80 45 is_stmt 0
 494 01bc 93070000 		li	a5,0
 495              	.L18:
 496              	.LVL33:
  82:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 497              		.loc 1 82 17 is_stmt 1
  82:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 498              		.loc 1 82 57 is_stmt 0
 499              	#APP
 500              	# 82 "src/riscv.cpp" 1
  83:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 501              		mv t0, a5
 502              	# 0 "" 2
 503              		.loc 1 83 17 is_stmt 1
  83:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 504              		.loc 1 83 50 is_stmt 0
GAS LISTING /tmp/ccQPIkfG.s 			page 18


 505              	# 83 "src/riscv.cpp" 1
  84:src/riscv.cpp ****                 break;
 506              		sw t0, 80(x8)
 507              	# 0 "" 2
 508              		.loc 1 84 17 is_stmt 1
 509              	#NO_APP
 510 01c8 6FF09FF3 		j	.L5
 511              	.LVL34:
 512              	.L25:
  81:src/riscv.cpp ****                 else ret = -1;
 513              		.loc 1 81 26 is_stmt 0
 514 01cc 9307F0FF 		li	a5,-1
 515 01d0 6FF01FFF 		j	.L18
 516              	.LVL35:
 517              	.L10:
  86:src/riscv.cpp ****             case 0x22:
 518              		.loc 1 86 13 is_stmt 1
  87:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 519              		.loc 1 87 17
  87:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 520              		.loc 1 87 60 is_stmt 0
 521              	#APP
 522              	# 87 "src/riscv.cpp" 1
 523              		ld a0, 88(x8)
 524              	# 0 "" 2
 525              	.LVL36:
  88:src/riscv.cpp ****                 ret = id->semaphore::closeSemaphore();
 526              		.loc 1 88 17 is_stmt 1
  88:src/riscv.cpp ****                 ret = id->semaphore::closeSemaphore();
 527              		.loc 1 88 52 is_stmt 0
 528              	#NO_APP
 529 01d8 97000000 		call	_ZN9semaphore14closeSemaphoreEv@plt
 529      E7800000 
 530              	.LVL37:
  90:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 531              		.loc 1 90 17 is_stmt 1
  90:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 532              		.loc 1 90 57 is_stmt 0
 533              	#APP
 534              	# 90 "src/riscv.cpp" 1
  91:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 535              		mv t0, a0
 536              	# 0 "" 2
 537              		.loc 1 91 17 is_stmt 1
  91:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 538              		.loc 1 91 50 is_stmt 0
 539              	# 91 "src/riscv.cpp" 1
  92:src/riscv.cpp ****                 break;
 540              		sw t0, 80(x8)
 541              	# 0 "" 2
 542              		.loc 1 92 17 is_stmt 1
 543              	#NO_APP
 544 01e8 6FF09FF1 		j	.L5
 545              	.LVL38:
 546              	.L9:
  94:src/riscv.cpp ****             case 0x23:
 547              		.loc 1 94 13
GAS LISTING /tmp/ccQPIkfG.s 			page 19


  95:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 548              		.loc 1 95 17
  95:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 549              		.loc 1 95 60 is_stmt 0
 550              	#APP
 551              	# 95 "src/riscv.cpp" 1
 552              		ld a0, 88(x8)
 553              	# 0 "" 2
 554              	.LVL39:
  96:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
 555              		.loc 1 96 17 is_stmt 1
 556              	#NO_APP
 557 01f0 630C0500 		beqz	a0,.L26
  96:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
 558              		.loc 1 96 35 discriminator 1
  96:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
 559              		.loc 1 96 60 is_stmt 0 discriminator 1
 560 01f4 97000000 		call	_ZN9semaphore4waitEv@plt
 560      E7800000 
 561              	.LVL40:
 562              	.L19:
  98:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 563              		.loc 1 98 17 is_stmt 1
  98:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 564              		.loc 1 98 57 is_stmt 0
 565              	#APP
 566              	# 98 "src/riscv.cpp" 1
  99:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 567              		mv t0, a0
 568              	# 0 "" 2
 569              		.loc 1 99 17 is_stmt 1
  99:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 570              		.loc 1 99 50 is_stmt 0
 571              	# 99 "src/riscv.cpp" 1
 100:src/riscv.cpp ****                 break;
 572              		sw t0, 80(x8)
 573              	# 0 "" 2
 574              		.loc 1 100 17 is_stmt 1
 575              	#NO_APP
 576 0204 6FF0DFEF 		j	.L5
 577              	.LVL41:
 578              	.L26:
  97:src/riscv.cpp ****                 else ret = -1;
 579              		.loc 1 97 26 is_stmt 0
 580 0208 1305F0FF 		li	a0,-1
 581              	.LVL42:
 582 020c 6FF01FFF 		j	.L19
 583              	.L8:
 102:src/riscv.cpp ****             case 0x24:
 584              		.loc 1 102 13 is_stmt 1
 103:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 585              		.loc 1 103 17
 103:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 586              		.loc 1 103 60 is_stmt 0
 587              	#APP
 588              	# 103 "src/riscv.cpp" 1
 589              		ld a0, 88(x8)
GAS LISTING /tmp/ccQPIkfG.s 			page 20


 590              	# 0 "" 2
 591              	.LVL43:
 104:src/riscv.cpp ****                 ret = id->semaphore::signal();
 592              		.loc 1 104 17 is_stmt 1
 104:src/riscv.cpp ****                 ret = id->semaphore::signal();
 593              		.loc 1 104 44 is_stmt 0
 594              	#NO_APP
 595 0214 97000000 		call	_ZN9semaphore6signalEv@plt
 595      E7800000 
 596              	.LVL44:
 105:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 597              		.loc 1 105 17 is_stmt 1
 105:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 598              		.loc 1 105 57 is_stmt 0
 599              	#APP
 600              	# 105 "src/riscv.cpp" 1
 106:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 601              		mv t0, a0
 602              	# 0 "" 2
 603              		.loc 1 106 17 is_stmt 1
 106:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 604              		.loc 1 106 50 is_stmt 0
 605              	# 106 "src/riscv.cpp" 1
 107:src/riscv.cpp ****                 break;
 606              		sw t0, 80(x8)
 607              	# 0 "" 2
 608              		.loc 1 107 17 is_stmt 1
 609              	#NO_APP
 610 0224 6FF0DFED 		j	.L5
 611              	.LVL45:
 612              	.L6:
 109:src/riscv.cpp ****             case 0x26:
 613              		.loc 1 109 13
 110:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 614              		.loc 1 110 17
 110:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 615              		.loc 1 110 60 is_stmt 0
 616              	#APP
 617              	# 110 "src/riscv.cpp" 1
 618              		ld a0, 88(x8)
 619              	# 0 "" 2
 620              	.LVL46:
 111:src/riscv.cpp ****                 ret = id->semaphore::trywait();
 621              		.loc 1 111 17 is_stmt 1
 111:src/riscv.cpp ****                 ret = id->semaphore::trywait();
 622              		.loc 1 111 45 is_stmt 0
 623              	#NO_APP
 624 022c 97000000 		call	_ZN9semaphore7trywaitEv@plt
 624      E7800000 
 625              	.LVL47:
 112:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 626              		.loc 1 112 17 is_stmt 1
 112:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 627              		.loc 1 112 57 is_stmt 0
 628              	#APP
 629              	# 112 "src/riscv.cpp" 1
 113:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
GAS LISTING /tmp/ccQPIkfG.s 			page 21


 630              		mv t0, a0
 631              	# 0 "" 2
 632              		.loc 1 113 17 is_stmt 1
 113:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 633              		.loc 1 113 50 is_stmt 0
 634              	# 113 "src/riscv.cpp" 1
 114:src/riscv.cpp ****                 break;
 635              		sw t0, 80(x8)
 636              	# 0 "" 2
 637              		.loc 1 114 17 is_stmt 1
 638              	#NO_APP
 639 023c 6FF05FEC 		j	.L5
 640              	.LVL48:
 641              	.L29:
 642              	.LBE61:
 643              	.LBE62:
 644              	.LBB63:
 645              	.LBB38:
 125:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 646              		.loc 1 125 9
 647              	.LBB39:
 648              	.LBB40:
 151:src/../h/riscv.hpp **** }
 649              		.loc 2 151 5
 151:src/../h/riscv.hpp **** }
 650              		.loc 2 151 64 is_stmt 0
 651 0240 93072000 		li	a5,2
 652              	#APP
 653              	# 151 "src/../h/riscv.hpp" 1
 654              		csrc sip, a5
 655              	# 0 "" 2
 656              	.LVL49:
 657              	#NO_APP
 658              	.LBE40:
 659              	.LBE39:
 126:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 660              		.loc 1 126 9 is_stmt 1
 661              	.LBB41:
 662              	.LBB42:
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 663              		.loc 2 110 5
 111:src/../h/riscv.hpp ****     return sepc;
 664              		.loc 2 111 5
 111:src/../h/riscv.hpp ****     return sepc;
 665              		.loc 2 111 64 is_stmt 0
 666              	#APP
 667              	# 111 "src/../h/riscv.hpp" 1
 668              		csrr a5, sepc
 669              	# 0 "" 2
 670              	#NO_APP
 671 024c 233CF4FC 		sd	a5,-40(s0)
 112:src/../h/riscv.hpp **** }
 672              		.loc 2 112 5 is_stmt 1
 112:src/../h/riscv.hpp **** }
 673              		.loc 2 112 12 is_stmt 0
 674 0250 833784FD 		ld	a5,-40(s0)
 675              	.LBE42:
GAS LISTING /tmp/ccQPIkfG.s 			page 22


 676              	.LBE41:
 126:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 677              		.loc 1 126 39
 678 0254 2330F4FA 		sd	a5,-96(s0)
 127:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 679              		.loc 1 127 9 is_stmt 1
 680              	.LBB43:
 681              	.LBB44:
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 682              		.loc 2 178 5
 179:src/../h/riscv.hpp ****     return sstatus;
 683              		.loc 2 179 5
 179:src/../h/riscv.hpp ****     return sstatus;
 684              		.loc 2 179 76 is_stmt 0
 685              	#APP
 686              	# 179 "src/../h/riscv.hpp" 1
 687              		csrr a5, sstatus
 688              	# 0 "" 2
 689              	#NO_APP
 690 025c 2338F4FC 		sd	a5,-48(s0)
 180:src/../h/riscv.hpp **** }
 691              		.loc 2 180 5 is_stmt 1
 180:src/../h/riscv.hpp **** }
 692              		.loc 2 180 12 is_stmt 0
 693 0260 833704FD 		ld	a5,-48(s0)
 694              	.LBE44:
 695              	.LBE43:
 127:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 696              		.loc 1 127 45
 697 0264 2334F4FA 		sd	a5,-88(s0)
 129:src/riscv.cpp ****         TCB::timeSliceCounter++;
 698              		.loc 1 129 9 is_stmt 1
 129:src/riscv.cpp ****         TCB::timeSliceCounter++;
 699              		.loc 1 129 30 is_stmt 0
 700 0268 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 700      03370700 
 701              	.LVL50:
 702 0270 83370700 		ld	a5,0(a4)
 703 0274 93871700 		addi	a5,a5,1
 704 0278 2330F700 		sd	a5,0(a4)
 131:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 705              		.loc 1 131 9 is_stmt 1
 131:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 706              		.loc 1 131 63 is_stmt 0
 707 027c 17070000 		la	a4,_ZN3TCB7runningE
 707      03370700 
 708 0284 03370700 		ld	a4,0(a4)
 709              	.LVL51:
 710              	.LBB45:
 711              	.LBB46:
 712              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 5/19/24.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJEKAT_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJEKAT_TCB_HPP
GAS LISTING /tmp/ccQPIkfG.s 			page 23


   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "riscv.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** class TCB {
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp ****     void *operator new(size_t n);
  14:src/../h/tcb.hpp **** 
  15:src/../h/tcb.hpp ****     void *operator new[](size_t n);
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept;
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void operator delete[](void *p) noexcept;
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp **** public:
  22:src/../h/tcb.hpp ****     ~TCB(){ delete stack;}
  23:src/../h/tcb.hpp ****     bool isFinished() const {return finished;}
  24:src/../h/tcb.hpp ****     void setFinished(bool f) { finished = f;}
  25:src/../h/tcb.hpp **** 
  26:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 713              		.loc 3 26 35 is_stmt 1
 714              		.loc 3 26 42 is_stmt 0
 715 0288 03378702 		ld	a4,40(a4)
 716              	.LVL52:
 717              	.LBE46:
 718              	.LBE45:
 131:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 719              		.loc 1 131 9
 720 028c 63FCE700 		bgeu	a5,a4,.L31
 721              	.LVL53:
 722              	.L22:
 136:src/riscv.cpp ****         w_sstatus(sstatus);
 723              		.loc 1 136 9 is_stmt 1
 136:src/riscv.cpp ****         w_sstatus(sstatus);
 724              		.loc 1 136 18 is_stmt 0
 725 0290 833784FA 		ld	a5,-88(s0)
 726              	.LVL54:
 727              	.LBB47:
 728              	.LBB48:
 185:src/../h/riscv.hpp **** }
 729              		.loc 2 185 5 is_stmt 1
 185:src/../h/riscv.hpp **** }
 730              		.loc 2 185 77 is_stmt 0
 731              	#APP
 732              	# 185 "src/../h/riscv.hpp" 1
 733              		csrw sstatus, a5
 734              	# 0 "" 2
 735              	.LVL55:
 736              	#NO_APP
 737              	.LBE48:
 738              	.LBE47:
 137:src/riscv.cpp ****         w_sepc(sepc);
 739              		.loc 1 137 9 is_stmt 1
 137:src/riscv.cpp ****         w_sepc(sepc);
 740              		.loc 1 137 15 is_stmt 0
 741 0298 833704FA 		ld	a5,-96(s0)
 742              	.LVL56:
GAS LISTING /tmp/ccQPIkfG.s 			page 24


 743              	.LBB49:
 744              	.LBB50:
 117:src/../h/riscv.hpp **** }
 745              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 746              		.loc 2 117 65 is_stmt 0
 747              	#APP
 748              	# 117 "src/../h/riscv.hpp" 1
 118:src/../h/riscv.hpp **** 
 749              		csrw sepc, a5
 750              	# 0 "" 2
 751              		.loc 2 118 1
 752              	#NO_APP
 753 02a0 6FF01FE7 		j	.L3
 754              	.LVL57:
 755              	.L31:
 756              	.LBE50:
 757              	.LBE49:
 132:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 758              		.loc 1 132 13 is_stmt 1
 132:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 759              		.loc 1 132 34 is_stmt 0
 760 02a4 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 760      83B70700 
 761 02ac 23B00700 		sd	zero,0(a5)
 133:src/riscv.cpp ****             TCB::dispatch();
 762              		.loc 1 133 13 is_stmt 1
 133:src/riscv.cpp ****             TCB::dispatch();
 763              		.loc 1 133 26 is_stmt 0
 764 02b0 97000000 		call	_ZN3TCB8dispatchEv@plt
 764      E7800000 
 765              	.LVL58:
 766 02b8 6FF09FFD 		j	.L22
 767              	.LVL59:
 768              	.L30:
 769              	.LBE38:
 143:src/riscv.cpp ****         console_handler();
 770              		.loc 1 143 9 is_stmt 1
 143:src/riscv.cpp ****         console_handler();
 771              		.loc 1 143 24 is_stmt 0
 772 02bc 97000000 		call	console_handler@plt
 772      E7800000 
 773              	.LVL60:
 774 02c4 6FF0DFE4 		j	.L3
 775              	.LBE63:
 776              	.LBE66:
 777              		.cfi_endproc
 778              	.LFE42:
 780              	.Letext0:
 781              		.file 4 "src/../h/../lib/hw.h"
 782              		.file 5 "src/../h/syscall_c.hpp"
 783              		.file 6 "src/../h/MemoryAllocator.hpp"
 784              		.file 7 "src/../h/list.hpp"
 785              		.file 8 "src/../h/semaphore.hpp"
 786              		.file 9 "src/../h/print.hpp"
 787              		.file 10 "src/../h/../lib/console.h"
GAS LISTING /tmp/ccQPIkfG.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccQPIkfG.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccQPIkfG.s:13     .text:0000000000000000 .L0 
     /tmp/ccQPIkfG.s:14     .text:0000000000000000 .L0 
     /tmp/ccQPIkfG.s:15     .text:0000000000000004 .L0 
     /tmp/ccQPIkfG.s:17     .text:0000000000000008 .L0 
     /tmp/ccQPIkfG.s:19     .text:000000000000000c .L0 
     /tmp/ccQPIkfG.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:12     .text:000000000000000c .L0 
     /tmp/ccQPIkfG.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:13     .text:0000000000000010 .L0 
     /tmp/ccQPIkfG.s:33     .text:0000000000000014 .L0 
     /tmp/ccQPIkfG.s:34     .text:0000000000000018 .L0 
     /tmp/ccQPIkfG.s:35     .text:0000000000000018 .L0 
     /tmp/ccQPIkfG.s:37     .text:000000000000001c .L0 
     /tmp/ccQPIkfG.s:39     .text:0000000000000020 .L0 
     /tmp/ccQPIkfG.s:50     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccQPIkfG.s:53     .text:0000000000000020 .L0 
     /tmp/ccQPIkfG.s:54     .text:0000000000000020 .L0 
     /tmp/ccQPIkfG.s:55     .text:0000000000000024 .L0 
     /tmp/ccQPIkfG.s:59     .text:0000000000000030 .L0 
     /tmp/ccQPIkfG.s:60     .text:0000000000000030 .L0 
     /tmp/ccQPIkfG.s:61     .text:0000000000000030 .L0 
     /tmp/ccQPIkfG.s:63     .text:0000000000000034 .L0 
     /tmp/ccQPIkfG.s:68     .text:0000000000000034 .L0 
     /tmp/ccQPIkfG.s:69     .text:0000000000000034 .L0 
     /tmp/ccQPIkfG.s:70     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:192    .text:0000000000000034 .L0 
     /tmp/ccQPIkfG.s:78     .text:000000000000003c .L0 
     /tmp/ccQPIkfG.s:79     .text:000000000000003c .L0 
     /tmp/ccQPIkfG.s:86     .text:0000000000000040 .L0 
     /tmp/ccQPIkfG.s:87     .text:0000000000000040 .L0 
     /tmp/ccQPIkfG.s:88     .text:0000000000000040 .L0 
  src/../h/riscv.hpp:99     .text:0000000000000040 .L0 
     /tmp/ccQPIkfG.s:96     .text:0000000000000048 .L0 
     /tmp/ccQPIkfG.s:97     .text:0000000000000048 .L0 
     /tmp/ccQPIkfG.s:103    .text:000000000000004c .L0 
     /tmp/ccQPIkfG.s:104    .text:000000000000004c .L0 
     /tmp/ccQPIkfG.s:106    .text:0000000000000050 .L0 
     /tmp/ccQPIkfG.s:112    .text:0000000000000058 .L0 
     /tmp/ccQPIkfG.s:118    .text:0000000000000068 .L0 
     /tmp/ccQPIkfG.s:123    .text:0000000000000078 .L0 
     /tmp/ccQPIkfG.s:126    .text:0000000000000080 .L0 
     /tmp/ccQPIkfG.s:127    .text:0000000000000080 .L0 
     /tmp/ccQPIkfG.s:131    .text:0000000000000090 .L0 
       src/riscv.cpp:151    .text:0000000000000090 .L0 
     /tmp/ccQPIkfG.s:137    .text:0000000000000098 .L0 
       src/riscv.cpp:152    .text:0000000000000098 .L0 
     /tmp/ccQPIkfG.s:142    .text:000000000000009c .L0 
       src/riscv.cpp:153    .text:000000000000009c .L0 
     /tmp/ccQPIkfG.s:150    .text:00000000000000a0 .L0 
     /tmp/ccQPIkfG.s:158    .text:00000000000000a4 .L0 
     /tmp/ccQPIkfG.s:159    .text:00000000000000a4 .L0 
     /tmp/ccQPIkfG.s:160    .text:00000000000000a4 .L0 
  src/../h/riscv.hpp:111    .text:00000000000000a4 .L0 
     /tmp/ccQPIkfG.s:169    .text:00000000000000ac .L0 
GAS LISTING /tmp/ccQPIkfG.s 			page 26


     /tmp/ccQPIkfG.s:170    .text:00000000000000ac .L0 
     /tmp/ccQPIkfG.s:174    .text:00000000000000b0 .L0 
     /tmp/ccQPIkfG.s:176    .text:00000000000000b4 .L0 
     /tmp/ccQPIkfG.s:180    .text:00000000000000b8 .L0 
     /tmp/ccQPIkfG.s:181    .text:00000000000000b8 .L0 
     /tmp/ccQPIkfG.s:182    .text:00000000000000b8 .L0 
  src/../h/riscv.hpp:179    .text:00000000000000b8 .L0 
     /tmp/ccQPIkfG.s:190    .text:00000000000000c0 .L0 
     /tmp/ccQPIkfG.s:191    .text:00000000000000c0 .L0 
     /tmp/ccQPIkfG.s:195    .text:00000000000000c4 .L0 
     /tmp/ccQPIkfG.s:197    .text:00000000000000c8 .L0 
     /tmp/ccQPIkfG.s:198    .text:00000000000000c8 .L0 
     /tmp/ccQPIkfG.s:199    .text:00000000000000c8 .L0 
     /tmp/ccQPIkfG.s:200    .text:00000000000000c8 .L0 
     /tmp/ccQPIkfG.s:256    .text:00000000000000ec .L0 
     /tmp/ccQPIkfG.s:257    .text:00000000000000ec .L0 
     /tmp/ccQPIkfG.s:258    .text:00000000000000ec .L0 
     /tmp/ccQPIkfG.s:259    .text:00000000000000ec .L0 
       src/riscv.cpp:32     .text:00000000000000ec .L0 
     /tmp/ccQPIkfG.s:266    .text:00000000000000f0 .L0 
     /tmp/ccQPIkfG.s:268    .text:00000000000000f0 .L0 
     /tmp/ccQPIkfG.s:271    .text:00000000000000f8 .L0 
       src/riscv.cpp:34     .text:00000000000000f8 .L0 
     /tmp/ccQPIkfG.s:277    .text:00000000000000fc .L0 
       src/riscv.cpp:35     .text:00000000000000fc .L0 
     /tmp/ccQPIkfG.s:286    .text:0000000000000100 .L0 
     /tmp/ccQPIkfG.s:287    .text:0000000000000100 .L0 
     /tmp/ccQPIkfG.s:288    .text:0000000000000100 .L0 
     /tmp/ccQPIkfG.s:293    .text:0000000000000104 .L0 
  src/../h/riscv.hpp:185    .text:0000000000000104 .L0 
     /tmp/ccQPIkfG.s:303    .text:0000000000000108 .L0 
     /tmp/ccQPIkfG.s:304    .text:0000000000000108 .L0 
     /tmp/ccQPIkfG.s:309    .text:000000000000010c .L0 
  src/../h/riscv.hpp:117    .text:000000000000010c .L0 
     /tmp/ccQPIkfG.s:322    .text:0000000000000110 .L0 
     /tmp/ccQPIkfG.s:323    .text:0000000000000114 .L0 
     /tmp/ccQPIkfG.s:324    .text:0000000000000114 .L0 
     /tmp/ccQPIkfG.s:326    .text:0000000000000118 .L0 
     /tmp/ccQPIkfG.s:327    .text:0000000000000118 .L0 
     /tmp/ccQPIkfG.s:329    .text:000000000000011c .L0 
     /tmp/ccQPIkfG.s:331    .text:0000000000000120 .L0 
     /tmp/ccQPIkfG.s:335    .text:0000000000000124 .L0 
     /tmp/ccQPIkfG.s:340    .text:0000000000000124 .L0 
     /tmp/ccQPIkfG.s:341    .text:0000000000000124 .L0 
     /tmp/ccQPIkfG.s:342    .text:0000000000000124 .L0 
     /tmp/ccQPIkfG.s:343    .text:0000000000000124 .L0 
       src/riscv.cpp:41     .text:0000000000000124 .L0 
     /tmp/ccQPIkfG.s:350    .text:0000000000000128 .L0 
     /tmp/ccQPIkfG.s:352    .text:0000000000000128 .L0 
     /tmp/ccQPIkfG.s:355    .text:0000000000000130 .L0 
       src/riscv.cpp:43     .text:0000000000000130 .L0 
     /tmp/ccQPIkfG.s:361    .text:0000000000000134 .L0 
       src/riscv.cpp:44     .text:0000000000000134 .L0 
     /tmp/ccQPIkfG.s:367    .text:0000000000000138 .L0 
     /tmp/ccQPIkfG.s:371    .text:000000000000013c .L0 
     /tmp/ccQPIkfG.s:372    .text:000000000000013c .L0 
     /tmp/ccQPIkfG.s:373    .text:000000000000013c .L0 
GAS LISTING /tmp/ccQPIkfG.s 			page 27


     /tmp/ccQPIkfG.s:374    .text:000000000000013c .L0 
     /tmp/ccQPIkfG.s:375    .text:000000000000013c .L0 
     /tmp/ccQPIkfG.s:376    .text:000000000000013c .L0 
       src/riscv.cpp:52     .text:000000000000013c .L0 
     /tmp/ccQPIkfG.s:383    .text:0000000000000140 .L0 
       src/riscv.cpp:53     .text:0000000000000140 .L0 
     /tmp/ccQPIkfG.s:389    .text:0000000000000144 .L0 
       src/riscv.cpp:54     .text:0000000000000144 .L0 
     /tmp/ccQPIkfG.s:395    .text:0000000000000148 .L0 
       src/riscv.cpp:55     .text:0000000000000148 .L0 
     /tmp/ccQPIkfG.s:401    .text:000000000000014c .L0 
     /tmp/ccQPIkfG.s:403    .text:000000000000014c .L0 
     /tmp/ccQPIkfG.s:406    .text:0000000000000154 .L0 
     /tmp/ccQPIkfG.s:408    .text:0000000000000158 .L0 
     /tmp/ccQPIkfG.s:410    .text:000000000000015c .L0 
     /tmp/ccQPIkfG.s:414    .text:0000000000000160 .L0 
       src/riscv.cpp:60     .text:0000000000000160 .L0 
     /tmp/ccQPIkfG.s:420    .text:0000000000000164 .L0 
       src/riscv.cpp:61     .text:0000000000000164 .L0 
     /tmp/ccQPIkfG.s:426    .text:0000000000000168 .L0 
     /tmp/ccQPIkfG.s:430    .text:000000000000016c .L0 
     /tmp/ccQPIkfG.s:435    .text:0000000000000174 .L0 
     /tmp/ccQPIkfG.s:436    .text:0000000000000174 .L0 
     /tmp/ccQPIkfG.s:437    .text:0000000000000174 .L0 
     /tmp/ccQPIkfG.s:440    .text:000000000000017c .L0 
       src/riscv.cpp:66     .text:000000000000017c .L0 
     /tmp/ccQPIkfG.s:446    .text:0000000000000180 .L0 
       src/riscv.cpp:67     .text:0000000000000180 .L0 
     /tmp/ccQPIkfG.s:452    .text:0000000000000184 .L0 
     /tmp/ccQPIkfG.s:456    .text:0000000000000188 .L0 
     /tmp/ccQPIkfG.s:457    .text:0000000000000188 .L0 
     /tmp/ccQPIkfG.s:458    .text:0000000000000188 .L0 
     /tmp/ccQPIkfG.s:461    .text:0000000000000194 .L0 
     /tmp/ccQPIkfG.s:462    .text:0000000000000194 .L0 
     /tmp/ccQPIkfG.s:465    .text:000000000000019c .L0 
     /tmp/ccQPIkfG.s:469    .text:00000000000001a0 .L0 
     /tmp/ccQPIkfG.s:470    .text:00000000000001a0 .L0 
     /tmp/ccQPIkfG.s:471    .text:00000000000001a0 .L0 
       src/riscv.cpp:77     .text:00000000000001a0 .L0 
     /tmp/ccQPIkfG.s:478    .text:00000000000001a4 .L0 
       src/riscv.cpp:78     .text:00000000000001a4 .L0 
     /tmp/ccQPIkfG.s:484    .text:00000000000001a8 .L0 
     /tmp/ccQPIkfG.s:486    .text:00000000000001a8 .L0 
     /tmp/ccQPIkfG.s:490    .text:00000000000001b4 .L0 
     /tmp/ccQPIkfG.s:492    .text:00000000000001b8 .L0 
     /tmp/ccQPIkfG.s:494    .text:00000000000001bc .L0 
     /tmp/ccQPIkfG.s:498    .text:00000000000001c0 .L0 
       src/riscv.cpp:82     .text:00000000000001c0 .L0 
     /tmp/ccQPIkfG.s:504    .text:00000000000001c4 .L0 
       src/riscv.cpp:83     .text:00000000000001c4 .L0 
     /tmp/ccQPIkfG.s:510    .text:00000000000001c8 .L0 
     /tmp/ccQPIkfG.s:514    .text:00000000000001cc .L0 
     /tmp/ccQPIkfG.s:519    .text:00000000000001d4 .L0 
     /tmp/ccQPIkfG.s:520    .text:00000000000001d4 .L0 
       src/riscv.cpp:87     .text:00000000000001d4 .L0 
     /tmp/ccQPIkfG.s:527    .text:00000000000001d8 .L0 
     /tmp/ccQPIkfG.s:529    .text:00000000000001d8 .L0 
GAS LISTING /tmp/ccQPIkfG.s 			page 28


     /tmp/ccQPIkfG.s:532    .text:00000000000001e0 .L0 
       src/riscv.cpp:90     .text:00000000000001e0 .L0 
     /tmp/ccQPIkfG.s:538    .text:00000000000001e4 .L0 
       src/riscv.cpp:91     .text:00000000000001e4 .L0 
     /tmp/ccQPIkfG.s:544    .text:00000000000001e8 .L0 
     /tmp/ccQPIkfG.s:548    .text:00000000000001ec .L0 
     /tmp/ccQPIkfG.s:549    .text:00000000000001ec .L0 
       src/riscv.cpp:95     .text:00000000000001ec .L0 
     /tmp/ccQPIkfG.s:557    .text:00000000000001f0 .L0 
     /tmp/ccQPIkfG.s:559    .text:00000000000001f4 .L0 
     /tmp/ccQPIkfG.s:560    .text:00000000000001f4 .L0 
     /tmp/ccQPIkfG.s:564    .text:00000000000001fc .L0 
       src/riscv.cpp:98     .text:00000000000001fc .L0 
     /tmp/ccQPIkfG.s:570    .text:0000000000000200 .L0 
       src/riscv.cpp:99     .text:0000000000000200 .L0 
     /tmp/ccQPIkfG.s:576    .text:0000000000000204 .L0 
     /tmp/ccQPIkfG.s:580    .text:0000000000000208 .L0 
     /tmp/ccQPIkfG.s:585    .text:0000000000000210 .L0 
     /tmp/ccQPIkfG.s:586    .text:0000000000000210 .L0 
       src/riscv.cpp:103    .text:0000000000000210 .L0 
     /tmp/ccQPIkfG.s:593    .text:0000000000000214 .L0 
     /tmp/ccQPIkfG.s:595    .text:0000000000000214 .L0 
     /tmp/ccQPIkfG.s:598    .text:000000000000021c .L0 
       src/riscv.cpp:105    .text:000000000000021c .L0 
     /tmp/ccQPIkfG.s:604    .text:0000000000000220 .L0 
       src/riscv.cpp:106    .text:0000000000000220 .L0 
     /tmp/ccQPIkfG.s:610    .text:0000000000000224 .L0 
     /tmp/ccQPIkfG.s:614    .text:0000000000000228 .L0 
     /tmp/ccQPIkfG.s:615    .text:0000000000000228 .L0 
       src/riscv.cpp:110    .text:0000000000000228 .L0 
     /tmp/ccQPIkfG.s:622    .text:000000000000022c .L0 
     /tmp/ccQPIkfG.s:624    .text:000000000000022c .L0 
     /tmp/ccQPIkfG.s:627    .text:0000000000000234 .L0 
       src/riscv.cpp:112    .text:0000000000000234 .L0 
     /tmp/ccQPIkfG.s:633    .text:0000000000000238 .L0 
       src/riscv.cpp:113    .text:0000000000000238 .L0 
     /tmp/ccQPIkfG.s:639    .text:000000000000023c .L0 
     /tmp/ccQPIkfG.s:649    .text:0000000000000240 .L0 
     /tmp/ccQPIkfG.s:650    .text:0000000000000240 .L0 
     /tmp/ccQPIkfG.s:651    .text:0000000000000240 .L0 
     /tmp/ccQPIkfG.s:663    .text:0000000000000248 .L0 
     /tmp/ccQPIkfG.s:664    .text:0000000000000248 .L0 
     /tmp/ccQPIkfG.s:665    .text:0000000000000248 .L0 
  src/../h/riscv.hpp:111    .text:0000000000000248 .L0 
     /tmp/ccQPIkfG.s:673    .text:0000000000000250 .L0 
     /tmp/ccQPIkfG.s:674    .text:0000000000000250 .L0 
     /tmp/ccQPIkfG.s:678    .text:0000000000000254 .L0 
     /tmp/ccQPIkfG.s:682    .text:0000000000000258 .L0 
     /tmp/ccQPIkfG.s:683    .text:0000000000000258 .L0 
     /tmp/ccQPIkfG.s:684    .text:0000000000000258 .L0 
  src/../h/riscv.hpp:179    .text:0000000000000258 .L0 
     /tmp/ccQPIkfG.s:692    .text:0000000000000260 .L0 
     /tmp/ccQPIkfG.s:693    .text:0000000000000260 .L0 
     /tmp/ccQPIkfG.s:697    .text:0000000000000264 .L0 
     /tmp/ccQPIkfG.s:699    .text:0000000000000268 .L0 
     /tmp/ccQPIkfG.s:700    .text:0000000000000268 .L0 
     /tmp/ccQPIkfG.s:706    .text:000000000000027c .L0 
GAS LISTING /tmp/ccQPIkfG.s 			page 29


     /tmp/ccQPIkfG.s:707    .text:000000000000027c .L0 
     /tmp/ccQPIkfG.s:714    .text:0000000000000288 .L0 
     /tmp/ccQPIkfG.s:715    .text:0000000000000288 .L0 
     /tmp/ccQPIkfG.s:720    .text:000000000000028c .L0 
     /tmp/ccQPIkfG.s:724    .text:0000000000000290 .L0 
     /tmp/ccQPIkfG.s:725    .text:0000000000000290 .L0 
     /tmp/ccQPIkfG.s:730    .text:0000000000000294 .L0 
  src/../h/riscv.hpp:185    .text:0000000000000294 .L0 
     /tmp/ccQPIkfG.s:740    .text:0000000000000298 .L0 
     /tmp/ccQPIkfG.s:741    .text:0000000000000298 .L0 
     /tmp/ccQPIkfG.s:746    .text:000000000000029c .L0 
  src/../h/riscv.hpp:117    .text:000000000000029c .L0 
     /tmp/ccQPIkfG.s:753    .text:00000000000002a0 .L0 
     /tmp/ccQPIkfG.s:759    .text:00000000000002a4 .L0 
     /tmp/ccQPIkfG.s:760    .text:00000000000002a4 .L0 
     /tmp/ccQPIkfG.s:763    .text:00000000000002b0 .L0 
     /tmp/ccQPIkfG.s:764    .text:00000000000002b0 .L0 
     /tmp/ccQPIkfG.s:771    .text:00000000000002bc .L0 
     /tmp/ccQPIkfG.s:772    .text:00000000000002bc .L0 
     /tmp/ccQPIkfG.s:777    .text:00000000000002c8 .L0 
     /tmp/ccQPIkfG.s:788    .text:00000000000002c8 .L0 
     /tmp/ccQPIkfG.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccQPIkfG.s:127    .text:0000000000000080 .L0 
     /tmp/ccQPIkfG.s:212    .rodata:0000000000000000 .L7
     /tmp/ccQPIkfG.s:204    .text:00000000000000d4 .L0 
     /tmp/ccQPIkfG.s:458    .text:0000000000000188 .L0 
     /tmp/ccQPIkfG.s:700    .text:0000000000000268 .L0 
     /tmp/ccQPIkfG.s:707    .text:000000000000027c .L0 
     /tmp/ccQPIkfG.s:760    .text:00000000000002a4 .L0 
     /tmp/ccQPIkfG.s:152    .text:00000000000000a4 .L28
     /tmp/ccQPIkfG.s:641    .text:0000000000000240 .L29
     /tmp/ccQPIkfG.s:768    .text:00000000000002bc .L30
     /tmp/ccQPIkfG.s:316    .text:0000000000000110 .L3
     /tmp/ccQPIkfG.s:284    .text:0000000000000100 .L5
     /tmp/ccQPIkfG.s:428    .text:000000000000016c .L24
     /tmp/ccQPIkfG.s:411    .text:0000000000000160 .L17
     /tmp/ccQPIkfG.s:512    .text:00000000000001cc .L25
     /tmp/ccQPIkfG.s:495    .text:00000000000001c0 .L18
     /tmp/ccQPIkfG.s:578    .text:0000000000000208 .L26
     /tmp/ccQPIkfG.s:562    .text:00000000000001fc .L19
     /tmp/ccQPIkfG.s:755    .text:00000000000002a4 .L31
     /tmp/ccQPIkfG.s:722    .text:0000000000000290 .L22
     /tmp/ccQPIkfG.s:253    .text:00000000000000ec .L16
     /tmp/ccQPIkfG.s:334    .text:0000000000000124 .L15
     /tmp/ccQPIkfG.s:369    .text:000000000000013c .L14
     /tmp/ccQPIkfG.s:433    .text:0000000000000174 .L13
     /tmp/ccQPIkfG.s:454    .text:0000000000000188 .L12
     /tmp/ccQPIkfG.s:467    .text:00000000000001a0 .L11
     /tmp/ccQPIkfG.s:517    .text:00000000000001d4 .L10
     /tmp/ccQPIkfG.s:546    .text:00000000000001ec .L9
     /tmp/ccQPIkfG.s:583    .text:0000000000000210 .L8
     /tmp/ccQPIkfG.s:612    .text:0000000000000228 .L6
     /tmp/ccQPIkfG.s:2450   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccQPIkfG.s:4107   .debug_str:0000000000000887 .LASF183
     /tmp/ccQPIkfG.s:4191   .debug_str:0000000000000b6a .LASF184
     /tmp/ccQPIkfG.s:4201   .debug_str:0000000000000bc2 .LASF185
     /tmp/ccQPIkfG.s:5      .text:0000000000000000 .Ltext0
GAS LISTING /tmp/ccQPIkfG.s 			page 30


     /tmp/ccQPIkfG.s:780    .text:00000000000002c8 .Letext0
     /tmp/ccQPIkfG.s:3821   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccQPIkfG.s:3951   .debug_str:00000000000003fd .LASF0
     /tmp/ccQPIkfG.s:3981   .debug_str:00000000000004fc .LASF1
     /tmp/ccQPIkfG.s:4075   .debug_str:000000000000078d .LASF2
     /tmp/ccQPIkfG.s:3911   .debug_str:00000000000002c2 .LASF3
     /tmp/ccQPIkfG.s:4083   .debug_str:00000000000007ca .LASF4
     /tmp/ccQPIkfG.s:3959   .debug_str:0000000000000431 .LASF5
     /tmp/ccQPIkfG.s:3835   .debug_str:000000000000006b .LASF6
     /tmp/ccQPIkfG.s:4037   .debug_str:000000000000066b .LASF7
     /tmp/ccQPIkfG.s:3969   .debug_str:00000000000004a3 .LASF8
     /tmp/ccQPIkfG.s:3923   .debug_str:0000000000000303 .LASF9
     /tmp/ccQPIkfG.s:3935   .debug_str:0000000000000382 .LASF10
     /tmp/ccQPIkfG.s:3865   .debug_str:000000000000013d .LASF11
     /tmp/ccQPIkfG.s:3917   .debug_str:00000000000002e3 .LASF12
     /tmp/ccQPIkfG.s:3875   .debug_str:0000000000000194 .LASF13
     /tmp/ccQPIkfG.s:3863   .debug_str:000000000000012d .LASF14
     /tmp/ccQPIkfG.s:4117   .debug_str:000000000000097d .LASF15
     /tmp/ccQPIkfG.s:3905   .debug_str:0000000000000275 .LASF16
     /tmp/ccQPIkfG.s:4101   .debug_str:0000000000000845 .LASF17
     /tmp/ccQPIkfG.s:4177   .debug_str:0000000000000b26 .LASF66
     /tmp/ccQPIkfG.s:4057   .debug_str:0000000000000714 .LASF186
     /tmp/ccQPIkfG.s:3987   .debug_str:0000000000000523 .LASF18
     /tmp/ccQPIkfG.s:3841   .debug_str:000000000000009e .LASF19
     /tmp/ccQPIkfG.s:4193   .debug_str:0000000000000b78 .LASF20
     /tmp/ccQPIkfG.s:3939   .debug_str:00000000000003b3 .LASF21
     /tmp/ccQPIkfG.s:3947   .debug_str:00000000000003df .LASF23
     /tmp/ccQPIkfG.s:4091   .debug_str:00000000000007f0 .LASF22
     /tmp/ccQPIkfG.s:3909   .debug_str:00000000000002a7 .LASF24
     /tmp/ccQPIkfG.s:3953   .debug_str:000000000000040a .LASF25
     /tmp/ccQPIkfG.s:4187   .debug_str:0000000000000b48 .LASF26
     /tmp/ccQPIkfG.s:4157   .debug_str:0000000000000a6e .LASF27
     /tmp/ccQPIkfG.s:4149   .debug_str:0000000000000a20 .LASF29
     /tmp/ccQPIkfG.s:4071   .debug_str:0000000000000779 .LASF31
     /tmp/ccQPIkfG.s:4027   .debug_str:0000000000000624 .LASF33
     /tmp/ccQPIkfG.s:4051   .debug_str:00000000000006e6 .LASF28
     /tmp/ccQPIkfG.s:4053   .debug_str:00000000000006ed .LASF30
     /tmp/ccQPIkfG.s:4023   .debug_str:0000000000000609 .LASF32
     /tmp/ccQPIkfG.s:3971   .debug_str:00000000000004b6 .LASF34
     /tmp/ccQPIkfG.s:4189   .debug_str:0000000000000b62 .LASF35
     /tmp/ccQPIkfG.s:4143   .debug_str:00000000000009fa .LASF36
     /tmp/ccQPIkfG.s:4017   .debug_str:00000000000005e8 .LASF37
     /tmp/ccQPIkfG.s:4025   .debug_str:0000000000000610 .LASF38
     /tmp/ccQPIkfG.s:3995   .debug_str:0000000000000559 .LASF39
     /tmp/ccQPIkfG.s:4055   .debug_str:0000000000000700 .LASF40
     /tmp/ccQPIkfG.s:4211   .debug_str:0000000000000c16 .LASF41
     /tmp/ccQPIkfG.s:3957   .debug_str:000000000000041d .LASF42
     /tmp/ccQPIkfG.s:4111   .debug_str:000000000000095d .LASF43
     /tmp/ccQPIkfG.s:4087   .debug_str:00000000000007d6 .LASF44
     /tmp/ccQPIkfG.s:4089   .debug_str:00000000000007e9 .LASF45
     /tmp/ccQPIkfG.s:3869   .debug_str:000000000000015b .LASF46
     /tmp/ccQPIkfG.s:3899   .debug_str:0000000000000242 .LASF47
     /tmp/ccQPIkfG.s:3943   .debug_str:00000000000003c4 .LASF48
     /tmp/ccQPIkfG.s:3955   .debug_str:0000000000000417 .LASF49
     /tmp/ccQPIkfG.s:3889   .debug_str:0000000000000203 .LASF50
     /tmp/ccQPIkfG.s:3837   .debug_str:0000000000000072 .LASF51
     /tmp/ccQPIkfG.s:4081   .debug_str:00000000000007b2 .LASF52
GAS LISTING /tmp/ccQPIkfG.s 			page 31


     /tmp/ccQPIkfG.s:4073   .debug_str:0000000000000782 .LASF53
     /tmp/ccQPIkfG.s:4205   .debug_str:0000000000000be6 .LASF54
     /tmp/ccQPIkfG.s:4181   .debug_str:0000000000000b31 .LASF55
     /tmp/ccQPIkfG.s:4197   .debug_str:0000000000000ba0 .LASF56
     /tmp/ccQPIkfG.s:4171   .debug_str:0000000000000af7 .LASF57
     /tmp/ccQPIkfG.s:4005   .debug_str:000000000000059d .LASF58
     /tmp/ccQPIkfG.s:4185   .debug_str:0000000000000b43 .LASF59
     /tmp/ccQPIkfG.s:4031   .debug_str:000000000000063e .LASF60
     /tmp/ccQPIkfG.s:3961   .debug_str:0000000000000443 .LASF61
     /tmp/ccQPIkfG.s:4115   .debug_str:000000000000096c .LASF62
     /tmp/ccQPIkfG.s:4153   .debug_str:0000000000000a4c .LASF63
     /tmp/ccQPIkfG.s:3933   .debug_str:0000000000000366 .LASF64
     /tmp/ccQPIkfG.s:4041   .debug_str:0000000000000688 .LASF100
     /tmp/ccQPIkfG.s:3963   .debug_str:0000000000000448 .LASF102
     /tmp/ccQPIkfG.s:4137   .debug_str:00000000000009df .LASF65
     /tmp/ccQPIkfG.s:4125   .debug_str:00000000000009ac .LASF107
     /tmp/ccQPIkfG.s:4207   .debug_str:0000000000000bfe .LASF67
     /tmp/ccQPIkfG.s:3931   .debug_str:000000000000035a .LASF68
     /tmp/ccQPIkfG.s:3857   .debug_str:00000000000000f8 .LASF69
     /tmp/ccQPIkfG.s:3921   .debug_str:00000000000002f7 .LASF70
     /tmp/ccQPIkfG.s:3825   .debug_str:0000000000000005 .LASF71
     /tmp/ccQPIkfG.s:3999   .debug_str:0000000000000569 .LASF73
     /tmp/ccQPIkfG.s:4099   .debug_str:0000000000000832 .LASF72
     /tmp/ccQPIkfG.s:4077   .debug_str:000000000000079b .LASF74
     /tmp/ccQPIkfG.s:4085   .debug_str:00000000000007d1 .LASF75
     /tmp/ccQPIkfG.s:3833   .debug_str:000000000000005f .LASF77
     /tmp/ccQPIkfG.s:4127   .debug_str:00000000000009b4 .LASF79
     /tmp/ccQPIkfG.s:4015   .debug_str:00000000000005d1 .LASF81
     /tmp/ccQPIkfG.s:3853   .debug_str:00000000000000de .LASF76
     /tmp/ccQPIkfG.s:4151   .debug_str:0000000000000a35 .LASF78
     /tmp/ccQPIkfG.s:4001   .debug_str:0000000000000576 .LASF80
     /tmp/ccQPIkfG.s:4163   .debug_str:0000000000000aa3 .LASF82
     /tmp/ccQPIkfG.s:4135   .debug_str:00000000000009d7 .LASF187
     /tmp/ccQPIkfG.s:4139   .debug_str:00000000000009e8 .LASF83
     /tmp/ccQPIkfG.s:3937   .debug_str:0000000000000390 .LASF84
     /tmp/ccQPIkfG.s:4029   .debug_str:0000000000000639 .LASF188
     /tmp/ccQPIkfG.s:3979   .debug_str:00000000000004ef .LASF85
     /tmp/ccQPIkfG.s:4003   .debug_str:0000000000000583 .LASF86
     /tmp/ccQPIkfG.s:4209   .debug_str:0000000000000c0b .LASF87
     /tmp/ccQPIkfG.s:4043   .debug_str:000000000000069d .LASF88
     /tmp/ccQPIkfG.s:3983   .debug_str:000000000000050f .LASF89
     /tmp/ccQPIkfG.s:4069   .debug_str:0000000000000769 .LASF90
     /tmp/ccQPIkfG.s:4129   .debug_str:00000000000009bf .LASF91
     /tmp/ccQPIkfG.s:3913   .debug_str:00000000000002c8 .LASF92
     /tmp/ccQPIkfG.s:4097   .debug_str:000000000000081a .LASF189
     /tmp/ccQPIkfG.s:3823   .debug_str:0000000000000000 .LASF93
     /tmp/ccQPIkfG.s:3991   .debug_str:0000000000000545 .LASF94
     /tmp/ccQPIkfG.s:4203   .debug_str:0000000000000be0 .LASF95
     /tmp/ccQPIkfG.s:4147   .debug_str:0000000000000a18 .LASF96
     /tmp/ccQPIkfG.s:4145   .debug_str:0000000000000a0e .LASF97
     /tmp/ccQPIkfG.s:4123   .debug_str:00000000000009a3 .LASF98
     /tmp/ccQPIkfG.s:4047   .debug_str:00000000000006bc .LASF99
     /tmp/ccQPIkfG.s:4093   .debug_str:00000000000007fe .LASF111
     /tmp/ccQPIkfG.s:3855   .debug_str:00000000000000ea .LASF101
     /tmp/ccQPIkfG.s:3989   .debug_str:000000000000052c .LASF103
     /tmp/ccQPIkfG.s:3893   .debug_str:0000000000000227 .LASF104
     /tmp/ccQPIkfG.s:3871   .debug_str:000000000000016e .LASF105
GAS LISTING /tmp/ccQPIkfG.s 			page 32


     /tmp/ccQPIkfG.s:3885   .debug_str:00000000000001dd .LASF190
     /tmp/ccQPIkfG.s:3831   .debug_str:0000000000000037 .LASF191
     /tmp/ccQPIkfG.s:4033   .debug_str:000000000000064f .LASF106
     /tmp/ccQPIkfG.s:4133   .debug_str:00000000000009cf .LASF108
     /tmp/ccQPIkfG.s:3851   .debug_str:00000000000000d9 .LASF109
     /tmp/ccQPIkfG.s:3883   .debug_str:00000000000001d8 .LASF110
     /tmp/ccQPIkfG.s:3895   .debug_str:0000000000000230 .LASF112
     /tmp/ccQPIkfG.s:4131   .debug_str:00000000000009ca .LASF113
     /tmp/ccQPIkfG.s:4165   .debug_str:0000000000000abc .LASF114
     /tmp/ccQPIkfG.s:4169   .debug_str:0000000000000ae9 .LASF115
     /tmp/ccQPIkfG.s:3973   .debug_str:00000000000004c9 .LASF116
     /tmp/ccQPIkfG.s:4159   .debug_str:0000000000000a77 .LASF117
     /tmp/ccQPIkfG.s:4007   .debug_str:00000000000005b3 .LASF118
     /tmp/ccQPIkfG.s:3839   .debug_str:000000000000007d .LASF119
     /tmp/ccQPIkfG.s:3945   .debug_str:00000000000003d6 .LASF120
     /tmp/ccQPIkfG.s:4049   .debug_str:00000000000006c4 .LASF121
     /tmp/ccQPIkfG.s:3849   .debug_str:00000000000000d4 .LASF122
     /tmp/ccQPIkfG.s:4065   .debug_str:0000000000000743 .LASF123
     /tmp/ccQPIkfG.s:4061   .debug_str:0000000000000727 .LASF124
     /tmp/ccQPIkfG.s:4039   .debug_str:000000000000067e .LASF125
     /tmp/ccQPIkfG.s:4021   .debug_str:00000000000005f5 .LASF126
     /tmp/ccQPIkfG.s:4103   .debug_str:000000000000085b .LASF127
     /tmp/ccQPIkfG.s:4161   .debug_str:0000000000000a9e .LASF192
     /tmp/ccQPIkfG.s:3915   .debug_str:00000000000002de .LASF128
     /tmp/ccQPIkfG.s:4019   .debug_str:00000000000005f0 .LASF129
     /tmp/ccQPIkfG.s:4013   .debug_str:00000000000005cc .LASF130
     /tmp/ccQPIkfG.s:4121   .debug_str:0000000000000990 .LASF131
     /tmp/ccQPIkfG.s:3903   .debug_str:000000000000025e .LASF132
     /tmp/ccQPIkfG.s:4079   .debug_str:00000000000007a8 .LASF193
     /tmp/ccQPIkfG.s:4063   .debug_str:000000000000072c .LASF194
     /tmp/ccQPIkfG.s:3975   .debug_str:00000000000004d8 .LASF133
     /tmp/ccQPIkfG.s:3861   .debug_str:0000000000000110 .LASF134
     /tmp/ccQPIkfG.s:3997   .debug_str:0000000000000561 .LASF135
     /tmp/ccQPIkfG.s:3907   .debug_str:000000000000028b .LASF136
     /tmp/ccQPIkfG.s:4035   .debug_str:000000000000065f .LASF137
     /tmp/ccQPIkfG.s:4173   .debug_str:0000000000000b01 .LASF138
     /tmp/ccQPIkfG.s:4213   .debug_str:0000000000000c1e .LASF139
     /tmp/ccQPIkfG.s:3877   .debug_str:00000000000001a4 .LASF140
     /tmp/ccQPIkfG.s:4095   .debug_str:000000000000080f .LASF141
     /tmp/ccQPIkfG.s:3967   .debug_str:0000000000000486 .LASF142
     /tmp/ccQPIkfG.s:4045   .debug_str:00000000000006b3 .LASF143
     /tmp/ccQPIkfG.s:3829   .debug_str:000000000000001d .LASF144
     /tmp/ccQPIkfG.s:4067   .debug_str:000000000000075f .LASF145
     /tmp/ccQPIkfG.s:3891   .debug_str:0000000000000215 .LASF146
     /tmp/ccQPIkfG.s:3881   .debug_str:00000000000001c6 .LASF147
     /tmp/ccQPIkfG.s:4155   .debug_str:0000000000000a5b .LASF148
     /tmp/ccQPIkfG.s:3843   .debug_str:00000000000000a7 .LASF149
     /tmp/ccQPIkfG.s:3985   .debug_str:0000000000000515 .LASF150
     /tmp/ccQPIkfG.s:4195   .debug_str:0000000000000b81 .LASF151
     /tmp/ccQPIkfG.s:3867   .debug_str:000000000000014c .LASF152
     /tmp/ccQPIkfG.s:3925   .debug_str:0000000000000313 .LASF153
     /tmp/ccQPIkfG.s:4141   .debug_str:00000000000009f5 .LASF154
     /tmp/ccQPIkfG.s:3847   .debug_str:00000000000000bf .LASF155
     /tmp/ccQPIkfG.s:4119   .debug_str:0000000000000989 .LASF156
     /tmp/ccQPIkfG.s:3927   .debug_str:0000000000000333 .LASF157
     /tmp/ccQPIkfG.s:4113   .debug_str:0000000000000964 .LASF158
     /tmp/ccQPIkfG.s:4105   .debug_str:000000000000086f .LASF159
GAS LISTING /tmp/ccQPIkfG.s 			page 33


     /tmp/ccQPIkfG.s:3993   .debug_str:000000000000054e .LASF160
     /tmp/ccQPIkfG.s:3965   .debug_str:000000000000046a .LASF161
     /tmp/ccQPIkfG.s:4109   .debug_str:000000000000094b .LASF162
     /tmp/ccQPIkfG.s:3941   .debug_str:00000000000003be .LASF163
     /tmp/ccQPIkfG.s:4175   .debug_str:0000000000000b1f .LASF164
     /tmp/ccQPIkfG.s:3949   .debug_str:00000000000003f7 .LASF165
     /tmp/ccQPIkfG.s:3901   .debug_str:0000000000000248 .LASF166
     /tmp/ccQPIkfG.s:3827   .debug_str:0000000000000015 .LASF167
     /tmp/ccQPIkfG.s:3887   .debug_str:00000000000001eb .LASF168
     /tmp/ccQPIkfG.s:51     .text:0000000000000020 .LFB42
     /tmp/ccQPIkfG.s:778    .text:00000000000002c8 .LFE42
     /tmp/ccQPIkfG.s:3525   .debug_loc:0000000000000000 .LLST0
     /tmp/ccQPIkfG.s:3879   .debug_str:00000000000001bf .LASF169
     /tmp/ccQPIkfG.s:3536   .debug_loc:0000000000000036 .LLST1
     /tmp/ccQPIkfG.s:3807   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccQPIkfG.s:4179   .debug_str:0000000000000b2c .LASF170
     /tmp/ccQPIkfG.s:4183   .debug_str:0000000000000b3b .LASF171
     /tmp/ccQPIkfG.s:3627   .debug_loc:000000000000018e .LLST6
     /tmp/ccQPIkfG.s:4059   .debug_str:000000000000071f .LASF172
     /tmp/ccQPIkfG.s:3658   .debug_loc:0000000000000223 .LLST7
     /tmp/ccQPIkfG.s:3665   .debug_loc:0000000000000246 .LLST8
     /tmp/ccQPIkfG.s:3688   .debug_loc:00000000000002b5 .LLST9
     /tmp/ccQPIkfG.s:3859   .debug_str:0000000000000108 .LASF173
     /tmp/ccQPIkfG.s:3695   .debug_loc:00000000000002d8 .LLST10
     /tmp/ccQPIkfG.s:3897   .debug_str:000000000000023c .LASF174
     /tmp/ccQPIkfG.s:3702   .debug_loc:00000000000002fb .LLST11
     /tmp/ccQPIkfG.s:4009   .debug_str:00000000000005bd .LASF175
     /tmp/ccQPIkfG.s:3709   .debug_loc:000000000000031e .LLST12
     /tmp/ccQPIkfG.s:3977   .debug_str:00000000000004e1 .LASF176
     /tmp/ccQPIkfG.s:3716   .debug_loc:0000000000000341 .LLST13
     /tmp/ccQPIkfG.s:3723   .debug_loc:0000000000000364 .LLST14
     /tmp/ccQPIkfG.s:4011   .debug_str:00000000000005c4 .LASF177
     /tmp/ccQPIkfG.s:3730   .debug_loc:0000000000000387 .LLST15
     /tmp/ccQPIkfG.s:3845   .debug_str:00000000000000ba .LASF178
     /tmp/ccQPIkfG.s:3737   .debug_loc:00000000000003aa .LLST16
     /tmp/ccQPIkfG.s:3744   .debug_loc:00000000000003cd .LLST17
     /tmp/ccQPIkfG.s:269    .text:00000000000000f8 .LVL8
     /tmp/ccQPIkfG.s:353    .text:0000000000000130 .LVL16
     /tmp/ccQPIkfG.s:404    .text:0000000000000154 .LVL22
     /tmp/ccQPIkfG.s:438    .text:000000000000017c .LVL26
     /tmp/ccQPIkfG.s:463    .text:000000000000019c .LVL28
     /tmp/ccQPIkfG.s:488    .text:00000000000001b4 .LVL32
     /tmp/ccQPIkfG.s:530    .text:00000000000001e0 .LVL37
     /tmp/ccQPIkfG.s:561    .text:00000000000001fc .LVL40
     /tmp/ccQPIkfG.s:596    .text:000000000000021c .LVL44
     /tmp/ccQPIkfG.s:625    .text:0000000000000234 .LVL47
     /tmp/ccQPIkfG.s:156    .text:00000000000000a4 .LBB52
     /tmp/ccQPIkfG.s:172    .text:00000000000000b0 .LBE52
     /tmp/ccQPIkfG.s:178    .text:00000000000000b8 .LBB54
     /tmp/ccQPIkfG.s:193    .text:00000000000000c4 .LBE54
     /tmp/ccQPIkfG.s:290    .text:0000000000000104 .LBB57
     /tmp/ccQPIkfG.s:301    .text:0000000000000108 .LBE57
     /tmp/ccQPIkfG.s:3751   .debug_loc:00000000000003f0 .LLST18
     /tmp/ccQPIkfG.s:306    .text:000000000000010c .LBB59
     /tmp/ccQPIkfG.s:318    .text:0000000000000110 .LBE59
     /tmp/ccQPIkfG.s:3758   .debug_loc:0000000000000413 .LLST19
     /tmp/ccQPIkfG.s:645    .text:0000000000000240 .LBB38
GAS LISTING /tmp/ccQPIkfG.s 			page 34


     /tmp/ccQPIkfG.s:769    .text:00000000000002bc .LBE38
     /tmp/ccQPIkfG.s:647    .text:0000000000000240 .LBB39
     /tmp/ccQPIkfG.s:659    .text:0000000000000248 .LBE39
     /tmp/ccQPIkfG.s:3765   .debug_loc:0000000000000436 .LLST2
     /tmp/ccQPIkfG.s:661    .text:0000000000000248 .LBB41
     /tmp/ccQPIkfG.s:676    .text:0000000000000254 .LBE41
     /tmp/ccQPIkfG.s:680    .text:0000000000000258 .LBB43
     /tmp/ccQPIkfG.s:695    .text:0000000000000264 .LBE43
     /tmp/ccQPIkfG.s:710    .text:0000000000000288 .LBB45
     /tmp/ccQPIkfG.s:718    .text:000000000000028c .LBE45
     /tmp/ccQPIkfG.s:3773   .debug_loc:000000000000045a .LLST3
     /tmp/ccQPIkfG.s:727    .text:0000000000000294 .LBB47
     /tmp/ccQPIkfG.s:738    .text:0000000000000298 .LBE47
     /tmp/ccQPIkfG.s:3780   .debug_loc:000000000000047d .LLST4
     /tmp/ccQPIkfG.s:743    .text:000000000000029c .LBB49
     /tmp/ccQPIkfG.s:757    .text:00000000000002a4 .LBE49
     /tmp/ccQPIkfG.s:3787   .debug_loc:00000000000004a0 .LLST5
     /tmp/ccQPIkfG.s:765    .text:00000000000002b8 .LVL58
     /tmp/ccQPIkfG.s:65     .text:0000000000000034 .LBB32
     /tmp/ccQPIkfG.s:82     .text:0000000000000040 .LBE32
     /tmp/ccQPIkfG.s:84     .text:0000000000000040 .LBB34
     /tmp/ccQPIkfG.s:100    .text:000000000000004c .LBE34
     /tmp/ccQPIkfG.s:129    .text:0000000000000090 .LVL3
     /tmp/ccQPIkfG.s:773    .text:00000000000002c4 .LVL60
     /tmp/ccQPIkfG.s:10     .text:0000000000000000 .LFB41
     /tmp/ccQPIkfG.s:40     .text:0000000000000020 .LFE41
     /tmp/ccQPIkfG.s:3919   .debug_str:00000000000002f2 .LASF195
     /tmp/ccQPIkfG.s:4167   .debug_str:0000000000000ae4 .LASF179
     /tmp/ccQPIkfG.s:3873   .debug_str:0000000000000181 .LASF180
     /tmp/ccQPIkfG.s:4199   .debug_str:0000000000000bb6 .LASF182
     /tmp/ccQPIkfG.s:3929   .debug_str:000000000000034a .LASF181
     /tmp/ccQPIkfG.s:80     .text:0000000000000040 .LVL0
     /tmp/ccQPIkfG.s:113    .text:000000000000005c .LVL2
     /tmp/ccQPIkfG.s:151    .text:00000000000000a4 .LVL4
     /tmp/ccQPIkfG.s:203    .text:00000000000000d4 .LVL6
     /tmp/ccQPIkfG.s:98     .text:000000000000004c .LVL1
     /tmp/ccQPIkfG.s:165    .text:00000000000000a8 .LVL5
     /tmp/ccQPIkfG.s:333    .text:0000000000000124 .LVL14
     /tmp/ccQPIkfG.s:368    .text:000000000000013c .LVL17
     /tmp/ccQPIkfG.s:399    .text:000000000000014c .LVL21
     /tmp/ccQPIkfG.s:432    .text:0000000000000174 .LVL25
     /tmp/ccQPIkfG.s:453    .text:0000000000000188 .LVL27
     /tmp/ccQPIkfG.s:466    .text:00000000000001a0 .LVL29
     /tmp/ccQPIkfG.s:516    .text:00000000000001d4 .LVL35
     /tmp/ccQPIkfG.s:545    .text:00000000000001ec .LVL38
     /tmp/ccQPIkfG.s:577    .text:0000000000000208 .LVL41
     /tmp/ccQPIkfG.s:611    .text:0000000000000228 .LVL45
     /tmp/ccQPIkfG.s:640    .text:0000000000000240 .LVL48
     /tmp/ccQPIkfG.s:701    .text:0000000000000270 .LVL50
     /tmp/ccQPIkfG.s:721    .text:0000000000000290 .LVL53
     /tmp/ccQPIkfG.s:754    .text:00000000000002a4 .LVL57
     /tmp/ccQPIkfG.s:767    .text:00000000000002bc .LVL59
     /tmp/ccQPIkfG.s:412    .text:0000000000000160 .LVL23
     /tmp/ccQPIkfG.s:427    .text:000000000000016c .LVL24
     /tmp/ccQPIkfG.s:496    .text:00000000000001c0 .LVL33
     /tmp/ccQPIkfG.s:511    .text:00000000000001cc .LVL34
     /tmp/ccQPIkfG.s:476    .text:00000000000001a4 .LVL30
GAS LISTING /tmp/ccQPIkfG.s 			page 35


     /tmp/ccQPIkfG.s:525    .text:00000000000001d8 .LVL36
     /tmp/ccQPIkfG.s:554    .text:00000000000001f0 .LVL39
     /tmp/ccQPIkfG.s:581    .text:000000000000020c .LVL42
     /tmp/ccQPIkfG.s:591    .text:0000000000000214 .LVL43
     /tmp/ccQPIkfG.s:620    .text:000000000000022c .LVL46
     /tmp/ccQPIkfG.s:264    .text:00000000000000f0 .LVL7
     /tmp/ccQPIkfG.s:282    .text:0000000000000100 .LVL9
     /tmp/ccQPIkfG.s:348    .text:0000000000000128 .LVL15
     /tmp/ccQPIkfG.s:387    .text:0000000000000144 .LVL19
     /tmp/ccQPIkfG.s:393    .text:0000000000000148 .LVL20
     /tmp/ccQPIkfG.s:381    .text:0000000000000140 .LVL18
     /tmp/ccQPIkfG.s:482    .text:00000000000001a8 .LVL31
     /tmp/ccQPIkfG.s:289    .text:0000000000000104 .LVL10
     /tmp/ccQPIkfG.s:298    .text:0000000000000108 .LVL11
     /tmp/ccQPIkfG.s:305    .text:000000000000010c .LVL12
     /tmp/ccQPIkfG.s:314    .text:0000000000000110 .LVL13
     /tmp/ccQPIkfG.s:656    .text:0000000000000248 .LVL49
     /tmp/ccQPIkfG.s:709    .text:0000000000000288 .LVL51
     /tmp/ccQPIkfG.s:716    .text:000000000000028c .LVL52
     /tmp/ccQPIkfG.s:726    .text:0000000000000294 .LVL54
     /tmp/ccQPIkfG.s:735    .text:0000000000000298 .LVL55
     /tmp/ccQPIkfG.s:742    .text:000000000000029c .LVL56
     /tmp/ccQPIkfG.s:789    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccQPIkfG.s:154    .text:00000000000000a4 .LBB51
     /tmp/ccQPIkfG.s:319    .text:0000000000000110 .LBE51
     /tmp/ccQPIkfG.s:337    .text:0000000000000124 .LBB62
     /tmp/ccQPIkfG.s:643    .text:0000000000000240 .LBE62
     /tmp/ccQPIkfG.s:254    .text:00000000000000ec .LBB56
     /tmp/ccQPIkfG.s:285    .text:0000000000000100 .LBE56
     /tmp/ccQPIkfG.s:338    .text:0000000000000124 .LBB61
     /tmp/ccQPIkfG.s:642    .text:0000000000000240 .LBE61

UNDEFINED SYMBOLS
_Z11printStringPKc
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPKv
_ZN3TCB12createThreadEPFvPvES0_S0_
_ZN3TCB10exitThreadEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN9semaphore13openSemaphoreEi
_ZN9semaphore14closeSemaphoreEv
_ZN9semaphore4waitEv
_ZN9semaphore6signalEv
_ZN9semaphore7trywaitEv
_ZN3TCB7runningE
console_handler
