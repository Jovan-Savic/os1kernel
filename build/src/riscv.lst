GAS LISTING /tmp/ccOpcMyL.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB43:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by os on 5/17/24.
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   7:src/riscv.cpp **** 
   8:src/riscv.cpp **** 
   9:src/riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 9 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  10:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 10 5
  21              		.loc 1 10 38 is_stmt 0
  22              	#APP
  23              	# 10 "src/riscv.cpp" 1
  11              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 11 5 is_stmt 1
  27              		.loc 1 11 29 is_stmt 0
  28              	# 11 "src/riscv.cpp" 1
  12              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 12 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE43:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB44:
  13:src/riscv.cpp **** 
  14:src/riscv.cpp **** void Riscv::handleSupervisorTrap() {
GAS LISTING /tmp/ccOpcMyL.s 			page 2


  47              		.loc 1 14 36 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F8 		addi	sp,sp,-128
  50              		.cfi_def_cfa_offset 128
  51 0024 233C1106 		sd	ra,120(sp)
  52 0028 23388106 		sd	s0,112(sp)
  53 002c 23349106 		sd	s1,104(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57 0030 13040108 		addi	s0,sp,128
  58              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp **** 
  16:src/riscv.cpp ****     uint64 ra = r_a0();
  59              		.loc 1 16 5
  60              	.LBB38:
  61              	.LBB39:
  62              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../lib/console.h"
  10:src/../h/riscv.hpp **** #include "print.hpp"
  11:src/../h/riscv.hpp **** #include "tcb.hpp"
  12:src/../h/riscv.hpp **** #include "MemoryAllocator.hpp"
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     //pop sstatus spp and sstatus spie
  18:src/../h/riscv.hpp ****     static void popSppSpie();
  19:src/../h/riscv.hpp ****     //push x3..31 registers
  20:src/../h/riscv.hpp ****     static void pushRegisters();
  21:src/../h/riscv.hpp ****     //pop x3..31 regiesters
  22:src/../h/riscv.hpp ****     static void popRegisters();
  23:src/../h/riscv.hpp **** 
  24:src/../h/riscv.hpp ****     // read register scause
  25:src/../h/riscv.hpp ****     static uint64 r_scause();
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // write register scause
  28:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // read register sepc
  31:src/../h/riscv.hpp ****     static uint64 r_sepc();
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // write register sepc
  34:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // read register stvec
  37:src/../h/riscv.hpp ****     static uint64 r_stvec();
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // write register stvec
GAS LISTING /tmp/ccOpcMyL.s 			page 3


  40:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // read register stval
  43:src/../h/riscv.hpp ****     static uint64 r_stval();
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // write register stval
  46:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     enum BitMaskSip
  49:src/../h/riscv.hpp ****     {
  50:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  51:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  52:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  53:src/../h/riscv.hpp ****     };
  54:src/../h/riscv.hpp **** 
  55:src/../h/riscv.hpp ****     // mask set register sip
  56:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // mask clear register sip
  59:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // read register sip
  62:src/../h/riscv.hpp ****     static uint64 r_sip();
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // write register sip
  65:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     enum BitMaskSstatus
  68:src/../h/riscv.hpp ****     {
  69:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  70:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  71:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  72:src/../h/riscv.hpp ****     };
  73:src/../h/riscv.hpp **** 
  74:src/../h/riscv.hpp ****     // mask set register sstatus
  75:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // mask clear register sstatus
  78:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // read register sstatus
  81:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // write register sstatus
  84:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     //read a0 register
  87:src/../h/riscv.hpp ****     static uint64 r_a0();
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     //write to a0 register
  90:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp ****     static void supervisorTrap();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp **** private:
  95:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  96:src/../h/riscv.hpp **** };
GAS LISTING /tmp/ccOpcMyL.s 			page 4


  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 100:src/../h/riscv.hpp **** {
 101:src/../h/riscv.hpp ****     uint64 volatile scause;
 102:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 103:src/../h/riscv.hpp ****     return scause;
 104:src/../h/riscv.hpp **** }
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 107:src/../h/riscv.hpp **** {
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     uint64 volatile sepc;
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 115:src/../h/riscv.hpp ****     return sepc;
 116:src/../h/riscv.hpp **** }
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 119:src/../h/riscv.hpp **** {
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     uint64 volatile stvec;
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 127:src/../h/riscv.hpp ****     return stvec;
 128:src/../h/riscv.hpp **** }
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 131:src/../h/riscv.hpp **** {
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     uint64 volatile stval;
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 139:src/../h/riscv.hpp ****     return stval;
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccOpcMyL.s 			page 5


 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     uint64 volatile sip;
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 161:src/../h/riscv.hpp ****     return sip;
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 183:src/../h/riscv.hpp ****     return sstatus;
 184:src/../h/riscv.hpp **** }
 185:src/../h/riscv.hpp **** 
 186:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 187:src/../h/riscv.hpp **** {
 188:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** //a0
 192:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 193:src/../h/riscv.hpp **** {
 194:src/../h/riscv.hpp ****     uint64 volatile a0;
  63              		.loc 2 194 5
 195:src/../h/riscv.hpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
  64              		.loc 2 195 5
  65              		.loc 2 195 46 is_stmt 0
  66              	#APP
  67              	# 195 "src/../h/riscv.hpp" 1
 196              	    return a0;
  68              		mv a5, a0
  69              	# 0 "" 2
  70              	#NO_APP
  71 0038 2334F4FA 		sd	a5,-88(s0)
  72              		.loc 2 196 5 is_stmt 1
  73              		.loc 2 196 12 is_stmt 0
  74 003c 833784FA 		ld	a5,-88(s0)
  75              	.LVL0:
  76              	.LBE39:
GAS LISTING /tmp/ccOpcMyL.s 			page 6


  77              	.LBE38:
  17:src/riscv.cpp ****     uint64 scause = r_scause();
  78              		.loc 1 17 5 is_stmt 1
  79              	.LBB40:
  80              	.LBB41:
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  81              		.loc 2 101 5
 102:src/../h/riscv.hpp ****     return scause;
  82              		.loc 2 102 5
 102:src/../h/riscv.hpp ****     return scause;
  83              		.loc 2 102 72 is_stmt 0
  84              	#APP
  85              	# 102 "src/../h/riscv.hpp" 1
  86              		csrr a4, scause
  87              	# 0 "" 2
  88              	#NO_APP
  89 0044 2330E4FA 		sd	a4,-96(s0)
 103:src/../h/riscv.hpp **** }
  90              		.loc 2 103 5 is_stmt 1
 103:src/../h/riscv.hpp **** }
  91              		.loc 2 103 12 is_stmt 0
  92 0048 033504FA 		ld	a0,-96(s0)
  93              	.LVL1:
  94              	.LBE41:
  95              	.LBE40:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){//pomera registar a3??
  96              		.loc 1 19 5 is_stmt 1
  97              	.LBB42:
  98              		.loc 1 19 39 is_stmt 0
  99 004c 930685FF 		addi	a3,a0,-8
 100              		.loc 1 19 5
 101 0050 13071000 		li	a4,1
 102 0054 637CD704 		bleu	a3,a4,.L25
 103              	.LBE42:
  20:src/riscv.cpp ****         //environment call
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  23:src/riscv.cpp ****         int ret;
  24:src/riscv.cpp ****         sem_t * shandle;
  25:src/riscv.cpp ****         sem_t id;
  26:src/riscv.cpp ****         switch (ra) {
  27:src/riscv.cpp ****             case 0x01:
  28:src/riscv.cpp ****                 size_t size;
  29:src/riscv.cpp ****                 void *mallocr;
  30:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
  31:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
  32:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
  33:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  34:src/riscv.cpp ****                 break;
  35:src/riscv.cpp **** 
  36:src/riscv.cpp ****             case 0x02:
  37:src/riscv.cpp ****                 void *freep;
  38:src/riscv.cpp ****                 int greska;
  39:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
  40:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
  41:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
GAS LISTING /tmp/ccOpcMyL.s 			page 7


  42:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  43:src/riscv.cpp ****                 break;
  44:src/riscv.cpp **** 
  45:src/riscv.cpp ****             case 0x11:
  46:src/riscv.cpp ****                 TCB::Body start_routine;
  47:src/riscv.cpp ****                 void* arg;
  48:src/riscv.cpp ****                 thread_t* thandle;
  49:src/riscv.cpp ****                 void* stek;
  50:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
  51:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
  53:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
  54:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
  55:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
  56:src/riscv.cpp ****                 else ret = -1;
  57:src/riscv.cpp **** 
  58:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  59:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  60:src/riscv.cpp ****                 break;
  61:src/riscv.cpp **** 
  62:src/riscv.cpp ****             case 0x12:
  63:src/riscv.cpp ****                 ret = TCB::exitThread();
  64:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  65:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  66:src/riscv.cpp ****                 break;
  67:src/riscv.cpp **** 
  68:src/riscv.cpp ****             case 0x13:
  69:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
  70:src/riscv.cpp ****                 TCB::dispatch();
  71:src/riscv.cpp ****                 break;
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****             case 0x21:
  74:src/riscv.cpp ****                 int val;
  75:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
  76:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
  77:src/riscv.cpp ****                 *shandle = sem::openSemaphore(val);
  78:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
  79:src/riscv.cpp ****                 else ret = -1;
  80:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  81:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  82:src/riscv.cpp ****                 break;
  83:src/riscv.cpp **** 
  84:src/riscv.cpp ****             case 0x22:
  85:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
  86:src/riscv.cpp ****                 ret = id->sem::closeSemaphore();
  87:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  88:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  89:src/riscv.cpp ****                 break;
  90:src/riscv.cpp **** 
  91:src/riscv.cpp ****             case 0x23:
  92:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
  93:src/riscv.cpp ****                 ret = id->sem::wait();
  94:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  95:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  96:src/riscv.cpp ****                 break;
  97:src/riscv.cpp **** 
  98:src/riscv.cpp ****             case 0x24:
GAS LISTING /tmp/ccOpcMyL.s 			page 8


  99:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 100:src/riscv.cpp ****                 ret = id->sem::signal();
 101:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 102:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 103:src/riscv.cpp ****                 break;
 104:src/riscv.cpp **** 
 105:src/riscv.cpp ****             case 0x26:
 106:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 107:src/riscv.cpp ****                 ret = id->sem::trywait();
 108:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 109:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 110:src/riscv.cpp ****                 break;
 111:src/riscv.cpp ****             default:
 112:src/riscv.cpp ****                     break;
 113:src/riscv.cpp **** 
 114:src/riscv.cpp ****         }
 115:src/riscv.cpp **** 
 116:src/riscv.cpp ****         w_sstatus(sstatus);
 117:src/riscv.cpp ****         w_sepc(sepc);
 118:src/riscv.cpp ****     }
 119:src/riscv.cpp ****     else if(scause == 0x8000000000000001UL){
 104              		.loc 1 119 10 is_stmt 1
 105              	.LBB76:
 106              	.LBB43:
 107 0058 9307F0FF 		li	a5,-1
 108              	.LVL2:
 109 005c 9397F703 		slli	a5,a5,63
 110 0060 93871700 		addi	a5,a5,1
 111 0064 630CF51C 		beq	a0,a5,.L26
 120:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 121:src/riscv.cpp ****         TCB::timeSliceCounter++;
 122:src/riscv.cpp ****         //supervisor software interrupt; timer
 123:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 124:src/riscv.cpp **** 
 125:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 126:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 127:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 128:src/riscv.cpp ****             TCB::dispatch();
 129:src/riscv.cpp ****             w_sstatus(sstatus);
 130:src/riscv.cpp ****             w_sepc(sepc);
 131:src/riscv.cpp ****         }
 132:src/riscv.cpp **** 
 133:src/riscv.cpp **** 
 134:src/riscv.cpp ****     }else if(scause == 0x8000000000000009UL){
 112              		.loc 1 134 11
 113 0068 9307F0FF 		li	a5,-1
 114 006c 9397F703 		slli	a5,a5,63
 115 0070 93879700 		addi	a5,a5,9
 116 0074 6300F524 		beq	a0,a5,.L27
 135:src/riscv.cpp ****         // supervisor external interrupt; console
 136:src/riscv.cpp **** 
 137:src/riscv.cpp ****         console_handler();
 138:src/riscv.cpp ****     }else{
 139:src/riscv.cpp ****         //unexpected interrupt;
 140:src/riscv.cpp ****         printInteger(scause);
 117              		.loc 1 140 9
 118              		.loc 1 140 21 is_stmt 0
GAS LISTING /tmp/ccOpcMyL.s 			page 9


 119 0078 97000000 		call	_Z12printIntegerm@plt
 119      E7800000 
 120              	.LVL3:
 141:src/riscv.cpp ****         printInteger(r_sepc());
 121              		.loc 1 141 9 is_stmt 1
 122              	.LBB44:
 123              	.LBB45:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 124              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 125              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 126              		.loc 2 114 64 is_stmt 0
 127              	#APP
 128              	# 114 "src/../h/riscv.hpp" 1
 129              		csrr a5, sepc
 130              	# 0 "" 2
 131              	#NO_APP
 132 0084 233CF4FC 		sd	a5,-40(s0)
 115:src/../h/riscv.hpp **** }
 133              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 134              		.loc 2 115 12 is_stmt 0
 135 0088 033584FD 		ld	a0,-40(s0)
 136              	.LBE45:
 137              	.LBE44:
 138              		.loc 1 141 21
 139 008c 97000000 		call	_Z12printIntegerm@plt
 139      E7800000 
 140              	.LVL4:
 142:src/riscv.cpp ****         printInteger(r_stval());
 141              		.loc 1 142 9 is_stmt 1
 142              	.LBB46:
 143              	.LBB47:
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 144              		.loc 2 137 5
 138:src/../h/riscv.hpp ****     return stval;
 145              		.loc 2 138 5
 138:src/../h/riscv.hpp ****     return stval;
 146              		.loc 2 138 68 is_stmt 0
 147              	#APP
 148              	# 138 "src/../h/riscv.hpp" 1
 149              		csrr a5, stval
 150              	# 0 "" 2
 151              	#NO_APP
 152 0098 2338F4FC 		sd	a5,-48(s0)
 139:src/../h/riscv.hpp **** }
 153              		.loc 2 139 5 is_stmt 1
 139:src/../h/riscv.hpp **** }
 154              		.loc 2 139 12 is_stmt 0
 155 009c 033504FD 		ld	a0,-48(s0)
 156              	.LBE47:
 157              	.LBE46:
 158              		.loc 1 142 21
 159 00a0 97000000 		call	_Z12printIntegerm@plt
 159      E7800000 
 160              	.LVL5:
GAS LISTING /tmp/ccOpcMyL.s 			page 10


 161              	.LBE43:
 162              	.LBE76:
 143:src/riscv.cpp ****     }
 144:src/riscv.cpp **** };...
 163              		.loc 1 144 1
 164 00a8 6F000007 		j	.L3
 165              	.LVL6:
 166              	.L25:
 167              	.LBB77:
 168              	.LBB63:
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 169              		.loc 1 21 9 is_stmt 1
 170              	.LBB64:
 171              	.LBB65:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 172              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 173              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 174              		.loc 2 114 64 is_stmt 0
 175              	#APP
 176              	# 114 "src/../h/riscv.hpp" 1
 177              		csrr a4, sepc
 178              	# 0 "" 2
 179              	#NO_APP
 180 00b0 233CE4FA 		sd	a4,-72(s0)
 115:src/../h/riscv.hpp **** }
 181              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 182              		.loc 2 115 12 is_stmt 0
 183 00b4 033784FB 		ld	a4,-72(s0)
 184              	.LBE65:
 185              	.LBE64:
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 186              		.loc 1 21 41
 187 00b8 13074700 		addi	a4,a4,4
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 188              		.loc 1 21 42
 189 00bc 2330E4F8 		sd	a4,-128(s0)
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 190              		.loc 1 22 9 is_stmt 1
 191              	.LBB66:
 192              	.LBB67:
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 193              		.loc 2 181 5
 182:src/../h/riscv.hpp ****     return sstatus;
 194              		.loc 2 182 5
 182:src/../h/riscv.hpp ****     return sstatus;
 195              		.loc 2 182 76 is_stmt 0
 196              	#APP
 197              	# 182 "src/../h/riscv.hpp" 1
 198              		csrr a4, sstatus
 199              	# 0 "" 2
 200              	#NO_APP
 201 00c4 2338E4FA 		sd	a4,-80(s0)
 183:src/../h/riscv.hpp **** }
 202              		.loc 2 183 5 is_stmt 1
GAS LISTING /tmp/ccOpcMyL.s 			page 11


 183:src/../h/riscv.hpp **** }
 203              		.loc 2 183 12 is_stmt 0
 204 00c8 033704FB 		ld	a4,-80(s0)
 205              	.LBE67:
 206              	.LBE66:
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 207              		.loc 1 22 45
 208 00cc 2334E4F8 		sd	a4,-120(s0)
  23:src/riscv.cpp ****         int ret;
 209              		.loc 1 23 9 is_stmt 1
  24:src/riscv.cpp ****         sem_t * shandle;
 210              		.loc 1 24 9
  25:src/riscv.cpp ****         sem_t id;
 211              		.loc 1 25 9
  26:src/riscv.cpp ****         switch (ra) {
 212              		.loc 1 26 9
 213 00d0 13076002 		li	a4,38
 214 00d4 636AF702 		bgtu	a5,a4,.L5
 215 00d8 93972700 		slli	a5,a5,2
 216              	.LVL7:
 217 00dc 17070000 		lla	a4,.L7
 217      13070700 
 218 00e4 B387E700 		add	a5,a5,a4
 219 00e8 83A70700 		lw	a5,0(a5)
 220 00ec B387E700 		add	a5,a5,a4
 221 00f0 67800700 		jr	a5
 222              		.section	.rodata
 223              		.align	2
 224              		.align	2
 225              	.L7:
 226 0000 00000000 		.word	.L5-.L7
 227 0004 00000000 		.word	.L16-.L7
 228 0008 00000000 		.word	.L15-.L7
 229 000c 00000000 		.word	.L5-.L7
 230 0010 00000000 		.word	.L5-.L7
 231 0014 00000000 		.word	.L5-.L7
 232 0018 00000000 		.word	.L5-.L7
 233 001c 00000000 		.word	.L5-.L7
 234 0020 00000000 		.word	.L5-.L7
 235 0024 00000000 		.word	.L5-.L7
 236 0028 00000000 		.word	.L5-.L7
 237 002c 00000000 		.word	.L5-.L7
 238 0030 00000000 		.word	.L5-.L7
 239 0034 00000000 		.word	.L5-.L7
 240 0038 00000000 		.word	.L5-.L7
 241 003c 00000000 		.word	.L5-.L7
 242 0040 00000000 		.word	.L5-.L7
 243 0044 00000000 		.word	.L14-.L7
 244 0048 00000000 		.word	.L13-.L7
 245 004c 00000000 		.word	.L12-.L7
 246 0050 00000000 		.word	.L5-.L7
 247 0054 00000000 		.word	.L5-.L7
 248 0058 00000000 		.word	.L5-.L7
 249 005c 00000000 		.word	.L5-.L7
 250 0060 00000000 		.word	.L5-.L7
 251 0064 00000000 		.word	.L5-.L7
 252 0068 00000000 		.word	.L5-.L7
GAS LISTING /tmp/ccOpcMyL.s 			page 12


 253 006c 00000000 		.word	.L5-.L7
 254 0070 00000000 		.word	.L5-.L7
 255 0074 00000000 		.word	.L5-.L7
 256 0078 00000000 		.word	.L5-.L7
 257 007c 00000000 		.word	.L5-.L7
 258 0080 00000000 		.word	.L5-.L7
 259 0084 00000000 		.word	.L11-.L7
 260 0088 00000000 		.word	.L10-.L7
 261 008c 00000000 		.word	.L9-.L7
 262 0090 00000000 		.word	.L8-.L7
 263 0094 00000000 		.word	.L5-.L7
 264 0098 00000000 		.word	.L6-.L7
 265              		.text
 266              	.L16:
 267              	.LBB68:
  27:src/riscv.cpp ****             case 0x01:
 268              		.loc 1 27 13
  28:src/riscv.cpp ****                 size_t size;
 269              		.loc 1 28 17
  29:src/riscv.cpp ****                 void *mallocr;
 270              		.loc 1 29 17
  30:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
 271              		.loc 1 30 17
  30:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
 272              		.loc 1 30 61 is_stmt 0
 273              	#APP
 274              	# 30 "src/riscv.cpp" 1
 275              		ld a0, 88(x8)
 276              	# 0 "" 2
 277              	.LVL8:
  31:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 278              		.loc 1 31 17 is_stmt 1
  31:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 279              		.loc 1 31 53 is_stmt 0
 280              	#NO_APP
 281 00f8 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 281      E7800000 
 282              	.LVL9:
  32:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 283              		.loc 1 32 17 is_stmt 1
  32:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 284              		.loc 1 32 60 is_stmt 0
 285              	#APP
 286              	# 32 "src/riscv.cpp" 1
  33:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 287              		mv t0, a0
 288              	# 0 "" 2
 289              		.loc 1 33 17 is_stmt 1
  33:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 290              		.loc 1 33 50 is_stmt 0
 291              	# 33 "src/riscv.cpp" 1
  34:src/riscv.cpp ****                 break;
 292              		sd t0, 80(x8)
 293              	# 0 "" 2
 294              		.loc 1 34 17 is_stmt 1
 295              	.LVL10:
 296              	#NO_APP
GAS LISTING /tmp/ccOpcMyL.s 			page 13


 297              	.L5:
 298              	.LBE68:
 116:src/riscv.cpp ****         w_sstatus(sstatus);
 299              		.loc 1 116 9
 116:src/riscv.cpp ****         w_sstatus(sstatus);
 300              		.loc 1 116 18 is_stmt 0
 301 0108 833784F8 		ld	a5,-120(s0)
 302              	.LVL11:
 303              	.LBB69:
 304              	.LBB70:
 188:src/../h/riscv.hpp **** }
 305              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 306              		.loc 2 188 77 is_stmt 0
 307              	#APP
 308              	# 188 "src/../h/riscv.hpp" 1
 309              		csrw sstatus, a5
 310              	# 0 "" 2
 311              	.LVL12:
 312              	#NO_APP
 313              	.LBE70:
 314              	.LBE69:
 117:src/riscv.cpp ****         w_sepc(sepc);
 315              		.loc 1 117 9 is_stmt 1
 117:src/riscv.cpp ****         w_sepc(sepc);
 316              		.loc 1 117 15 is_stmt 0
 317 0110 833704F8 		ld	a5,-128(s0)
 318              	.LVL13:
 319              	.LBB71:
 320              	.LBB72:
 120:src/../h/riscv.hpp **** }
 321              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 322              		.loc 2 120 65 is_stmt 0
 323              	#APP
 324              	# 120 "src/../h/riscv.hpp" 1
 325              		csrw sepc, a5
 326              	# 0 "" 2
 327              	.LVL14:
 328              	#NO_APP
 329              	.L3:
 330              	.LBE72:
 331              	.LBE71:
 332              	.LBE63:
 333              	.LBE77:
 334              		.loc 1 144 1
 335 0118 83308107 		ld	ra,120(sp)
 336              		.cfi_remember_state
 337              		.cfi_restore 1
 338 011c 03340107 		ld	s0,112(sp)
 339              		.cfi_restore 8
 340              		.cfi_def_cfa 2, 128
 341 0120 83348106 		ld	s1,104(sp)
 342              		.cfi_restore 9
 343 0124 13010108 		addi	sp,sp,128
 344              		.cfi_def_cfa_offset 0
 345 0128 67800000 		jr	ra
GAS LISTING /tmp/ccOpcMyL.s 			page 14


 346              	.LVL15:
 347              	.L15:
 348              		.cfi_restore_state
 349              	.LBB78:
 350              	.LBB74:
 351              	.LBB73:
  36:src/riscv.cpp ****             case 0x02:
 352              		.loc 1 36 13 is_stmt 1
  37:src/riscv.cpp ****                 void *freep;
 353              		.loc 1 37 17
  38:src/riscv.cpp ****                 int greska;
 354              		.loc 1 38 17
  39:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
 355              		.loc 1 39 17
  39:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
 356              		.loc 1 39 62 is_stmt 0
 357              	#APP
 358              	# 39 "src/riscv.cpp" 1
 359              		ld a0, 88(x8)
 360              	# 0 "" 2
 361              	.LVL16:
  40:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 362              		.loc 1 40 17 is_stmt 1
  40:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 363              		.loc 1 40 51 is_stmt 0
 364              	#NO_APP
 365 0130 97000000 		call	_ZN15MemoryAllocator8mem_freeEPKv@plt
 365      E7800000 
 366              	.LVL17:
  41:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 367              		.loc 1 41 17 is_stmt 1
  41:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 368              		.loc 1 41 60 is_stmt 0
 369              	#APP
 370              	# 41 "src/riscv.cpp" 1
  42:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 371              		mv t0, a0
 372              	# 0 "" 2
 373              		.loc 1 42 17 is_stmt 1
  42:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 374              		.loc 1 42 50 is_stmt 0
 375              	# 42 "src/riscv.cpp" 1
  43:src/riscv.cpp ****                 break;
 376              		sd t0, 80(x8)
 377              	# 0 "" 2
 378              		.loc 1 43 17 is_stmt 1
 379              	#NO_APP
 380 0140 6FF09FFC 		j	.L5
 381              	.LVL18:
 382              	.L14:
  45:src/riscv.cpp ****             case 0x11:
 383              		.loc 1 45 13
  46:src/riscv.cpp ****                 TCB::Body start_routine;
 384              		.loc 1 46 17
  47:src/riscv.cpp ****                 void* arg;
 385              		.loc 1 47 17
  48:src/riscv.cpp ****                 thread_t* thandle;
GAS LISTING /tmp/ccOpcMyL.s 			page 15


 386              		.loc 1 48 17
  49:src/riscv.cpp ****                 void* stek;
 387              		.loc 1 49 17
  50:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
 388              		.loc 1 50 17
  50:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
 389              		.loc 1 50 65 is_stmt 0
 390              	#APP
 391              	# 50 "src/riscv.cpp" 1
 392              		ld s1, 88(x8)
 393              	# 0 "" 2
 394              	.LVL19:
  51:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 395              		.loc 1 51 17 is_stmt 1
  51:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 396              		.loc 1 51 71 is_stmt 0
 397              	# 51 "src/riscv.cpp" 1
 398              		ld a0, 96(x8)
 399              	# 0 "" 2
 400              	.LVL20:
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 401              		.loc 1 52 17 is_stmt 1
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 402              		.loc 1 52 62 is_stmt 0
 403              	# 52 "src/riscv.cpp" 1
 404              		ld a1, 104(x8)
 405              	# 0 "" 2
 406              	.LVL21:
  53:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
 407              		.loc 1 53 17 is_stmt 1
  53:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
 408              		.loc 1 53 63 is_stmt 0
 409              	# 53 "src/riscv.cpp" 1
 410              		ld a2, 112(x8)
 411              	# 0 "" 2
 412              	.LVL22:
  54:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 413              		.loc 1 54 17 is_stmt 1
  54:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 414              		.loc 1 54 45 is_stmt 0
 415              	#NO_APP
 416 0154 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_@plt
 416      E7800000 
 417              	.LVL23:
  54:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 418              		.loc 1 54 26
 419 015c 23B0A400 		sd	a0,0(s1)
  55:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
 420              		.loc 1 55 17 is_stmt 1
 421 0160 630A0500 		beqz	a0,.L22
  55:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
 422              		.loc 1 55 45 is_stmt 0
 423 0164 93070000 		li	a5,0
 424              	.L17:
 425              	.LVL24:
  58:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 426              		.loc 1 58 17 is_stmt 1
GAS LISTING /tmp/ccOpcMyL.s 			page 16


  58:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 427              		.loc 1 58 57 is_stmt 0
 428              	#APP
 429              	# 58 "src/riscv.cpp" 1
  59:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 430              		mv t0, a5
 431              	# 0 "" 2
 432              		.loc 1 59 17 is_stmt 1
  59:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 433              		.loc 1 59 50 is_stmt 0
 434              	# 59 "src/riscv.cpp" 1
  60:src/riscv.cpp ****                 break;
 435              		sd t0, 80(x8)
 436              	# 0 "" 2
 437              		.loc 1 60 17 is_stmt 1
 438              	#NO_APP
 439 0170 6FF09FF9 		j	.L5
 440              	.LVL25:
 441              	.L22:
  56:src/riscv.cpp ****                 else ret = -1;
 442              		.loc 1 56 26 is_stmt 0
 443 0174 9307F0FF 		li	a5,-1
 444 0178 6FF01FFF 		j	.L17
 445              	.LVL26:
 446              	.L13:
  62:src/riscv.cpp ****             case 0x12:
 447              		.loc 1 62 13 is_stmt 1
  63:src/riscv.cpp ****                 ret = TCB::exitThread();
 448              		.loc 1 63 17
  63:src/riscv.cpp ****                 ret = TCB::exitThread();
 449              		.loc 1 63 38 is_stmt 0
 450 017c 97000000 		call	_ZN3TCB10exitThreadEv@plt
 450      E7800000 
 451              	.LVL27:
  64:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 452              		.loc 1 64 17 is_stmt 1
  64:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 453              		.loc 1 64 57 is_stmt 0
 454              	#APP
 455              	# 64 "src/riscv.cpp" 1
  65:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 456              		mv t0, a0
 457              	# 0 "" 2
 458              		.loc 1 65 17 is_stmt 1
  65:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 459              		.loc 1 65 50 is_stmt 0
 460              	# 65 "src/riscv.cpp" 1
  66:src/riscv.cpp ****                 break;
 461              		sw t0, 80(x8)
 462              	# 0 "" 2
 463              		.loc 1 66 17 is_stmt 1
 464              	#NO_APP
 465 018c 6FF0DFF7 		j	.L5
 466              	.LVL28:
 467              	.L12:
  68:src/riscv.cpp ****             case 0x13:
 468              		.loc 1 68 13
GAS LISTING /tmp/ccOpcMyL.s 			page 17


  69:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 469              		.loc 1 69 17
  69:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 470              		.loc 1 69 38 is_stmt 0
 471 0190 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 471      83B70700 
 472 0198 23B00700 		sd	zero,0(a5)
  70:src/riscv.cpp ****                 TCB::dispatch();
 473              		.loc 1 70 17 is_stmt 1
  70:src/riscv.cpp ****                 TCB::dispatch();
 474              		.loc 1 70 30 is_stmt 0
 475 019c 97000000 		call	_ZN3TCB8dispatchEv@plt
 475      E7800000 
 476              	.LVL29:
  71:src/riscv.cpp ****                 break;
 477              		.loc 1 71 17 is_stmt 1
 478 01a4 6FF05FF6 		j	.L5
 479              	.LVL30:
 480              	.L11:
  73:src/riscv.cpp ****             case 0x21:
 481              		.loc 1 73 13
  74:src/riscv.cpp ****                 int val;
 482              		.loc 1 74 17
  75:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 483              		.loc 1 75 17
  75:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 484              		.loc 1 75 65 is_stmt 0
 485              	#APP
 486              	# 75 "src/riscv.cpp" 1
 487              		ld s1, 88(x8)
 488              	# 0 "" 2
 489              	.LVL31:
  76:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
 490              		.loc 1 76 17 is_stmt 1
  76:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
 491              		.loc 1 76 61 is_stmt 0
 492              	# 76 "src/riscv.cpp" 1
 493              		ld a0, 96(x8)
 494              	# 0 "" 2
 495              	.LVL32:
  77:src/riscv.cpp ****                 *shandle = sem::openSemaphore(val);
 496              		.loc 1 77 17 is_stmt 1
  77:src/riscv.cpp ****                 *shandle = sem::openSemaphore(val);
 497              		.loc 1 77 46 is_stmt 0
 498              	#NO_APP
 499 01b0 1B050500 		sext.w	a0,a0
 500 01b4 97000000 		call	_ZN3sem13openSemaphoreEi@plt
 500      E7800000 
 501              	.LVL33:
  77:src/riscv.cpp ****                 *shandle = sem::openSemaphore(val);
 502              		.loc 1 77 26
 503 01bc 23B0A400 		sd	a0,0(s1)
  78:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
 504              		.loc 1 78 17 is_stmt 1
 505 01c0 630A0500 		beqz	a0,.L23
  78:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
 506              		.loc 1 78 45 is_stmt 0
GAS LISTING /tmp/ccOpcMyL.s 			page 18


 507 01c4 93070000 		li	a5,0
 508              	.L18:
 509              	.LVL34:
  80:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 510              		.loc 1 80 17 is_stmt 1
  80:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 511              		.loc 1 80 57 is_stmt 0
 512              	#APP
 513              	# 80 "src/riscv.cpp" 1
  81:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 514              		mv t0, a5
 515              	# 0 "" 2
 516              		.loc 1 81 17 is_stmt 1
  81:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 517              		.loc 1 81 50 is_stmt 0
 518              	# 81 "src/riscv.cpp" 1
  82:src/riscv.cpp ****                 break;
 519              		sw t0, 80(x8)
 520              	# 0 "" 2
 521              		.loc 1 82 17 is_stmt 1
 522              	#NO_APP
 523 01d0 6FF09FF3 		j	.L5
 524              	.LVL35:
 525              	.L23:
  79:src/riscv.cpp ****                 else ret = -1;
 526              		.loc 1 79 26 is_stmt 0
 527 01d4 9307F0FF 		li	a5,-1
 528 01d8 6FF01FFF 		j	.L18
 529              	.LVL36:
 530              	.L10:
  84:src/riscv.cpp ****             case 0x22:
 531              		.loc 1 84 13 is_stmt 1
  85:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 532              		.loc 1 85 17
  85:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 533              		.loc 1 85 60 is_stmt 0
 534              	#APP
 535              	# 85 "src/riscv.cpp" 1
 536              		ld a0, 88(x8)
 537              	# 0 "" 2
 538              	.LVL37:
  86:src/riscv.cpp ****                 ret = id->sem::closeSemaphore();
 539              		.loc 1 86 17 is_stmt 1
  86:src/riscv.cpp ****                 ret = id->sem::closeSemaphore();
 540              		.loc 1 86 46 is_stmt 0
 541              	#NO_APP
 542 01e0 97000000 		call	_ZN3sem14closeSemaphoreEv@plt
 542      E7800000 
 543              	.LVL38:
  87:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 544              		.loc 1 87 17 is_stmt 1
  87:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 545              		.loc 1 87 57 is_stmt 0
 546              	#APP
 547              	# 87 "src/riscv.cpp" 1
  88:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 548              		mv t0, a0
GAS LISTING /tmp/ccOpcMyL.s 			page 19


 549              	# 0 "" 2
 550              		.loc 1 88 17 is_stmt 1
  88:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 551              		.loc 1 88 50 is_stmt 0
 552              	# 88 "src/riscv.cpp" 1
  89:src/riscv.cpp ****                 break;
 553              		sw t0, 80(x8)
 554              	# 0 "" 2
 555              		.loc 1 89 17 is_stmt 1
 556              	#NO_APP
 557 01f0 6FF09FF1 		j	.L5
 558              	.LVL39:
 559              	.L9:
  91:src/riscv.cpp ****             case 0x23:
 560              		.loc 1 91 13
  92:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 561              		.loc 1 92 17
  92:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 562              		.loc 1 92 60 is_stmt 0
 563              	#APP
 564              	# 92 "src/riscv.cpp" 1
 565              		ld a0, 88(x8)
 566              	# 0 "" 2
 567              	.LVL40:
  93:src/riscv.cpp ****                 ret = id->sem::wait();
 568              		.loc 1 93 17 is_stmt 1
  93:src/riscv.cpp ****                 ret = id->sem::wait();
 569              		.loc 1 93 36 is_stmt 0
 570              	#NO_APP
 571 01f8 97000000 		call	_ZN3sem4waitEv@plt
 571      E7800000 
 572              	.LVL41:
  94:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 573              		.loc 1 94 17 is_stmt 1
  94:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 574              		.loc 1 94 57 is_stmt 0
 575              	#APP
 576              	# 94 "src/riscv.cpp" 1
  95:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 577              		mv t0, a0
 578              	# 0 "" 2
 579              		.loc 1 95 17 is_stmt 1
  95:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 580              		.loc 1 95 50 is_stmt 0
 581              	# 95 "src/riscv.cpp" 1
  96:src/riscv.cpp ****                 break;
 582              		sw t0, 80(x8)
 583              	# 0 "" 2
 584              		.loc 1 96 17 is_stmt 1
 585              	#NO_APP
 586 0208 6FF01FF0 		j	.L5
 587              	.LVL42:
 588              	.L8:
  98:src/riscv.cpp ****             case 0x24:
 589              		.loc 1 98 13
  99:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 590              		.loc 1 99 17
GAS LISTING /tmp/ccOpcMyL.s 			page 20


  99:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 591              		.loc 1 99 60 is_stmt 0
 592              	#APP
 593              	# 99 "src/riscv.cpp" 1
 594              		ld a0, 88(x8)
 595              	# 0 "" 2
 596              	.LVL43:
 100:src/riscv.cpp ****                 ret = id->sem::signal();
 597              		.loc 1 100 17 is_stmt 1
 100:src/riscv.cpp ****                 ret = id->sem::signal();
 598              		.loc 1 100 38 is_stmt 0
 599              	#NO_APP
 600 0210 97000000 		call	_ZN3sem6signalEv@plt
 600      E7800000 
 601              	.LVL44:
 101:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 602              		.loc 1 101 17 is_stmt 1
 101:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 603              		.loc 1 101 57 is_stmt 0
 604              	#APP
 605              	# 101 "src/riscv.cpp" 1
 102:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 606              		mv t0, a0
 607              	# 0 "" 2
 608              		.loc 1 102 17 is_stmt 1
 102:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 609              		.loc 1 102 50 is_stmt 0
 610              	# 102 "src/riscv.cpp" 1
 103:src/riscv.cpp ****                 break;
 611              		sw t0, 80(x8)
 612              	# 0 "" 2
 613              		.loc 1 103 17 is_stmt 1
 614              	#NO_APP
 615 0220 6FF09FEE 		j	.L5
 616              	.LVL45:
 617              	.L6:
 105:src/riscv.cpp ****             case 0x26:
 618              		.loc 1 105 13
 106:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 619              		.loc 1 106 17
 106:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 620              		.loc 1 106 60 is_stmt 0
 621              	#APP
 622              	# 106 "src/riscv.cpp" 1
 623              		ld a0, 88(x8)
 624              	# 0 "" 2
 625              	.LVL46:
 107:src/riscv.cpp ****                 ret = id->sem::trywait();
 626              		.loc 1 107 17 is_stmt 1
 107:src/riscv.cpp ****                 ret = id->sem::trywait();
 627              		.loc 1 107 39 is_stmt 0
 628              	#NO_APP
 629 0228 97000000 		call	_ZN3sem7trywaitEv@plt
 629      E7800000 
 630              	.LVL47:
 108:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 631              		.loc 1 108 17 is_stmt 1
GAS LISTING /tmp/ccOpcMyL.s 			page 21


 108:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 632              		.loc 1 108 57 is_stmt 0
 633              	#APP
 634              	# 108 "src/riscv.cpp" 1
 109:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 635              		mv t0, a0
 636              	# 0 "" 2
 637              		.loc 1 109 17 is_stmt 1
 109:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 638              		.loc 1 109 50 is_stmt 0
 639              	# 109 "src/riscv.cpp" 1
 110:src/riscv.cpp ****                 break;
 640              		sw t0, 80(x8)
 641              	# 0 "" 2
 642              		.loc 1 110 17 is_stmt 1
 643              	#NO_APP
 644 0238 6FF01FED 		j	.L5
 645              	.LVL48:
 646              	.L26:
 647              	.LBE73:
 648              	.LBE74:
 649              	.LBB75:
 650              	.LBB48:
 120:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 651              		.loc 1 120 9
 652              	.LBB49:
 653              	.LBB50:
 154:src/../h/riscv.hpp **** }
 654              		.loc 2 154 5
 154:src/../h/riscv.hpp **** }
 655              		.loc 2 154 64 is_stmt 0
 656 023c 93072000 		li	a5,2
 657              	#APP
 658              	# 154 "src/../h/riscv.hpp" 1
 659              		csrc sip, a5
 660              	# 0 "" 2
 661              	.LVL49:
 662              	#NO_APP
 663              	.LBE50:
 664              	.LBE49:
 121:src/riscv.cpp ****         TCB::timeSliceCounter++;
 665              		.loc 1 121 9 is_stmt 1
 121:src/riscv.cpp ****         TCB::timeSliceCounter++;
 666              		.loc 1 121 30 is_stmt 0
 667 0244 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 667      03370700 
 668 024c 83370700 		ld	a5,0(a4)
 669 0250 93871700 		addi	a5,a5,1
 670 0254 2330F700 		sd	a5,0(a4)
 123:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 671              		.loc 1 123 9 is_stmt 1
 672              	.LBB51:
 123:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 673              		.loc 1 123 63 is_stmt 0
 674 0258 17070000 		la	a4,_ZN3TCB7runningE
 674      03370700 
 675 0260 03370700 		ld	a4,0(a4)
GAS LISTING /tmp/ccOpcMyL.s 			page 22


 676              	.LVL50:
 677              	.LBB52:
 678              	.LBB53:
 679              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 5/19/24.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJEKAT_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJEKAT_TCB_HPP
   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "riscv.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** class TCB {
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp ****     void *operator new(size_t n);
  14:src/../h/tcb.hpp **** 
  15:src/../h/tcb.hpp ****     void *operator new[](size_t n);
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept;
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void operator delete[](void *p) noexcept;
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp **** public:
  22:src/../h/tcb.hpp ****     ~TCB(){TCB::operator delete[](stack);}
  23:src/../h/tcb.hpp ****     bool isFinished() const {return finished;}
  24:src/../h/tcb.hpp ****     void setFinished(bool f) { TCB::finished = f;}
  25:src/../h/tcb.hpp **** 
  26:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 680              		.loc 3 26 35 is_stmt 1
 681              		.loc 3 26 42 is_stmt 0
 682 0264 03378702 		ld	a4,40(a4)
 683              	.LVL51:
 684              	.LBE53:
 685              	.LBE52:
 123:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 686              		.loc 1 123 9
 687 0268 E3E8E7EA 		bltu	a5,a4,.L3
 688              	.LBB54:
 125:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 689              		.loc 1 125 13 is_stmt 1
 690              	.LBB55:
 691              	.LBB56:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 692              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 693              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 694              		.loc 2 114 64 is_stmt 0
 695              	#APP
 696              	# 114 "src/../h/riscv.hpp" 1
 697              		csrr a5, sepc
 698              	# 0 "" 2
 699              	#NO_APP
 700 0270 2334F4FC 		sd	a5,-56(s0)
 115:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccOpcMyL.s 			page 23


 701              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 702              		.loc 2 115 12 is_stmt 0
 703 0274 833784FC 		ld	a5,-56(s0)
 704              	.LBE56:
 705              	.LBE55:
 125:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 706              		.loc 1 125 43
 707 0278 2338F4F8 		sd	a5,-112(s0)
 126:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 708              		.loc 1 126 13 is_stmt 1
 709              	.LBB57:
 710              	.LBB58:
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 711              		.loc 2 181 5
 182:src/../h/riscv.hpp ****     return sstatus;
 712              		.loc 2 182 5
 182:src/../h/riscv.hpp ****     return sstatus;
 713              		.loc 2 182 76 is_stmt 0
 714              	#APP
 715              	# 182 "src/../h/riscv.hpp" 1
 716              		csrr a5, sstatus
 717              	# 0 "" 2
 718              	#NO_APP
 719 0280 2330F4FC 		sd	a5,-64(s0)
 183:src/../h/riscv.hpp **** }
 720              		.loc 2 183 5 is_stmt 1
 183:src/../h/riscv.hpp **** }
 721              		.loc 2 183 12 is_stmt 0
 722 0284 833704FC 		ld	a5,-64(s0)
 723              	.LBE58:
 724              	.LBE57:
 126:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 725              		.loc 1 126 49
 726 0288 233CF4F8 		sd	a5,-104(s0)
 127:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 727              		.loc 1 127 13 is_stmt 1
 127:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 728              		.loc 1 127 34 is_stmt 0
 729 028c 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 729      83B70700 
 730 0294 23B00700 		sd	zero,0(a5)
 128:src/riscv.cpp ****             TCB::dispatch();
 731              		.loc 1 128 13 is_stmt 1
 128:src/riscv.cpp ****             TCB::dispatch();
 732              		.loc 1 128 26 is_stmt 0
 733 0298 97000000 		call	_ZN3TCB8dispatchEv@plt
 733      E7800000 
 734              	.LVL52:
 129:src/riscv.cpp ****             w_sstatus(sstatus);
 735              		.loc 1 129 13 is_stmt 1
 129:src/riscv.cpp ****             w_sstatus(sstatus);
 736              		.loc 1 129 22 is_stmt 0
 737 02a0 833784F9 		ld	a5,-104(s0)
 738              	.LVL53:
 739              	.LBB59:
 740              	.LBB60:
GAS LISTING /tmp/ccOpcMyL.s 			page 24


 188:src/../h/riscv.hpp **** }
 741              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 742              		.loc 2 188 77 is_stmt 0
 743              	#APP
 744              	# 188 "src/../h/riscv.hpp" 1
 745              		csrw sstatus, a5
 746              	# 0 "" 2
 747              	.LVL54:
 748              	#NO_APP
 749              	.LBE60:
 750              	.LBE59:
 130:src/riscv.cpp ****             w_sepc(sepc);
 751              		.loc 1 130 13 is_stmt 1
 130:src/riscv.cpp ****             w_sepc(sepc);
 752              		.loc 1 130 19 is_stmt 0
 753 02a8 833704F9 		ld	a5,-112(s0)
 754              	.LVL55:
 755              	.LBB61:
 756              	.LBB62:
 120:src/../h/riscv.hpp **** }
 757              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 758              		.loc 2 120 65 is_stmt 0
 759              	#APP
 760              	# 120 "src/../h/riscv.hpp" 1
 121:src/../h/riscv.hpp **** 
 761              		csrw sepc, a5
 762              	# 0 "" 2
 763              		.loc 2 121 1
 764              	#NO_APP
 765 02b0 6FF09FE6 		j	.L3
 766              	.LVL56:
 767              	.L27:
 768              	.LBE62:
 769              	.LBE61:
 770              	.LBE54:
 771              	.LBE51:
 772              	.LBE48:
 137:src/riscv.cpp ****         console_handler();
 773              		.loc 1 137 9 is_stmt 1
 137:src/riscv.cpp ****         console_handler();
 774              		.loc 1 137 24 is_stmt 0
 775 02b4 97000000 		call	console_handler@plt
 775      E7800000 
 776              	.LVL57:
 777 02bc 6FF0DFE5 		j	.L3
 778              	.LBE75:
 779              	.LBE78:
 780              		.cfi_endproc
 781              	.LFE44:
 783              	.Letext0:
 784              		.file 4 "src/../h/../lib/hw.h"
 785              		.file 5 "src/../h/MemoryAllocator.hpp"
 786              		.file 6 "src/../h/list.hpp"
 787              		.file 7 "src/../h/semaphore.hpp"
 788              		.file 8 "src/../h/syscall_c.hpp"
GAS LISTING /tmp/ccOpcMyL.s 			page 25


 789              		.file 9 "src/../h/print.hpp"
 790              		.file 10 "src/../h/../lib/console.h"
GAS LISTING /tmp/ccOpcMyL.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccOpcMyL.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccOpcMyL.s:13     .text:0000000000000000 .L0 
     /tmp/ccOpcMyL.s:14     .text:0000000000000000 .L0 
     /tmp/ccOpcMyL.s:15     .text:0000000000000004 .L0 
     /tmp/ccOpcMyL.s:17     .text:0000000000000008 .L0 
     /tmp/ccOpcMyL.s:19     .text:000000000000000c .L0 
     /tmp/ccOpcMyL.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:10     .text:000000000000000c .L0 
     /tmp/ccOpcMyL.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:11     .text:0000000000000010 .L0 
     /tmp/ccOpcMyL.s:33     .text:0000000000000014 .L0 
     /tmp/ccOpcMyL.s:34     .text:0000000000000018 .L0 
     /tmp/ccOpcMyL.s:35     .text:0000000000000018 .L0 
     /tmp/ccOpcMyL.s:37     .text:000000000000001c .L0 
     /tmp/ccOpcMyL.s:39     .text:0000000000000020 .L0 
     /tmp/ccOpcMyL.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccOpcMyL.s:48     .text:0000000000000020 .L0 
     /tmp/ccOpcMyL.s:49     .text:0000000000000020 .L0 
     /tmp/ccOpcMyL.s:50     .text:0000000000000024 .L0 
     /tmp/ccOpcMyL.s:54     .text:0000000000000030 .L0 
     /tmp/ccOpcMyL.s:55     .text:0000000000000030 .L0 
     /tmp/ccOpcMyL.s:56     .text:0000000000000030 .L0 
     /tmp/ccOpcMyL.s:58     .text:0000000000000034 .L0 
     /tmp/ccOpcMyL.s:63     .text:0000000000000034 .L0 
     /tmp/ccOpcMyL.s:64     .text:0000000000000034 .L0 
     /tmp/ccOpcMyL.s:65     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:195    .text:0000000000000034 .L0 
     /tmp/ccOpcMyL.s:73     .text:000000000000003c .L0 
     /tmp/ccOpcMyL.s:74     .text:000000000000003c .L0 
     /tmp/ccOpcMyL.s:81     .text:0000000000000040 .L0 
     /tmp/ccOpcMyL.s:82     .text:0000000000000040 .L0 
     /tmp/ccOpcMyL.s:83     .text:0000000000000040 .L0 
  src/../h/riscv.hpp:102    .text:0000000000000040 .L0 
     /tmp/ccOpcMyL.s:91     .text:0000000000000048 .L0 
     /tmp/ccOpcMyL.s:92     .text:0000000000000048 .L0 
     /tmp/ccOpcMyL.s:98     .text:000000000000004c .L0 
     /tmp/ccOpcMyL.s:99     .text:000000000000004c .L0 
     /tmp/ccOpcMyL.s:101    .text:0000000000000050 .L0 
     /tmp/ccOpcMyL.s:107    .text:0000000000000058 .L0 
     /tmp/ccOpcMyL.s:113    .text:0000000000000068 .L0 
     /tmp/ccOpcMyL.s:118    .text:0000000000000078 .L0 
     /tmp/ccOpcMyL.s:119    .text:0000000000000078 .L0 
     /tmp/ccOpcMyL.s:124    .text:0000000000000080 .L0 
     /tmp/ccOpcMyL.s:125    .text:0000000000000080 .L0 
     /tmp/ccOpcMyL.s:126    .text:0000000000000080 .L0 
  src/../h/riscv.hpp:114    .text:0000000000000080 .L0 
     /tmp/ccOpcMyL.s:134    .text:0000000000000088 .L0 
     /tmp/ccOpcMyL.s:135    .text:0000000000000088 .L0 
     /tmp/ccOpcMyL.s:139    .text:000000000000008c .L0 
     /tmp/ccOpcMyL.s:144    .text:0000000000000094 .L0 
     /tmp/ccOpcMyL.s:145    .text:0000000000000094 .L0 
     /tmp/ccOpcMyL.s:146    .text:0000000000000094 .L0 
  src/../h/riscv.hpp:138    .text:0000000000000094 .L0 
     /tmp/ccOpcMyL.s:154    .text:000000000000009c .L0 
     /tmp/ccOpcMyL.s:155    .text:000000000000009c .L0 
GAS LISTING /tmp/ccOpcMyL.s 			page 27


     /tmp/ccOpcMyL.s:159    .text:00000000000000a0 .L0 
     /tmp/ccOpcMyL.s:164    .text:00000000000000a8 .L0 
     /tmp/ccOpcMyL.s:172    .text:00000000000000ac .L0 
     /tmp/ccOpcMyL.s:173    .text:00000000000000ac .L0 
     /tmp/ccOpcMyL.s:174    .text:00000000000000ac .L0 
  src/../h/riscv.hpp:114    .text:00000000000000ac .L0 
     /tmp/ccOpcMyL.s:182    .text:00000000000000b4 .L0 
     /tmp/ccOpcMyL.s:183    .text:00000000000000b4 .L0 
     /tmp/ccOpcMyL.s:187    .text:00000000000000b8 .L0 
     /tmp/ccOpcMyL.s:189    .text:00000000000000bc .L0 
     /tmp/ccOpcMyL.s:193    .text:00000000000000c0 .L0 
     /tmp/ccOpcMyL.s:194    .text:00000000000000c0 .L0 
     /tmp/ccOpcMyL.s:195    .text:00000000000000c0 .L0 
  src/../h/riscv.hpp:182    .text:00000000000000c0 .L0 
     /tmp/ccOpcMyL.s:203    .text:00000000000000c8 .L0 
     /tmp/ccOpcMyL.s:204    .text:00000000000000c8 .L0 
     /tmp/ccOpcMyL.s:208    .text:00000000000000cc .L0 
     /tmp/ccOpcMyL.s:210    .text:00000000000000d0 .L0 
     /tmp/ccOpcMyL.s:211    .text:00000000000000d0 .L0 
     /tmp/ccOpcMyL.s:212    .text:00000000000000d0 .L0 
     /tmp/ccOpcMyL.s:213    .text:00000000000000d0 .L0 
     /tmp/ccOpcMyL.s:269    .text:00000000000000f4 .L0 
     /tmp/ccOpcMyL.s:270    .text:00000000000000f4 .L0 
     /tmp/ccOpcMyL.s:271    .text:00000000000000f4 .L0 
     /tmp/ccOpcMyL.s:272    .text:00000000000000f4 .L0 
       src/riscv.cpp:30     .text:00000000000000f4 .L0 
     /tmp/ccOpcMyL.s:279    .text:00000000000000f8 .L0 
     /tmp/ccOpcMyL.s:281    .text:00000000000000f8 .L0 
     /tmp/ccOpcMyL.s:284    .text:0000000000000100 .L0 
       src/riscv.cpp:32     .text:0000000000000100 .L0 
     /tmp/ccOpcMyL.s:290    .text:0000000000000104 .L0 
       src/riscv.cpp:33     .text:0000000000000104 .L0 
     /tmp/ccOpcMyL.s:299    .text:0000000000000108 .L0 
     /tmp/ccOpcMyL.s:300    .text:0000000000000108 .L0 
     /tmp/ccOpcMyL.s:301    .text:0000000000000108 .L0 
     /tmp/ccOpcMyL.s:306    .text:000000000000010c .L0 
  src/../h/riscv.hpp:188    .text:000000000000010c .L0 
     /tmp/ccOpcMyL.s:316    .text:0000000000000110 .L0 
     /tmp/ccOpcMyL.s:317    .text:0000000000000110 .L0 
     /tmp/ccOpcMyL.s:322    .text:0000000000000114 .L0 
  src/../h/riscv.hpp:120    .text:0000000000000114 .L0 
     /tmp/ccOpcMyL.s:335    .text:0000000000000118 .L0 
     /tmp/ccOpcMyL.s:336    .text:000000000000011c .L0 
     /tmp/ccOpcMyL.s:337    .text:000000000000011c .L0 
     /tmp/ccOpcMyL.s:339    .text:0000000000000120 .L0 
     /tmp/ccOpcMyL.s:340    .text:0000000000000120 .L0 
     /tmp/ccOpcMyL.s:342    .text:0000000000000124 .L0 
     /tmp/ccOpcMyL.s:344    .text:0000000000000128 .L0 
     /tmp/ccOpcMyL.s:348    .text:000000000000012c .L0 
     /tmp/ccOpcMyL.s:353    .text:000000000000012c .L0 
     /tmp/ccOpcMyL.s:354    .text:000000000000012c .L0 
     /tmp/ccOpcMyL.s:355    .text:000000000000012c .L0 
     /tmp/ccOpcMyL.s:356    .text:000000000000012c .L0 
       src/riscv.cpp:39     .text:000000000000012c .L0 
     /tmp/ccOpcMyL.s:363    .text:0000000000000130 .L0 
     /tmp/ccOpcMyL.s:365    .text:0000000000000130 .L0 
     /tmp/ccOpcMyL.s:368    .text:0000000000000138 .L0 
GAS LISTING /tmp/ccOpcMyL.s 			page 28


       src/riscv.cpp:41     .text:0000000000000138 .L0 
     /tmp/ccOpcMyL.s:374    .text:000000000000013c .L0 
       src/riscv.cpp:42     .text:000000000000013c .L0 
     /tmp/ccOpcMyL.s:380    .text:0000000000000140 .L0 
     /tmp/ccOpcMyL.s:384    .text:0000000000000144 .L0 
     /tmp/ccOpcMyL.s:385    .text:0000000000000144 .L0 
     /tmp/ccOpcMyL.s:386    .text:0000000000000144 .L0 
     /tmp/ccOpcMyL.s:387    .text:0000000000000144 .L0 
     /tmp/ccOpcMyL.s:388    .text:0000000000000144 .L0 
     /tmp/ccOpcMyL.s:389    .text:0000000000000144 .L0 
       src/riscv.cpp:50     .text:0000000000000144 .L0 
     /tmp/ccOpcMyL.s:396    .text:0000000000000148 .L0 
       src/riscv.cpp:51     .text:0000000000000148 .L0 
     /tmp/ccOpcMyL.s:402    .text:000000000000014c .L0 
       src/riscv.cpp:52     .text:000000000000014c .L0 
     /tmp/ccOpcMyL.s:408    .text:0000000000000150 .L0 
       src/riscv.cpp:53     .text:0000000000000150 .L0 
     /tmp/ccOpcMyL.s:414    .text:0000000000000154 .L0 
     /tmp/ccOpcMyL.s:416    .text:0000000000000154 .L0 
     /tmp/ccOpcMyL.s:419    .text:000000000000015c .L0 
     /tmp/ccOpcMyL.s:421    .text:0000000000000160 .L0 
     /tmp/ccOpcMyL.s:423    .text:0000000000000164 .L0 
     /tmp/ccOpcMyL.s:427    .text:0000000000000168 .L0 
       src/riscv.cpp:58     .text:0000000000000168 .L0 
     /tmp/ccOpcMyL.s:433    .text:000000000000016c .L0 
       src/riscv.cpp:59     .text:000000000000016c .L0 
     /tmp/ccOpcMyL.s:439    .text:0000000000000170 .L0 
     /tmp/ccOpcMyL.s:443    .text:0000000000000174 .L0 
     /tmp/ccOpcMyL.s:448    .text:000000000000017c .L0 
     /tmp/ccOpcMyL.s:449    .text:000000000000017c .L0 
     /tmp/ccOpcMyL.s:450    .text:000000000000017c .L0 
     /tmp/ccOpcMyL.s:453    .text:0000000000000184 .L0 
       src/riscv.cpp:64     .text:0000000000000184 .L0 
     /tmp/ccOpcMyL.s:459    .text:0000000000000188 .L0 
       src/riscv.cpp:65     .text:0000000000000188 .L0 
     /tmp/ccOpcMyL.s:465    .text:000000000000018c .L0 
     /tmp/ccOpcMyL.s:469    .text:0000000000000190 .L0 
     /tmp/ccOpcMyL.s:470    .text:0000000000000190 .L0 
     /tmp/ccOpcMyL.s:471    .text:0000000000000190 .L0 
     /tmp/ccOpcMyL.s:474    .text:000000000000019c .L0 
     /tmp/ccOpcMyL.s:475    .text:000000000000019c .L0 
     /tmp/ccOpcMyL.s:478    .text:00000000000001a4 .L0 
     /tmp/ccOpcMyL.s:482    .text:00000000000001a8 .L0 
     /tmp/ccOpcMyL.s:483    .text:00000000000001a8 .L0 
     /tmp/ccOpcMyL.s:484    .text:00000000000001a8 .L0 
       src/riscv.cpp:75     .text:00000000000001a8 .L0 
     /tmp/ccOpcMyL.s:491    .text:00000000000001ac .L0 
       src/riscv.cpp:76     .text:00000000000001ac .L0 
     /tmp/ccOpcMyL.s:497    .text:00000000000001b0 .L0 
     /tmp/ccOpcMyL.s:499    .text:00000000000001b0 .L0 
     /tmp/ccOpcMyL.s:503    .text:00000000000001bc .L0 
     /tmp/ccOpcMyL.s:505    .text:00000000000001c0 .L0 
     /tmp/ccOpcMyL.s:507    .text:00000000000001c4 .L0 
     /tmp/ccOpcMyL.s:511    .text:00000000000001c8 .L0 
       src/riscv.cpp:80     .text:00000000000001c8 .L0 
     /tmp/ccOpcMyL.s:517    .text:00000000000001cc .L0 
       src/riscv.cpp:81     .text:00000000000001cc .L0 
GAS LISTING /tmp/ccOpcMyL.s 			page 29


     /tmp/ccOpcMyL.s:523    .text:00000000000001d0 .L0 
     /tmp/ccOpcMyL.s:527    .text:00000000000001d4 .L0 
     /tmp/ccOpcMyL.s:532    .text:00000000000001dc .L0 
     /tmp/ccOpcMyL.s:533    .text:00000000000001dc .L0 
       src/riscv.cpp:85     .text:00000000000001dc .L0 
     /tmp/ccOpcMyL.s:540    .text:00000000000001e0 .L0 
     /tmp/ccOpcMyL.s:542    .text:00000000000001e0 .L0 
     /tmp/ccOpcMyL.s:545    .text:00000000000001e8 .L0 
       src/riscv.cpp:87     .text:00000000000001e8 .L0 
     /tmp/ccOpcMyL.s:551    .text:00000000000001ec .L0 
       src/riscv.cpp:88     .text:00000000000001ec .L0 
     /tmp/ccOpcMyL.s:557    .text:00000000000001f0 .L0 
     /tmp/ccOpcMyL.s:561    .text:00000000000001f4 .L0 
     /tmp/ccOpcMyL.s:562    .text:00000000000001f4 .L0 
       src/riscv.cpp:92     .text:00000000000001f4 .L0 
     /tmp/ccOpcMyL.s:569    .text:00000000000001f8 .L0 
     /tmp/ccOpcMyL.s:571    .text:00000000000001f8 .L0 
     /tmp/ccOpcMyL.s:574    .text:0000000000000200 .L0 
       src/riscv.cpp:94     .text:0000000000000200 .L0 
     /tmp/ccOpcMyL.s:580    .text:0000000000000204 .L0 
       src/riscv.cpp:95     .text:0000000000000204 .L0 
     /tmp/ccOpcMyL.s:586    .text:0000000000000208 .L0 
     /tmp/ccOpcMyL.s:590    .text:000000000000020c .L0 
     /tmp/ccOpcMyL.s:591    .text:000000000000020c .L0 
       src/riscv.cpp:99     .text:000000000000020c .L0 
     /tmp/ccOpcMyL.s:598    .text:0000000000000210 .L0 
     /tmp/ccOpcMyL.s:600    .text:0000000000000210 .L0 
     /tmp/ccOpcMyL.s:603    .text:0000000000000218 .L0 
       src/riscv.cpp:101    .text:0000000000000218 .L0 
     /tmp/ccOpcMyL.s:609    .text:000000000000021c .L0 
       src/riscv.cpp:102    .text:000000000000021c .L0 
     /tmp/ccOpcMyL.s:615    .text:0000000000000220 .L0 
     /tmp/ccOpcMyL.s:619    .text:0000000000000224 .L0 
     /tmp/ccOpcMyL.s:620    .text:0000000000000224 .L0 
       src/riscv.cpp:106    .text:0000000000000224 .L0 
     /tmp/ccOpcMyL.s:627    .text:0000000000000228 .L0 
     /tmp/ccOpcMyL.s:629    .text:0000000000000228 .L0 
     /tmp/ccOpcMyL.s:632    .text:0000000000000230 .L0 
       src/riscv.cpp:108    .text:0000000000000230 .L0 
     /tmp/ccOpcMyL.s:638    .text:0000000000000234 .L0 
       src/riscv.cpp:109    .text:0000000000000234 .L0 
     /tmp/ccOpcMyL.s:644    .text:0000000000000238 .L0 
     /tmp/ccOpcMyL.s:654    .text:000000000000023c .L0 
     /tmp/ccOpcMyL.s:655    .text:000000000000023c .L0 
     /tmp/ccOpcMyL.s:656    .text:000000000000023c .L0 
     /tmp/ccOpcMyL.s:666    .text:0000000000000244 .L0 
     /tmp/ccOpcMyL.s:667    .text:0000000000000244 .L0 
     /tmp/ccOpcMyL.s:673    .text:0000000000000258 .L0 
     /tmp/ccOpcMyL.s:674    .text:0000000000000258 .L0 
     /tmp/ccOpcMyL.s:681    .text:0000000000000264 .L0 
     /tmp/ccOpcMyL.s:682    .text:0000000000000264 .L0 
     /tmp/ccOpcMyL.s:687    .text:0000000000000268 .L0 
     /tmp/ccOpcMyL.s:692    .text:000000000000026c .L0 
     /tmp/ccOpcMyL.s:693    .text:000000000000026c .L0 
     /tmp/ccOpcMyL.s:694    .text:000000000000026c .L0 
  src/../h/riscv.hpp:114    .text:000000000000026c .L0 
     /tmp/ccOpcMyL.s:702    .text:0000000000000274 .L0 
GAS LISTING /tmp/ccOpcMyL.s 			page 30


     /tmp/ccOpcMyL.s:703    .text:0000000000000274 .L0 
     /tmp/ccOpcMyL.s:707    .text:0000000000000278 .L0 
     /tmp/ccOpcMyL.s:711    .text:000000000000027c .L0 
     /tmp/ccOpcMyL.s:712    .text:000000000000027c .L0 
     /tmp/ccOpcMyL.s:713    .text:000000000000027c .L0 
  src/../h/riscv.hpp:182    .text:000000000000027c .L0 
     /tmp/ccOpcMyL.s:721    .text:0000000000000284 .L0 
     /tmp/ccOpcMyL.s:722    .text:0000000000000284 .L0 
     /tmp/ccOpcMyL.s:726    .text:0000000000000288 .L0 
     /tmp/ccOpcMyL.s:728    .text:000000000000028c .L0 
     /tmp/ccOpcMyL.s:729    .text:000000000000028c .L0 
     /tmp/ccOpcMyL.s:732    .text:0000000000000298 .L0 
     /tmp/ccOpcMyL.s:733    .text:0000000000000298 .L0 
     /tmp/ccOpcMyL.s:736    .text:00000000000002a0 .L0 
     /tmp/ccOpcMyL.s:737    .text:00000000000002a0 .L0 
     /tmp/ccOpcMyL.s:742    .text:00000000000002a4 .L0 
  src/../h/riscv.hpp:188    .text:00000000000002a4 .L0 
     /tmp/ccOpcMyL.s:752    .text:00000000000002a8 .L0 
     /tmp/ccOpcMyL.s:753    .text:00000000000002a8 .L0 
     /tmp/ccOpcMyL.s:758    .text:00000000000002ac .L0 
  src/../h/riscv.hpp:120    .text:00000000000002ac .L0 
     /tmp/ccOpcMyL.s:765    .text:00000000000002b0 .L0 
     /tmp/ccOpcMyL.s:774    .text:00000000000002b4 .L0 
     /tmp/ccOpcMyL.s:775    .text:00000000000002b4 .L0 
     /tmp/ccOpcMyL.s:780    .text:00000000000002c0 .L0 
     /tmp/ccOpcMyL.s:791    .text:00000000000002c0 .L0 
     /tmp/ccOpcMyL.s:225    .rodata:0000000000000000 .L7
     /tmp/ccOpcMyL.s:217    .text:00000000000000dc .L0 
     /tmp/ccOpcMyL.s:471    .text:0000000000000190 .L0 
     /tmp/ccOpcMyL.s:667    .text:0000000000000244 .L0 
     /tmp/ccOpcMyL.s:674    .text:0000000000000258 .L0 
     /tmp/ccOpcMyL.s:729    .text:000000000000028c .L0 
     /tmp/ccOpcMyL.s:166    .text:00000000000000ac .L25
     /tmp/ccOpcMyL.s:646    .text:000000000000023c .L26
     /tmp/ccOpcMyL.s:767    .text:00000000000002b4 .L27
     /tmp/ccOpcMyL.s:329    .text:0000000000000118 .L3
     /tmp/ccOpcMyL.s:297    .text:0000000000000108 .L5
     /tmp/ccOpcMyL.s:441    .text:0000000000000174 .L22
     /tmp/ccOpcMyL.s:424    .text:0000000000000168 .L17
     /tmp/ccOpcMyL.s:525    .text:00000000000001d4 .L23
     /tmp/ccOpcMyL.s:508    .text:00000000000001c8 .L18
     /tmp/ccOpcMyL.s:266    .text:00000000000000f4 .L16
     /tmp/ccOpcMyL.s:347    .text:000000000000012c .L15
     /tmp/ccOpcMyL.s:382    .text:0000000000000144 .L14
     /tmp/ccOpcMyL.s:446    .text:000000000000017c .L13
     /tmp/ccOpcMyL.s:467    .text:0000000000000190 .L12
     /tmp/ccOpcMyL.s:480    .text:00000000000001a8 .L11
     /tmp/ccOpcMyL.s:530    .text:00000000000001dc .L10
     /tmp/ccOpcMyL.s:559    .text:00000000000001f4 .L9
     /tmp/ccOpcMyL.s:588    .text:000000000000020c .L8
     /tmp/ccOpcMyL.s:617    .text:0000000000000224 .L6
     /tmp/ccOpcMyL.s:2514   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccOpcMyL.s:4130   .debug_str:000000000000080c .LASF186
     /tmp/ccOpcMyL.s:4220   .debug_str:0000000000000b1b .LASF187
     /tmp/ccOpcMyL.s:4228   .debug_str:0000000000000b62 .LASF188
     /tmp/ccOpcMyL.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccOpcMyL.s:783    .text:00000000000002c0 .Letext0
GAS LISTING /tmp/ccOpcMyL.s 			page 31


     /tmp/ccOpcMyL.s:3848   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccOpcMyL.s:3974   .debug_str:0000000000000389 .LASF0
     /tmp/ccOpcMyL.s:4006   .debug_str:000000000000047d .LASF1
     /tmp/ccOpcMyL.s:4096   .debug_str:00000000000006fe .LASF2
     /tmp/ccOpcMyL.s:4104   .debug_str:000000000000073b .LASF4
     /tmp/ccOpcMyL.s:3984   .debug_str:00000000000003c9 .LASF3
     /tmp/ccOpcMyL.s:3864   .debug_str:000000000000007d .LASF5
     /tmp/ccOpcMyL.s:4066   .debug_str:00000000000005fd .LASF6
     /tmp/ccOpcMyL.s:3994   .debug_str:000000000000042c .LASF7
     /tmp/ccOpcMyL.s:3948   .debug_str:00000000000002c3 .LASF8
     /tmp/ccOpcMyL.s:3958   .debug_str:0000000000000311 .LASF9
     /tmp/ccOpcMyL.s:3892   .debug_str:0000000000000135 .LASF10
     /tmp/ccOpcMyL.s:3940   .debug_str:000000000000028f .LASF11
     /tmp/ccOpcMyL.s:3906   .debug_str:000000000000019d .LASF12
     /tmp/ccOpcMyL.s:3890   .debug_str:0000000000000125 .LASF13
     /tmp/ccOpcMyL.s:4138   .debug_str:00000000000008f8 .LASF14
     /tmp/ccOpcMyL.s:3926   .debug_str:0000000000000210 .LASF15
     /tmp/ccOpcMyL.s:4124   .debug_str:00000000000007db .LASF16
     /tmp/ccOpcMyL.s:4062   .debug_str:00000000000005e1 .LASF26
     /tmp/ccOpcMyL.s:4158   .debug_str:0000000000000969 .LASF55
     /tmp/ccOpcMyL.s:3878   .debug_str:00000000000000d1 .LASF17
     /tmp/ccOpcMyL.s:4004   .debug_str:0000000000000478 .LASF18
     /tmp/ccOpcMyL.s:3920   .debug_str:00000000000001f8 .LASF19
     /tmp/ccOpcMyL.s:4156   .debug_str:0000000000000964 .LASF28
     /tmp/ccOpcMyL.s:4190   .debug_str:0000000000000a5d .LASF30
     /tmp/ccOpcMyL.s:3910   .debug_str:00000000000001b2 .LASF20
     /tmp/ccOpcMyL.s:3998   .debug_str:0000000000000452 .LASF73
     /tmp/ccOpcMyL.s:4114   .debug_str:000000000000076f .LASF75
     /tmp/ccOpcMyL.s:4030   .debug_str:0000000000000520 .LASF21
     /tmp/ccOpcMyL.s:3868   .debug_str:000000000000008f .LASF23
     /tmp/ccOpcMyL.s:4146   .debug_str:0000000000000927 .LASF22
     /tmp/ccOpcMyL.s:4074   .debug_str:000000000000064c .LASF24
     /tmp/ccOpcMyL.s:3876   .debug_str:00000000000000cc .LASF77
     /tmp/ccOpcMyL.s:4236   .debug_str:0000000000000bb6 .LASF79
     /tmp/ccOpcMyL.s:4022   .debug_str:00000000000004e5 .LASF25
     /tmp/ccOpcMyL.s:4200   .debug_str:0000000000000aa8 .LASF27
     /tmp/ccOpcMyL.s:4238   .debug_str:0000000000000bd2 .LASF29
     /tmp/ccOpcMyL.s:4186   .debug_str:0000000000000a31 .LASF31
     /tmp/ccOpcMyL.s:3884   .debug_str:00000000000000f0 .LASF32
     /tmp/ccOpcMyL.s:4180   .debug_str:0000000000000a06 .LASF33
     /tmp/ccOpcMyL.s:3854   .debug_str:0000000000000017 .LASF34
     /tmp/ccOpcMyL.s:4044   .debug_str:0000000000000562 .LASF36
     /tmp/ccOpcMyL.s:4122   .debug_str:00000000000007c8 .LASF35
     /tmp/ccOpcMyL.s:4126   .debug_str:00000000000007f1 .LASF37
     /tmp/ccOpcMyL.s:3908   .debug_str:00000000000001ad .LASF189
     /tmp/ccOpcMyL.s:3938   .debug_str:000000000000028a .LASF38
     /tmp/ccOpcMyL.s:4042   .debug_str:000000000000055d .LASF39
     /tmp/ccOpcMyL.s:4036   .debug_str:0000000000000539 .LASF40
     /tmp/ccOpcMyL.s:4142   .debug_str:000000000000090b .LASF41
     /tmp/ccOpcMyL.s:3936   .debug_str:0000000000000273 .LASF47
     /tmp/ccOpcMyL.s:4100   .debug_str:0000000000000719 .LASF190
     /tmp/ccOpcMyL.s:4090   .debug_str:00000000000006d3 .LASF191
     /tmp/ccOpcMyL.s:4000   .debug_str:0000000000000461 .LASF42
     /tmp/ccOpcMyL.s:3888   .debug_str:0000000000000108 .LASF43
     /tmp/ccOpcMyL.s:4020   .debug_str:00000000000004dd .LASF44
     /tmp/ccOpcMyL.s:3930   .debug_str:0000000000000233 .LASF45
     /tmp/ccOpcMyL.s:4064   .debug_str:00000000000005f1 .LASF46
GAS LISTING /tmp/ccOpcMyL.s 			page 32


     /tmp/ccOpcMyL.s:4202   .debug_str:0000000000000ab2 .LASF48
     /tmp/ccOpcMyL.s:4244   .debug_str:0000000000000bf2 .LASF49
     /tmp/ccOpcMyL.s:4234   .debug_str:0000000000000b9b .LASF50
     /tmp/ccOpcMyL.s:4116   .debug_str:0000000000000796 .LASF51
     /tmp/ccOpcMyL.s:3992   .debug_str:000000000000040f .LASF52
     /tmp/ccOpcMyL.s:4086   .debug_str:00000000000006c2 .LASF53
     /tmp/ccOpcMyL.s:3858   .debug_str:000000000000002f .LASF54
     /tmp/ccOpcMyL.s:3898   .debug_str:0000000000000161 .LASF56
     /tmp/ccOpcMyL.s:3954   .debug_str:00000000000002e9 .LASF57
     /tmp/ccOpcMyL.s:3946   .debug_str:00000000000002b7 .LASF58
     /tmp/ccOpcMyL.s:4048   .debug_str:000000000000057d .LASF59
     /tmp/ccOpcMyL.s:4098   .debug_str:000000000000070c .LASF60
     /tmp/ccOpcMyL.s:4106   .debug_str:0000000000000742 .LASF61
     /tmp/ccOpcMyL.s:3862   .debug_str:0000000000000071 .LASF62
     /tmp/ccOpcMyL.s:4148   .debug_str:0000000000000930 .LASF63
     /tmp/ccOpcMyL.s:4038   .debug_str:000000000000053e .LASF64
     /tmp/ccOpcMyL.s:3880   .debug_str:00000000000000d6 .LASF65
     /tmp/ccOpcMyL.s:4054   .debug_str:00000000000005a7 .LASF66
     /tmp/ccOpcMyL.s:4012   .debug_str:00000000000004a4 .LASF67
     /tmp/ccOpcMyL.s:4188   .debug_str:0000000000000a44 .LASF68
     /tmp/ccOpcMyL.s:4162   .debug_str:0000000000000982 .LASF192
     /tmp/ccOpcMyL.s:4136   .debug_str:00000000000008eb .LASF69
     /tmp/ccOpcMyL.s:3960   .debug_str:000000000000031f .LASF70
     /tmp/ccOpcMyL.s:4056   .debug_str:00000000000005be .LASF193
     /tmp/ccOpcMyL.s:4192   .debug_str:0000000000000a85 .LASF71
     /tmp/ccOpcMyL.s:4026   .debug_str:00000000000004f0 .LASF72
     /tmp/ccOpcMyL.s:4240   .debug_str:0000000000000bdf .LASF74
     /tmp/ccOpcMyL.s:4070   .debug_str:0000000000000625 .LASF76
     /tmp/ccOpcMyL.s:4008   .debug_str:0000000000000490 .LASF78
     /tmp/ccOpcMyL.s:4170   .debug_str:00000000000009b6 .LASF80
     /tmp/ccOpcMyL.s:4150   .debug_str:000000000000093b .LASF81
     /tmp/ccOpcMyL.s:3902   .debug_str:000000000000017c .LASF82
     /tmp/ccOpcMyL.s:4118   .debug_str:00000000000007a1 .LASF161
     /tmp/ccOpcMyL.s:3852   .debug_str:0000000000000012 .LASF83
     /tmp/ccOpcMyL.s:3986   .debug_str:00000000000003db .LASF84
     /tmp/ccOpcMyL.s:4024   .debug_str:00000000000004ea .LASF85
     /tmp/ccOpcMyL.s:4176   .debug_str:00000000000009e9 .LASF86
     /tmp/ccOpcMyL.s:4174   .debug_str:00000000000009df .LASF87
     /tmp/ccOpcMyL.s:4144   .debug_str:000000000000091e .LASF88
     /tmp/ccOpcMyL.s:4050   .debug_str:000000000000058a .LASF89
     /tmp/ccOpcMyL.s:3916   .debug_str:00000000000001de .LASF90
     /tmp/ccOpcMyL.s:3882   .debug_str:00000000000000e2 .LASF91
     /tmp/ccOpcMyL.s:4014   .debug_str:00000000000004b1 .LASF93
     /tmp/ccOpcMyL.s:3918   .debug_str:00000000000001ef .LASF92
     /tmp/ccOpcMyL.s:3900   .debug_str:0000000000000169 .LASF94
     /tmp/ccOpcMyL.s:4232   .debug_str:0000000000000b8d .LASF194
     /tmp/ccOpcMyL.s:3860   .debug_str:0000000000000049 .LASF195
     /tmp/ccOpcMyL.s:4206   .debug_str:0000000000000ad7 .LASF95
     /tmp/ccOpcMyL.s:3904   .debug_str:0000000000000192 .LASF196
     /tmp/ccOpcMyL.s:3988   .debug_str:00000000000003e4 .LASF96
     /tmp/ccOpcMyL.s:3934   .debug_str:000000000000026a .LASF97
     /tmp/ccOpcMyL.s:4222   .debug_str:0000000000000b29 .LASF98
     /tmp/ccOpcMyL.s:3962   .debug_str:0000000000000342 .LASF99
     /tmp/ccOpcMyL.s:3970   .debug_str:000000000000036b .LASF100
     /tmp/ccOpcMyL.s:4112   .debug_str:0000000000000761 .LASF101
     /tmp/ccOpcMyL.s:3932   .debug_str:000000000000024f .LASF102
     /tmp/ccOpcMyL.s:3976   .debug_str:0000000000000396 .LASF103
GAS LISTING /tmp/ccOpcMyL.s 			page 33


     /tmp/ccOpcMyL.s:4216   .debug_str:0000000000000af9 .LASF104
     /tmp/ccOpcMyL.s:4184   .debug_str:0000000000000a28 .LASF105
     /tmp/ccOpcMyL.s:4178   .debug_str:00000000000009f1 .LASF106
     /tmp/ccOpcMyL.s:4092   .debug_str:00000000000006ea .LASF107
     /tmp/ccOpcMyL.s:4052   .debug_str:0000000000000592 .LASF108
     /tmp/ccOpcMyL.s:4080   .debug_str:0000000000000694 .LASF109
     /tmp/ccOpcMyL.s:4082   .debug_str:000000000000069b .LASF110
     /tmp/ccOpcMyL.s:4046   .debug_str:0000000000000576 .LASF111
     /tmp/ccOpcMyL.s:3996   .debug_str:000000000000043f .LASF112
     /tmp/ccOpcMyL.s:4218   .debug_str:0000000000000b13 .LASF113
     /tmp/ccOpcMyL.s:4134   .debug_str:00000000000008d7 .LASF114
     /tmp/ccOpcMyL.s:4040   .debug_str:0000000000000555 .LASF115
     /tmp/ccOpcMyL.s:3942   .debug_str:000000000000029e .LASF116
     /tmp/ccOpcMyL.s:4018   .debug_str:00000000000004d5 .LASF117
     /tmp/ccOpcMyL.s:4084   .debug_str:00000000000006ae .LASF118
     /tmp/ccOpcMyL.s:4242   .debug_str:0000000000000bea .LASF119
     /tmp/ccOpcMyL.s:3980   .debug_str:00000000000003a9 .LASF120
     /tmp/ccOpcMyL.s:4132   .debug_str:00000000000008d0 .LASF121
     /tmp/ccOpcMyL.s:4108   .debug_str:0000000000000747 .LASF122
     /tmp/ccOpcMyL.s:4110   .debug_str:000000000000075a .LASF123
     /tmp/ccOpcMyL.s:3896   .debug_str:000000000000014e .LASF124
     /tmp/ccOpcMyL.s:3924   .debug_str:000000000000020a .LASF125
     /tmp/ccOpcMyL.s:3966   .debug_str:0000000000000353 .LASF126
     /tmp/ccOpcMyL.s:3978   .debug_str:00000000000003a3 .LASF127
     /tmp/ccOpcMyL.s:3914   .debug_str:00000000000001cc .LASF128
     /tmp/ccOpcMyL.s:3866   .debug_str:0000000000000084 .LASF129
     /tmp/ccOpcMyL.s:4102   .debug_str:0000000000000723 .LASF130
     /tmp/ccOpcMyL.s:4094   .debug_str:00000000000006f3 .LASF131
     /tmp/ccOpcMyL.s:4164   .debug_str:000000000000098a .LASF132
     /tmp/ccOpcMyL.s:4210   .debug_str:0000000000000ae2 .LASF133
     /tmp/ccOpcMyL.s:4224   .debug_str:0000000000000b32 .LASF134
     /tmp/ccOpcMyL.s:3894   .debug_str:0000000000000144 .LASF135
     /tmp/ccOpcMyL.s:4028   .debug_str:000000000000050a .LASF136
     /tmp/ccOpcMyL.s:4214   .debug_str:0000000000000af4 .LASF137
     /tmp/ccOpcMyL.s:4058   .debug_str:00000000000005c3 .LASF138
     /tmp/ccOpcMyL.s:3874   .debug_str:00000000000000c7 .LASF139
     /tmp/ccOpcMyL.s:4160   .debug_str:0000000000000971 .LASF140
     /tmp/ccOpcMyL.s:4182   .debug_str:0000000000000a19 .LASF141
     /tmp/ccOpcMyL.s:3956   .debug_str:00000000000002f5 .LASF142
     /tmp/ccOpcMyL.s:4068   .debug_str:0000000000000610 .LASF143
     /tmp/ccOpcMyL.s:3990   .debug_str:00000000000003ed .LASF144
     /tmp/ccOpcMyL.s:3982   .debug_str:00000000000003bd .LASF145
     /tmp/ccOpcMyL.s:4154   .debug_str:0000000000000958 .LASF146
     /tmp/ccOpcMyL.s:4060   .debug_str:00000000000005d4 .LASF147
     /tmp/ccOpcMyL.s:4230   .debug_str:0000000000000b80 .LASF148
     /tmp/ccOpcMyL.s:4010   .debug_str:0000000000000496 .LASF149
     /tmp/ccOpcMyL.s:4172   .debug_str:00000000000009c6 .LASF150
     /tmp/ccOpcMyL.s:4166   .debug_str:00000000000009a2 .LASF151
     /tmp/ccOpcMyL.s:4226   .debug_str:0000000000000b48 .LASF152
     /tmp/ccOpcMyL.s:4168   .debug_str:00000000000009b1 .LASF153
     /tmp/ccOpcMyL.s:4120   .debug_str:00000000000007b9 .LASF154
     /tmp/ccOpcMyL.s:4140   .debug_str:0000000000000904 .LASF155
     /tmp/ccOpcMyL.s:4072   .debug_str:000000000000063b .LASF156
     /tmp/ccOpcMyL.s:4196   .debug_str:0000000000000a97 .LASF157
     /tmp/ccOpcMyL.s:4152   .debug_str:0000000000000946 .LASF158
     /tmp/ccOpcMyL.s:4016   .debug_str:00000000000004ca .LASF159
     /tmp/ccOpcMyL.s:4078   .debug_str:000000000000067e .LASF160
GAS LISTING /tmp/ccOpcMyL.s 			page 34


     /tmp/ccOpcMyL.s:3912   .debug_str:00000000000001c0 .LASF162
     /tmp/ccOpcMyL.s:3964   .debug_str:000000000000034d .LASF163
     /tmp/ccOpcMyL.s:4204   .debug_str:0000000000000ad0 .LASF164
     /tmp/ccOpcMyL.s:3972   .debug_str:0000000000000383 .LASF165
     /tmp/ccOpcMyL.s:4076   .debug_str:000000000000066e .LASF166
     /tmp/ccOpcMyL.s:3856   .debug_str:0000000000000027 .LASF167
     /tmp/ccOpcMyL.s:3870   .debug_str:00000000000000b0 .LASF168
     /tmp/ccOpcMyL.s:4198   .debug_str:0000000000000a9f .LASF169
     /tmp/ccOpcMyL.s:3950   .debug_str:00000000000002d3 .LASF170
     /tmp/ccOpcMyL.s:46     .text:0000000000000020 .LFB44
     /tmp/ccOpcMyL.s:781    .text:00000000000002c0 .LFE44
     /tmp/ccOpcMyL.s:3544   .debug_loc:0000000000000000 .LLST0
     /tmp/ccOpcMyL.s:4128   .debug_str:0000000000000805 .LASF171
     /tmp/ccOpcMyL.s:3555   .debug_loc:0000000000000036 .LLST1
     /tmp/ccOpcMyL.s:3834   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccOpcMyL.s:4208   .debug_str:0000000000000add .LASF172
     /tmp/ccOpcMyL.s:4212   .debug_str:0000000000000aec .LASF173
     /tmp/ccOpcMyL.s:3658   .debug_loc:00000000000001e5 .LLST6
     /tmp/ccOpcMyL.s:4088   .debug_str:00000000000006cb .LASF174
     /tmp/ccOpcMyL.s:3689   .debug_loc:000000000000027a .LLST7
     /tmp/ccOpcMyL.s:3696   .debug_loc:000000000000029d .LLST8
     /tmp/ccOpcMyL.s:3715   .debug_loc:00000000000002f9 .LLST9
     /tmp/ccOpcMyL.s:3886   .debug_str:0000000000000100 .LASF175
     /tmp/ccOpcMyL.s:3722   .debug_loc:000000000000031c .LLST10
     /tmp/ccOpcMyL.s:3922   .debug_str:0000000000000204 .LASF176
     /tmp/ccOpcMyL.s:3729   .debug_loc:000000000000033f .LLST11
     /tmp/ccOpcMyL.s:4032   .debug_str:000000000000052a .LASF177
     /tmp/ccOpcMyL.s:3736   .debug_loc:0000000000000362 .LLST12
     /tmp/ccOpcMyL.s:4002   .debug_str:000000000000046a .LASF178
     /tmp/ccOpcMyL.s:3743   .debug_loc:0000000000000385 .LLST13
     /tmp/ccOpcMyL.s:3750   .debug_loc:00000000000003a8 .LLST14
     /tmp/ccOpcMyL.s:4034   .debug_str:0000000000000531 .LASF179
     /tmp/ccOpcMyL.s:3757   .debug_loc:00000000000003cb .LLST15
     /tmp/ccOpcMyL.s:3872   .debug_str:00000000000000c2 .LASF180
     /tmp/ccOpcMyL.s:3764   .debug_loc:00000000000003ee .LLST16
     /tmp/ccOpcMyL.s:3771   .debug_loc:0000000000000411 .LLST17
     /tmp/ccOpcMyL.s:282    .text:0000000000000100 .LVL9
     /tmp/ccOpcMyL.s:366    .text:0000000000000138 .LVL17
     /tmp/ccOpcMyL.s:417    .text:000000000000015c .LVL23
     /tmp/ccOpcMyL.s:451    .text:0000000000000184 .LVL27
     /tmp/ccOpcMyL.s:476    .text:00000000000001a4 .LVL29
     /tmp/ccOpcMyL.s:501    .text:00000000000001bc .LVL33
     /tmp/ccOpcMyL.s:543    .text:00000000000001e8 .LVL38
     /tmp/ccOpcMyL.s:572    .text:0000000000000200 .LVL41
     /tmp/ccOpcMyL.s:601    .text:0000000000000218 .LVL44
     /tmp/ccOpcMyL.s:630    .text:0000000000000230 .LVL47
     /tmp/ccOpcMyL.s:170    .text:00000000000000ac .LBB64
     /tmp/ccOpcMyL.s:185    .text:00000000000000b8 .LBE64
     /tmp/ccOpcMyL.s:191    .text:00000000000000c0 .LBB66
     /tmp/ccOpcMyL.s:206    .text:00000000000000cc .LBE66
     /tmp/ccOpcMyL.s:303    .text:000000000000010c .LBB69
     /tmp/ccOpcMyL.s:314    .text:0000000000000110 .LBE69
     /tmp/ccOpcMyL.s:3778   .debug_loc:0000000000000434 .LLST18
     /tmp/ccOpcMyL.s:319    .text:0000000000000114 .LBB71
     /tmp/ccOpcMyL.s:331    .text:0000000000000118 .LBE71
     /tmp/ccOpcMyL.s:3785   .debug_loc:0000000000000457 .LLST19
     /tmp/ccOpcMyL.s:688    .text:000000000000026c .LBB54
GAS LISTING /tmp/ccOpcMyL.s 			page 35


     /tmp/ccOpcMyL.s:770    .text:00000000000002b4 .LBE54
     /tmp/ccOpcMyL.s:690    .text:000000000000026c .LBB55
     /tmp/ccOpcMyL.s:705    .text:0000000000000278 .LBE55
     /tmp/ccOpcMyL.s:709    .text:000000000000027c .LBB57
     /tmp/ccOpcMyL.s:724    .text:0000000000000288 .LBE57
     /tmp/ccOpcMyL.s:739    .text:00000000000002a4 .LBB59
     /tmp/ccOpcMyL.s:750    .text:00000000000002a8 .LBE59
     /tmp/ccOpcMyL.s:3792   .debug_loc:000000000000047a .LLST4
     /tmp/ccOpcMyL.s:755    .text:00000000000002ac .LBB61
     /tmp/ccOpcMyL.s:769    .text:00000000000002b4 .LBE61
     /tmp/ccOpcMyL.s:3799   .debug_loc:000000000000049d .LLST5
     /tmp/ccOpcMyL.s:734    .text:00000000000002a0 .LVL52
     /tmp/ccOpcMyL.s:60     .text:0000000000000034 .LBB38
     /tmp/ccOpcMyL.s:77     .text:0000000000000040 .LBE38
     /tmp/ccOpcMyL.s:79     .text:0000000000000040 .LBB40
     /tmp/ccOpcMyL.s:95     .text:000000000000004c .LBE40
     /tmp/ccOpcMyL.s:122    .text:0000000000000080 .LBB44
     /tmp/ccOpcMyL.s:137    .text:000000000000008c .LBE44
     /tmp/ccOpcMyL.s:142    .text:0000000000000094 .LBB46
     /tmp/ccOpcMyL.s:157    .text:00000000000000a0 .LBE46
     /tmp/ccOpcMyL.s:652    .text:000000000000023c .LBB49
     /tmp/ccOpcMyL.s:664    .text:0000000000000244 .LBE49
     /tmp/ccOpcMyL.s:3806   .debug_loc:00000000000004c0 .LLST2
     /tmp/ccOpcMyL.s:677    .text:0000000000000264 .LBB52
     /tmp/ccOpcMyL.s:685    .text:0000000000000268 .LBE52
     /tmp/ccOpcMyL.s:3814   .debug_loc:00000000000004e4 .LLST3
     /tmp/ccOpcMyL.s:120    .text:0000000000000080 .LVL3
     /tmp/ccOpcMyL.s:140    .text:0000000000000094 .LVL4
     /tmp/ccOpcMyL.s:160    .text:00000000000000a8 .LVL5
     /tmp/ccOpcMyL.s:776    .text:00000000000002bc .LVL57
     /tmp/ccOpcMyL.s:10     .text:0000000000000000 .LFB43
     /tmp/ccOpcMyL.s:40     .text:0000000000000020 .LFE43
     /tmp/ccOpcMyL.s:4194   .debug_str:0000000000000a92 .LASF181
     /tmp/ccOpcMyL.s:3968   .debug_str:0000000000000365 .LASF182
     /tmp/ccOpcMyL.s:3944   .debug_str:00000000000002b2 .LASF197
     /tmp/ccOpcMyL.s:3850   .debug_str:0000000000000000 .LASF183
     /tmp/ccOpcMyL.s:3928   .debug_str:0000000000000226 .LASF185
     /tmp/ccOpcMyL.s:3952   .debug_str:00000000000002d9 .LASF184
     /tmp/ccOpcMyL.s:75     .text:0000000000000040 .LVL0
     /tmp/ccOpcMyL.s:108    .text:000000000000005c .LVL2
     /tmp/ccOpcMyL.s:165    .text:00000000000000ac .LVL6
     /tmp/ccOpcMyL.s:216    .text:00000000000000dc .LVL7
     /tmp/ccOpcMyL.s:93     .text:000000000000004c .LVL1
     /tmp/ccOpcMyL.s:277    .text:00000000000000f8 .LVL8
     /tmp/ccOpcMyL.s:346    .text:000000000000012c .LVL15
     /tmp/ccOpcMyL.s:361    .text:0000000000000130 .LVL16
     /tmp/ccOpcMyL.s:381    .text:0000000000000144 .LVL18
     /tmp/ccOpcMyL.s:400    .text:000000000000014c .LVL20
     /tmp/ccOpcMyL.s:445    .text:000000000000017c .LVL26
     /tmp/ccOpcMyL.s:466    .text:0000000000000190 .LVL28
     /tmp/ccOpcMyL.s:479    .text:00000000000001a8 .LVL30
     /tmp/ccOpcMyL.s:495    .text:00000000000001b0 .LVL32
     /tmp/ccOpcMyL.s:529    .text:00000000000001dc .LVL36
     /tmp/ccOpcMyL.s:538    .text:00000000000001e0 .LVL37
     /tmp/ccOpcMyL.s:558    .text:00000000000001f4 .LVL39
     /tmp/ccOpcMyL.s:567    .text:00000000000001f8 .LVL40
     /tmp/ccOpcMyL.s:587    .text:000000000000020c .LVL42
GAS LISTING /tmp/ccOpcMyL.s 			page 36


     /tmp/ccOpcMyL.s:596    .text:0000000000000210 .LVL43
     /tmp/ccOpcMyL.s:616    .text:0000000000000224 .LVL45
     /tmp/ccOpcMyL.s:625    .text:0000000000000228 .LVL46
     /tmp/ccOpcMyL.s:645    .text:000000000000023c .LVL48
     /tmp/ccOpcMyL.s:766    .text:00000000000002b4 .LVL56
     /tmp/ccOpcMyL.s:425    .text:0000000000000168 .LVL24
     /tmp/ccOpcMyL.s:440    .text:0000000000000174 .LVL25
     /tmp/ccOpcMyL.s:509    .text:00000000000001c8 .LVL34
     /tmp/ccOpcMyL.s:524    .text:00000000000001d4 .LVL35
     /tmp/ccOpcMyL.s:489    .text:00000000000001ac .LVL31
     /tmp/ccOpcMyL.s:295    .text:0000000000000108 .LVL10
     /tmp/ccOpcMyL.s:406    .text:0000000000000150 .LVL21
     /tmp/ccOpcMyL.s:394    .text:0000000000000148 .LVL19
     /tmp/ccOpcMyL.s:412    .text:0000000000000154 .LVL22
     /tmp/ccOpcMyL.s:302    .text:000000000000010c .LVL11
     /tmp/ccOpcMyL.s:311    .text:0000000000000110 .LVL12
     /tmp/ccOpcMyL.s:318    .text:0000000000000114 .LVL13
     /tmp/ccOpcMyL.s:327    .text:0000000000000118 .LVL14
     /tmp/ccOpcMyL.s:738    .text:00000000000002a4 .LVL53
     /tmp/ccOpcMyL.s:747    .text:00000000000002a8 .LVL54
     /tmp/ccOpcMyL.s:754    .text:00000000000002ac .LVL55
     /tmp/ccOpcMyL.s:661    .text:0000000000000244 .LVL49
     /tmp/ccOpcMyL.s:676    .text:0000000000000264 .LVL50
     /tmp/ccOpcMyL.s:683    .text:0000000000000268 .LVL51
     /tmp/ccOpcMyL.s:792    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccOpcMyL.s:168    .text:00000000000000ac .LBB63
     /tmp/ccOpcMyL.s:332    .text:0000000000000118 .LBE63
     /tmp/ccOpcMyL.s:350    .text:000000000000012c .LBB74
     /tmp/ccOpcMyL.s:648    .text:000000000000023c .LBE74
     /tmp/ccOpcMyL.s:267    .text:00000000000000f4 .LBB68
     /tmp/ccOpcMyL.s:298    .text:0000000000000108 .LBE68
     /tmp/ccOpcMyL.s:351    .text:000000000000012c .LBB73
     /tmp/ccOpcMyL.s:647    .text:000000000000023c .LBE73

UNDEFINED SYMBOLS
_Z12printIntegerm
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPKv
_ZN3TCB12createThreadEPFvPvES0_S0_
_ZN3TCB10exitThreadEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN3sem13openSemaphoreEi
_ZN3sem14closeSemaphoreEv
_ZN3sem4waitEv
_ZN3sem6signalEv
_ZN3sem7trywaitEv
_ZN3TCB7runningE
console_handler
