GAS LISTING /tmp/ccWhwkRm.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB41:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by os on 5/17/24.
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   7:src/riscv.cpp **** 
   8:src/riscv.cpp **** 
   9:src/riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 9 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  10:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 10 5
  21              		.loc 1 10 38 is_stmt 0
  22              	#APP
  23              	# 10 "src/riscv.cpp" 1
  11              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 11 5 is_stmt 1
  27              		.loc 1 11 29 is_stmt 0
  28              	# 11 "src/riscv.cpp" 1
  12              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 12 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE41:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB42:
  13:src/riscv.cpp **** 
  14:src/riscv.cpp **** void Riscv::handleSupervisorTrap() {
GAS LISTING /tmp/ccWhwkRm.s 			page 2


  47              		.loc 1 14 36 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F9 		addi	sp,sp,-112
  50              		.cfi_def_cfa_offset 112
  51 0024 23341106 		sd	ra,104(sp)
  52 0028 23308106 		sd	s0,96(sp)
  53 002c 233C9104 		sd	s1,88(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57 0030 13040107 		addi	s0,sp,112
  58              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp **** 
  16:src/riscv.cpp ****     uint64 ra = r_a0();
  59              		.loc 1 16 5
  60              	.LBB34:
  61              	.LBB35:
  62              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../lib/console.h"
  10:src/../h/riscv.hpp **** #include "print.hpp"
  11:src/../h/riscv.hpp **** #include "tcb.hpp"
  12:src/../h/riscv.hpp **** #include "MemoryAllocator.hpp"
  13:src/../h/riscv.hpp **** #include "semaphore.hpp"
  14:src/../h/riscv.hpp **** class Riscv
  15:src/../h/riscv.hpp **** {
  16:src/../h/riscv.hpp **** public:
  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp ****     //pop sstatus spp and sstatus spie
  19:src/../h/riscv.hpp ****     static void popSppSpie();
  20:src/../h/riscv.hpp ****     //push x3..31 registers
  21:src/../h/riscv.hpp ****     static void pushRegisters();
  22:src/../h/riscv.hpp ****     //pop x3..31 regiesters
  23:src/../h/riscv.hpp ****     static void popRegisters();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // read register scause
  26:src/../h/riscv.hpp ****     static uint64 r_scause();
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // write register scause
  29:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // read register sepc
  32:src/../h/riscv.hpp ****     static uint64 r_sepc();
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // write register sepc
  35:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // read register stvec
  38:src/../h/riscv.hpp ****     static uint64 r_stvec();
  39:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccWhwkRm.s 			page 3


  40:src/../h/riscv.hpp ****     // write register stvec
  41:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // read register stval
  44:src/../h/riscv.hpp ****     static uint64 r_stval();
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     // write register stval
  47:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  48:src/../h/riscv.hpp **** 
  49:src/../h/riscv.hpp ****     enum BitMaskSip
  50:src/../h/riscv.hpp ****     {
  51:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  52:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  53:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  54:src/../h/riscv.hpp ****     };
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // mask set register sip
  57:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // mask clear register sip
  60:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     // read register sip
  63:src/../h/riscv.hpp ****     static uint64 r_sip();
  64:src/../h/riscv.hpp **** 
  65:src/../h/riscv.hpp ****     // write register sip
  66:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  67:src/../h/riscv.hpp **** 
  68:src/../h/riscv.hpp ****     enum BitMaskSstatus
  69:src/../h/riscv.hpp ****     {
  70:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  71:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  72:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  73:src/../h/riscv.hpp ****     };
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // mask set register sstatus
  76:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // mask clear register sstatus
  79:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // read register sstatus
  82:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // write register sstatus
  85:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp ****     //read a0 register
  88:src/../h/riscv.hpp ****     static uint64 r_a0();
  89:src/../h/riscv.hpp **** 
  90:src/../h/riscv.hpp ****     //write to a0 register
  91:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp ****     static void supervisorTrap();
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp **** private:
  96:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
GAS LISTING /tmp/ccWhwkRm.s 			page 4


  97:src/../h/riscv.hpp **** };
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 101:src/../h/riscv.hpp **** {
 102:src/../h/riscv.hpp ****     uint64 volatile scause;
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 104:src/../h/riscv.hpp ****     return scause;
 105:src/../h/riscv.hpp **** }
 106:src/../h/riscv.hpp **** 
 107:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 108:src/../h/riscv.hpp **** {
 109:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 110:src/../h/riscv.hpp **** }
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 113:src/../h/riscv.hpp **** {
 114:src/../h/riscv.hpp ****     uint64 volatile sepc;
 115:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 116:src/../h/riscv.hpp ****     return sepc;
 117:src/../h/riscv.hpp **** }
 118:src/../h/riscv.hpp **** 
 119:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 120:src/../h/riscv.hpp **** {
 121:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 122:src/../h/riscv.hpp **** }
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     uint64 volatile stvec;
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 128:src/../h/riscv.hpp ****     return stvec;
 129:src/../h/riscv.hpp **** }
 130:src/../h/riscv.hpp **** 
 131:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 132:src/../h/riscv.hpp **** {
 133:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     uint64 volatile stval;
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 140:src/../h/riscv.hpp ****     return stval;
 141:src/../h/riscv.hpp **** }
 142:src/../h/riscv.hpp **** 
 143:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 144:src/../h/riscv.hpp **** {
 145:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 146:src/../h/riscv.hpp **** }
 147:src/../h/riscv.hpp **** 
 148:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 149:src/../h/riscv.hpp **** {
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 151:src/../h/riscv.hpp **** }
 152:src/../h/riscv.hpp **** 
 153:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
GAS LISTING /tmp/ccWhwkRm.s 			page 5


 154:src/../h/riscv.hpp **** {
 155:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 156:src/../h/riscv.hpp **** }
 157:src/../h/riscv.hpp **** 
 158:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 159:src/../h/riscv.hpp **** {
 160:src/../h/riscv.hpp ****     uint64 volatile sip;
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 162:src/../h/riscv.hpp ****     return sip;
 163:src/../h/riscv.hpp **** }
 164:src/../h/riscv.hpp **** 
 165:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 166:src/../h/riscv.hpp **** {
 167:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 168:src/../h/riscv.hpp **** }
 169:src/../h/riscv.hpp **** 
 170:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 171:src/../h/riscv.hpp **** {
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 173:src/../h/riscv.hpp **** }
 174:src/../h/riscv.hpp **** 
 175:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 176:src/../h/riscv.hpp **** {
 177:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 178:src/../h/riscv.hpp **** }
 179:src/../h/riscv.hpp **** 
 180:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 181:src/../h/riscv.hpp **** {
 182:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 183:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 184:src/../h/riscv.hpp ****     return sstatus;
 185:src/../h/riscv.hpp **** }
 186:src/../h/riscv.hpp **** 
 187:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 188:src/../h/riscv.hpp **** {
 189:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 190:src/../h/riscv.hpp **** }
 191:src/../h/riscv.hpp **** 
 192:src/../h/riscv.hpp **** //a0
 193:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 194:src/../h/riscv.hpp **** {
 195:src/../h/riscv.hpp ****     uint64 volatile a0;
  63              		.loc 2 195 5
 196:src/../h/riscv.hpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
  64              		.loc 2 196 5
  65              		.loc 2 196 46 is_stmt 0
  66              	#APP
  67              	# 196 "src/../h/riscv.hpp" 1
 197              	    return a0;
  68              		mv a5, a0
  69              	# 0 "" 2
  70              	#NO_APP
  71 0038 233CF4FA 		sd	a5,-72(s0)
  72              		.loc 2 197 5 is_stmt 1
  73              		.loc 2 197 12 is_stmt 0
  74 003c 833784FB 		ld	a5,-72(s0)
  75              	.LVL0:
GAS LISTING /tmp/ccWhwkRm.s 			page 6


  76              	.LBE35:
  77              	.LBE34:
  17:src/riscv.cpp ****     uint64 scause = r_scause();
  78              		.loc 1 17 5 is_stmt 1
  79              	.LBB36:
  80              	.LBB37:
 102:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  81              		.loc 2 102 5
 103:src/../h/riscv.hpp ****     return scause;
  82              		.loc 2 103 5
 103:src/../h/riscv.hpp ****     return scause;
  83              		.loc 2 103 72 is_stmt 0
  84              	#APP
  85              	# 103 "src/../h/riscv.hpp" 1
  86              		csrr a4, scause
  87              	# 0 "" 2
  88              	#NO_APP
  89 0044 2338E4FA 		sd	a4,-80(s0)
 104:src/../h/riscv.hpp **** }
  90              		.loc 2 104 5 is_stmt 1
 104:src/../h/riscv.hpp **** }
  91              		.loc 2 104 12 is_stmt 0
  92 0048 033704FB 		ld	a4,-80(s0)
  93              	.LVL1:
  94              	.LBE37:
  95              	.LBE36:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){//pomera registar a3??
  96              		.loc 1 19 5 is_stmt 1
  97              	.LBB38:
  98              		.loc 1 19 39 is_stmt 0
  99 004c 130687FF 		addi	a2,a4,-8
 100              		.loc 1 19 5
 101 0050 93061000 		li	a3,1
 102 0054 63F8C602 		bleu	a2,a3,.L26
 103              	.LBE38:
  20:src/riscv.cpp ****         //environment call
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  23:src/riscv.cpp ****         int ret;
  24:src/riscv.cpp ****         semaphore ** shandle;
  25:src/riscv.cpp ****         semaphore * id;
  26:src/riscv.cpp ****         switch (ra) {
  27:src/riscv.cpp ****             case 0x01:
  28:src/riscv.cpp ****                 size_t size;
  29:src/riscv.cpp ****                 void *mallocr;
  30:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
  31:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
  32:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
  33:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  34:src/riscv.cpp ****                 break;
  35:src/riscv.cpp **** 
  36:src/riscv.cpp ****             case 0x02:
  37:src/riscv.cpp ****                 void *freep;
  38:src/riscv.cpp ****                 int greska;
  39:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
  40:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
GAS LISTING /tmp/ccWhwkRm.s 			page 7


  41:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
  42:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  43:src/riscv.cpp ****                 break;
  44:src/riscv.cpp **** 
  45:src/riscv.cpp ****             case 0x11:
  46:src/riscv.cpp ****                 TCB::Body start_routine;
  47:src/riscv.cpp ****                 void* arg;
  48:src/riscv.cpp ****                 thread_t* thandle;
  49:src/riscv.cpp ****                 void* stek;
  50:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
  51:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
  53:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
  54:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
  55:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
  56:src/riscv.cpp ****                 else ret = -1;
  57:src/riscv.cpp **** 
  58:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  59:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  60:src/riscv.cpp ****                 break;
  61:src/riscv.cpp **** 
  62:src/riscv.cpp ****             case 0x12:
  63:src/riscv.cpp ****                 ret = TCB::exitThread();
  64:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  65:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  66:src/riscv.cpp ****                 break;
  67:src/riscv.cpp **** 
  68:src/riscv.cpp ****             case 0x13:
  69:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
  70:src/riscv.cpp ****                 TCB::dispatch();
  71:src/riscv.cpp ****                 break;
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****             case 0x21:
  74:src/riscv.cpp ****                 int val;
  75:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
  76:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
  77:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
  78:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
  79:src/riscv.cpp ****                 else ret = -1;
  80:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  81:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  82:src/riscv.cpp ****                 break;
  83:src/riscv.cpp **** 
  84:src/riscv.cpp ****             case 0x22:
  85:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
  86:src/riscv.cpp ****                 ret = id->semaphore::closeSemaphore();
  87:src/riscv.cpp ****                 //MemoryAllocator::mem_free(id);
  88:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  89:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  90:src/riscv.cpp ****                 break;
  91:src/riscv.cpp **** 
  92:src/riscv.cpp ****             case 0x23:
  93:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
  94:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
  95:src/riscv.cpp ****                 else ret = -1;
  96:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  97:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
GAS LISTING /tmp/ccWhwkRm.s 			page 8


  98:src/riscv.cpp ****                 break;
  99:src/riscv.cpp **** 
 100:src/riscv.cpp ****             case 0x24:
 101:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 102:src/riscv.cpp ****                 ret = id->semaphore::signal();
 103:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 104:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 105:src/riscv.cpp ****                 break;
 106:src/riscv.cpp **** 
 107:src/riscv.cpp ****             case 0x26:
 108:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 109:src/riscv.cpp ****                 ret = id->semaphore::trywait();
 110:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 111:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 112:src/riscv.cpp ****                 break;
 113:src/riscv.cpp ****             default:
 114:src/riscv.cpp ****                     break;
 115:src/riscv.cpp **** 
 116:src/riscv.cpp ****         }
 117:src/riscv.cpp **** 
 118:src/riscv.cpp ****         w_sstatus(sstatus);
 119:src/riscv.cpp ****         w_sepc(sepc);
 120:src/riscv.cpp ****     }
 121:src/riscv.cpp ****     else if(scause == 0x8000000000000001UL){
 104              		.loc 1 121 10 is_stmt 1
 105              	.LBB68:
 106              	.LBB39:
 107 0058 9307F0FF 		li	a5,-1
 108              	.LVL2:
 109 005c 9397F703 		slli	a5,a5,63
 110 0060 93871700 		addi	a5,a5,1
 111 0064 630EF71A 		beq	a4,a5,.L27
 122:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 123:src/riscv.cpp ****         TCB::timeSliceCounter++;
 124:src/riscv.cpp ****         //supervisor software interrupt; timer
 125:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 126:src/riscv.cpp **** 
 127:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 128:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 129:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 130:src/riscv.cpp ****             TCB::dispatch();
 131:src/riscv.cpp ****             w_sstatus(sstatus);
 132:src/riscv.cpp ****             w_sepc(sepc);
 133:src/riscv.cpp ****         }
 134:src/riscv.cpp **** 
 135:src/riscv.cpp **** 
 136:src/riscv.cpp ****     }else if(scause == 0x8000000000000009UL){
 112              		.loc 1 136 11
 113 0068 9307F0FF 		li	a5,-1
 114 006c 9397F703 		slli	a5,a5,63
 115 0070 93879700 		addi	a5,a5,9
 116 0074 631EF706 		bne	a4,a5,.L3
 137:src/riscv.cpp ****         // supervisor external interrupt; console
 138:src/riscv.cpp **** 
 139:src/riscv.cpp ****         console_handler();
 117              		.loc 1 139 9
 118              		.loc 1 139 24 is_stmt 0
GAS LISTING /tmp/ccWhwkRm.s 			page 9


 119 0078 97000000 		call	console_handler@plt
 119      E7800000 
 120              	.LVL3:
 121              	.LBE39:
 122              	.LBE68:
 140:src/riscv.cpp ****     }else{
 141:src/riscv.cpp ****         //unexpected interrupt;
 142:src/riscv.cpp ****         //printInteger(scause);
 143:src/riscv.cpp ****         //printInteger(r_sepc());
 144:src/riscv.cpp ****         //printInteger(r_stval());
 145:src/riscv.cpp ****     }
 146:src/riscv.cpp **** };...
 123              		.loc 1 146 1
 124 0080 6F000007 		j	.L3
 125              	.LVL4:
 126              	.L26:
 127              	.LBB69:
 128              	.LBB55:
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 129              		.loc 1 21 9 is_stmt 1
 130              	.LBB56:
 131              	.LBB57:
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 132              		.loc 2 114 5
 115:src/../h/riscv.hpp ****     return sepc;
 133              		.loc 2 115 5
 115:src/../h/riscv.hpp ****     return sepc;
 134              		.loc 2 115 64 is_stmt 0
 135              	#APP
 136              	# 115 "src/../h/riscv.hpp" 1
 137              		csrr a4, sepc
 138              	# 0 "" 2
 139              	.LVL5:
 140              	#NO_APP
 141 0088 2334E4FC 		sd	a4,-56(s0)
 116:src/../h/riscv.hpp **** }
 142              		.loc 2 116 5 is_stmt 1
 116:src/../h/riscv.hpp **** }
 143              		.loc 2 116 12 is_stmt 0
 144 008c 033784FC 		ld	a4,-56(s0)
 145              	.LBE57:
 146              	.LBE56:
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 147              		.loc 1 21 41
 148 0090 13074700 		addi	a4,a4,4
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 149              		.loc 1 21 42
 150 0094 2338E4F8 		sd	a4,-112(s0)
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 151              		.loc 1 22 9 is_stmt 1
 152              	.LBB58:
 153              	.LBB59:
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 154              		.loc 2 182 5
 183:src/../h/riscv.hpp ****     return sstatus;
 155              		.loc 2 183 5
 183:src/../h/riscv.hpp ****     return sstatus;
GAS LISTING /tmp/ccWhwkRm.s 			page 10


 156              		.loc 2 183 76 is_stmt 0
 157              	#APP
 158              	# 183 "src/../h/riscv.hpp" 1
 159              		csrr a4, sstatus
 160              	# 0 "" 2
 161              	#NO_APP
 162 009c 2330E4FC 		sd	a4,-64(s0)
 184:src/../h/riscv.hpp **** }
 163              		.loc 2 184 5 is_stmt 1
 184:src/../h/riscv.hpp **** }
 164              		.loc 2 184 12 is_stmt 0
 165 00a0 033704FC 		ld	a4,-64(s0)
 166              	.LBE59:
 167              	.LBE58:
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 168              		.loc 1 22 45
 169 00a4 233CE4F8 		sd	a4,-104(s0)
  23:src/riscv.cpp ****         int ret;
 170              		.loc 1 23 9 is_stmt 1
  24:src/riscv.cpp ****         semaphore ** shandle;
 171              		.loc 1 24 9
  25:src/riscv.cpp ****         semaphore * id;
 172              		.loc 1 25 9
  26:src/riscv.cpp ****         switch (ra) {
 173              		.loc 1 26 9
 174 00a8 13076002 		li	a4,38
 175 00ac 636AF702 		bgtu	a5,a4,.L5
 176 00b0 93972700 		slli	a5,a5,2
 177              	.LVL6:
 178 00b4 17070000 		lla	a4,.L7
 178      13070700 
 179 00bc B387E700 		add	a5,a5,a4
 180 00c0 83A70700 		lw	a5,0(a5)
 181 00c4 B387E700 		add	a5,a5,a4
 182 00c8 67800700 		jr	a5
 183              		.section	.rodata
 184              		.align	2
 185              		.align	2
 186              	.L7:
 187 0000 00000000 		.word	.L5-.L7
 188 0004 00000000 		.word	.L16-.L7
 189 0008 00000000 		.word	.L15-.L7
 190 000c 00000000 		.word	.L5-.L7
 191 0010 00000000 		.word	.L5-.L7
 192 0014 00000000 		.word	.L5-.L7
 193 0018 00000000 		.word	.L5-.L7
 194 001c 00000000 		.word	.L5-.L7
 195 0020 00000000 		.word	.L5-.L7
 196 0024 00000000 		.word	.L5-.L7
 197 0028 00000000 		.word	.L5-.L7
 198 002c 00000000 		.word	.L5-.L7
 199 0030 00000000 		.word	.L5-.L7
 200 0034 00000000 		.word	.L5-.L7
 201 0038 00000000 		.word	.L5-.L7
 202 003c 00000000 		.word	.L5-.L7
 203 0040 00000000 		.word	.L5-.L7
 204 0044 00000000 		.word	.L14-.L7
GAS LISTING /tmp/ccWhwkRm.s 			page 11


 205 0048 00000000 		.word	.L13-.L7
 206 004c 00000000 		.word	.L12-.L7
 207 0050 00000000 		.word	.L5-.L7
 208 0054 00000000 		.word	.L5-.L7
 209 0058 00000000 		.word	.L5-.L7
 210 005c 00000000 		.word	.L5-.L7
 211 0060 00000000 		.word	.L5-.L7
 212 0064 00000000 		.word	.L5-.L7
 213 0068 00000000 		.word	.L5-.L7
 214 006c 00000000 		.word	.L5-.L7
 215 0070 00000000 		.word	.L5-.L7
 216 0074 00000000 		.word	.L5-.L7
 217 0078 00000000 		.word	.L5-.L7
 218 007c 00000000 		.word	.L5-.L7
 219 0080 00000000 		.word	.L5-.L7
 220 0084 00000000 		.word	.L11-.L7
 221 0088 00000000 		.word	.L10-.L7
 222 008c 00000000 		.word	.L9-.L7
 223 0090 00000000 		.word	.L8-.L7
 224 0094 00000000 		.word	.L5-.L7
 225 0098 00000000 		.word	.L6-.L7
 226              		.text
 227              	.L16:
 228              	.LBB60:
  27:src/riscv.cpp ****             case 0x01:
 229              		.loc 1 27 13
  28:src/riscv.cpp ****                 size_t size;
 230              		.loc 1 28 17
  29:src/riscv.cpp ****                 void *mallocr;
 231              		.loc 1 29 17
  30:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
 232              		.loc 1 30 17
  30:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
 233              		.loc 1 30 61 is_stmt 0
 234              	#APP
 235              	# 30 "src/riscv.cpp" 1
 236              		ld a0, 88(x8)
 237              	# 0 "" 2
 238              	.LVL7:
  31:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 239              		.loc 1 31 17 is_stmt 1
  31:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 240              		.loc 1 31 53 is_stmt 0
 241              	#NO_APP
 242 00d0 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 242      E7800000 
 243              	.LVL8:
  32:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 244              		.loc 1 32 17 is_stmt 1
  32:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 245              		.loc 1 32 60 is_stmt 0
 246              	#APP
 247              	# 32 "src/riscv.cpp" 1
  33:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 248              		mv t0, a0
 249              	# 0 "" 2
 250              		.loc 1 33 17 is_stmt 1
GAS LISTING /tmp/ccWhwkRm.s 			page 12


  33:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 251              		.loc 1 33 50 is_stmt 0
 252              	# 33 "src/riscv.cpp" 1
  34:src/riscv.cpp ****                 break;
 253              		sd t0, 80(x8)
 254              	# 0 "" 2
 255              		.loc 1 34 17 is_stmt 1
 256              	.LVL9:
 257              	#NO_APP
 258              	.L5:
 259              	.LBE60:
 118:src/riscv.cpp ****         w_sstatus(sstatus);
 260              		.loc 1 118 9
 118:src/riscv.cpp ****         w_sstatus(sstatus);
 261              		.loc 1 118 18 is_stmt 0
 262 00e0 833784F9 		ld	a5,-104(s0)
 263              	.LVL10:
 264              	.LBB61:
 265              	.LBB62:
 189:src/../h/riscv.hpp **** }
 266              		.loc 2 189 5 is_stmt 1
 189:src/../h/riscv.hpp **** }
 267              		.loc 2 189 77 is_stmt 0
 268              	#APP
 269              	# 189 "src/../h/riscv.hpp" 1
 270              		csrw sstatus, a5
 271              	# 0 "" 2
 272              	.LVL11:
 273              	#NO_APP
 274              	.LBE62:
 275              	.LBE61:
 119:src/riscv.cpp ****         w_sepc(sepc);
 276              		.loc 1 119 9 is_stmt 1
 119:src/riscv.cpp ****         w_sepc(sepc);
 277              		.loc 1 119 15 is_stmt 0
 278 00e8 833704F9 		ld	a5,-112(s0)
 279              	.LVL12:
 280              	.LBB63:
 281              	.LBB64:
 121:src/../h/riscv.hpp **** }
 282              		.loc 2 121 5 is_stmt 1
 121:src/../h/riscv.hpp **** }
 283              		.loc 2 121 65 is_stmt 0
 284              	#APP
 285              	# 121 "src/../h/riscv.hpp" 1
 286              		csrw sepc, a5
 287              	# 0 "" 2
 288              	.LVL13:
 289              	#NO_APP
 290              	.L3:
 291              	.LBE64:
 292              	.LBE63:
 293              	.LBE55:
 294              	.LBE69:
 295              		.loc 1 146 1
 296 00f0 83308106 		ld	ra,104(sp)
 297              		.cfi_remember_state
GAS LISTING /tmp/ccWhwkRm.s 			page 13


 298              		.cfi_restore 1
 299 00f4 03340106 		ld	s0,96(sp)
 300              		.cfi_restore 8
 301              		.cfi_def_cfa 2, 112
 302 00f8 83348105 		ld	s1,88(sp)
 303              		.cfi_restore 9
 304 00fc 13010107 		addi	sp,sp,112
 305              		.cfi_def_cfa_offset 0
 306 0100 67800000 		jr	ra
 307              	.LVL14:
 308              	.L15:
 309              		.cfi_restore_state
 310              	.LBB70:
 311              	.LBB66:
 312              	.LBB65:
  36:src/riscv.cpp ****             case 0x02:
 313              		.loc 1 36 13 is_stmt 1
  37:src/riscv.cpp ****                 void *freep;
 314              		.loc 1 37 17
  38:src/riscv.cpp ****                 int greska;
 315              		.loc 1 38 17
  39:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
 316              		.loc 1 39 17
  39:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
 317              		.loc 1 39 62 is_stmt 0
 318              	#APP
 319              	# 39 "src/riscv.cpp" 1
 320              		ld a0, 88(x8)
 321              	# 0 "" 2
 322              	.LVL15:
  40:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 323              		.loc 1 40 17 is_stmt 1
  40:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 324              		.loc 1 40 51 is_stmt 0
 325              	#NO_APP
 326 0108 97000000 		call	_ZN15MemoryAllocator8mem_freeEPKv@plt
 326      E7800000 
 327              	.LVL16:
  41:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 328              		.loc 1 41 17 is_stmt 1
  41:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 329              		.loc 1 41 60 is_stmt 0
 330              	#APP
 331              	# 41 "src/riscv.cpp" 1
  42:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 332              		mv t0, a0
 333              	# 0 "" 2
 334              		.loc 1 42 17 is_stmt 1
  42:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 335              		.loc 1 42 50 is_stmt 0
 336              	# 42 "src/riscv.cpp" 1
  43:src/riscv.cpp ****                 break;
 337              		sd t0, 80(x8)
 338              	# 0 "" 2
 339              		.loc 1 43 17 is_stmt 1
 340              	#NO_APP
 341 0118 6FF09FFC 		j	.L5
GAS LISTING /tmp/ccWhwkRm.s 			page 14


 342              	.LVL17:
 343              	.L14:
  45:src/riscv.cpp ****             case 0x11:
 344              		.loc 1 45 13
  46:src/riscv.cpp ****                 TCB::Body start_routine;
 345              		.loc 1 46 17
  47:src/riscv.cpp ****                 void* arg;
 346              		.loc 1 47 17
  48:src/riscv.cpp ****                 thread_t* thandle;
 347              		.loc 1 48 17
  49:src/riscv.cpp ****                 void* stek;
 348              		.loc 1 49 17
  50:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
 349              		.loc 1 50 17
  50:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
 350              		.loc 1 50 65 is_stmt 0
 351              	#APP
 352              	# 50 "src/riscv.cpp" 1
 353              		ld s1, 88(x8)
 354              	# 0 "" 2
 355              	.LVL18:
  51:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 356              		.loc 1 51 17 is_stmt 1
  51:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 357              		.loc 1 51 71 is_stmt 0
 358              	# 51 "src/riscv.cpp" 1
 359              		ld a0, 96(x8)
 360              	# 0 "" 2
 361              	.LVL19:
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 362              		.loc 1 52 17 is_stmt 1
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 363              		.loc 1 52 62 is_stmt 0
 364              	# 52 "src/riscv.cpp" 1
 365              		ld a1, 104(x8)
 366              	# 0 "" 2
 367              	.LVL20:
  53:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
 368              		.loc 1 53 17 is_stmt 1
  53:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
 369              		.loc 1 53 63 is_stmt 0
 370              	# 53 "src/riscv.cpp" 1
 371              		ld a2, 112(x8)
 372              	# 0 "" 2
 373              	.LVL21:
  54:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 374              		.loc 1 54 17 is_stmt 1
  54:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 375              		.loc 1 54 45 is_stmt 0
 376              	#NO_APP
 377 012c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_@plt
 377      E7800000 
 378              	.LVL22:
  54:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 379              		.loc 1 54 26
 380 0134 23B0A400 		sd	a0,0(s1)
  55:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
GAS LISTING /tmp/ccWhwkRm.s 			page 15


 381              		.loc 1 55 17 is_stmt 1
 382 0138 630A0500 		beqz	a0,.L22
  55:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
 383              		.loc 1 55 45 is_stmt 0
 384 013c 93070000 		li	a5,0
 385              	.L17:
 386              	.LVL23:
  58:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 387              		.loc 1 58 17 is_stmt 1
  58:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 388              		.loc 1 58 57 is_stmt 0
 389              	#APP
 390              	# 58 "src/riscv.cpp" 1
  59:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 391              		mv t0, a5
 392              	# 0 "" 2
 393              		.loc 1 59 17 is_stmt 1
  59:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 394              		.loc 1 59 50 is_stmt 0
 395              	# 59 "src/riscv.cpp" 1
  60:src/riscv.cpp ****                 break;
 396              		sd t0, 80(x8)
 397              	# 0 "" 2
 398              		.loc 1 60 17 is_stmt 1
 399              	#NO_APP
 400 0148 6FF09FF9 		j	.L5
 401              	.LVL24:
 402              	.L22:
  56:src/riscv.cpp ****                 else ret = -1;
 403              		.loc 1 56 26 is_stmt 0
 404 014c 9307F0FF 		li	a5,-1
 405 0150 6FF01FFF 		j	.L17
 406              	.LVL25:
 407              	.L13:
  62:src/riscv.cpp ****             case 0x12:
 408              		.loc 1 62 13 is_stmt 1
  63:src/riscv.cpp ****                 ret = TCB::exitThread();
 409              		.loc 1 63 17
  63:src/riscv.cpp ****                 ret = TCB::exitThread();
 410              		.loc 1 63 38 is_stmt 0
 411 0154 97000000 		call	_ZN3TCB10exitThreadEv@plt
 411      E7800000 
 412              	.LVL26:
  64:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 413              		.loc 1 64 17 is_stmt 1
  64:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 414              		.loc 1 64 57 is_stmt 0
 415              	#APP
 416              	# 64 "src/riscv.cpp" 1
  65:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 417              		mv t0, a0
 418              	# 0 "" 2
 419              		.loc 1 65 17 is_stmt 1
  65:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 420              		.loc 1 65 50 is_stmt 0
 421              	# 65 "src/riscv.cpp" 1
  66:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccWhwkRm.s 			page 16


 422              		sw t0, 80(x8)
 423              	# 0 "" 2
 424              		.loc 1 66 17 is_stmt 1
 425              	#NO_APP
 426 0164 6FF0DFF7 		j	.L5
 427              	.LVL27:
 428              	.L12:
  68:src/riscv.cpp ****             case 0x13:
 429              		.loc 1 68 13
  69:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 430              		.loc 1 69 17
  69:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 431              		.loc 1 69 38 is_stmt 0
 432 0168 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 432      83B70700 
 433 0170 23B00700 		sd	zero,0(a5)
  70:src/riscv.cpp ****                 TCB::dispatch();
 434              		.loc 1 70 17 is_stmt 1
  70:src/riscv.cpp ****                 TCB::dispatch();
 435              		.loc 1 70 30 is_stmt 0
 436 0174 97000000 		call	_ZN3TCB8dispatchEv@plt
 436      E7800000 
 437              	.LVL28:
  71:src/riscv.cpp ****                 break;
 438              		.loc 1 71 17 is_stmt 1
 439 017c 6FF05FF6 		j	.L5
 440              	.LVL29:
 441              	.L11:
  73:src/riscv.cpp ****             case 0x21:
 442              		.loc 1 73 13
  74:src/riscv.cpp ****                 int val;
 443              		.loc 1 74 17
  75:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 444              		.loc 1 75 17
  75:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 445              		.loc 1 75 65 is_stmt 0
 446              	#APP
 447              	# 75 "src/riscv.cpp" 1
 448              		ld s1, 88(x8)
 449              	# 0 "" 2
 450              	.LVL30:
  76:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
 451              		.loc 1 76 17 is_stmt 1
  76:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
 452              		.loc 1 76 61 is_stmt 0
 453              	# 76 "src/riscv.cpp" 1
 454              		ld a0, 96(x8)
 455              	# 0 "" 2
 456              	.LVL31:
  77:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
 457              		.loc 1 77 17 is_stmt 1
  77:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
 458              		.loc 1 77 52 is_stmt 0
 459              	#NO_APP
 460 0188 1B050500 		sext.w	a0,a0
 461 018c 97000000 		call	_ZN9semaphore13openSemaphoreEi@plt
 461      E7800000 
GAS LISTING /tmp/ccWhwkRm.s 			page 17


 462              	.LVL32:
  77:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
 463              		.loc 1 77 26
 464 0194 23B0A400 		sd	a0,0(s1)
  78:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
 465              		.loc 1 78 17 is_stmt 1
 466 0198 630A0500 		beqz	a0,.L23
  78:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
 467              		.loc 1 78 45 is_stmt 0
 468 019c 93070000 		li	a5,0
 469              	.L18:
 470              	.LVL33:
  80:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 471              		.loc 1 80 17 is_stmt 1
  80:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 472              		.loc 1 80 57 is_stmt 0
 473              	#APP
 474              	# 80 "src/riscv.cpp" 1
  81:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 475              		mv t0, a5
 476              	# 0 "" 2
 477              		.loc 1 81 17 is_stmt 1
  81:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 478              		.loc 1 81 50 is_stmt 0
 479              	# 81 "src/riscv.cpp" 1
  82:src/riscv.cpp ****                 break;
 480              		sw t0, 80(x8)
 481              	# 0 "" 2
 482              		.loc 1 82 17 is_stmt 1
 483              	#NO_APP
 484 01a8 6FF09FF3 		j	.L5
 485              	.LVL34:
 486              	.L23:
  79:src/riscv.cpp ****                 else ret = -1;
 487              		.loc 1 79 26 is_stmt 0
 488 01ac 9307F0FF 		li	a5,-1
 489 01b0 6FF01FFF 		j	.L18
 490              	.LVL35:
 491              	.L10:
  84:src/riscv.cpp ****             case 0x22:
 492              		.loc 1 84 13 is_stmt 1
  85:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 493              		.loc 1 85 17
  85:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 494              		.loc 1 85 60 is_stmt 0
 495              	#APP
 496              	# 85 "src/riscv.cpp" 1
 497              		ld a0, 88(x8)
 498              	# 0 "" 2
 499              	.LVL36:
  86:src/riscv.cpp ****                 ret = id->semaphore::closeSemaphore();
 500              		.loc 1 86 17 is_stmt 1
  86:src/riscv.cpp ****                 ret = id->semaphore::closeSemaphore();
 501              		.loc 1 86 52 is_stmt 0
 502              	#NO_APP
 503 01b8 97000000 		call	_ZN9semaphore14closeSemaphoreEv@plt
 503      E7800000 
GAS LISTING /tmp/ccWhwkRm.s 			page 18


 504              	.LVL37:
  88:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 505              		.loc 1 88 17 is_stmt 1
  88:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 506              		.loc 1 88 57 is_stmt 0
 507              	#APP
 508              	# 88 "src/riscv.cpp" 1
  89:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 509              		mv t0, a0
 510              	# 0 "" 2
 511              		.loc 1 89 17 is_stmt 1
  89:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 512              		.loc 1 89 50 is_stmt 0
 513              	# 89 "src/riscv.cpp" 1
  90:src/riscv.cpp ****                 break;
 514              		sw t0, 80(x8)
 515              	# 0 "" 2
 516              		.loc 1 90 17 is_stmt 1
 517              	#NO_APP
 518 01c8 6FF09FF1 		j	.L5
 519              	.LVL38:
 520              	.L9:
  92:src/riscv.cpp ****             case 0x23:
 521              		.loc 1 92 13
  93:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 522              		.loc 1 93 17
  93:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 523              		.loc 1 93 60 is_stmt 0
 524              	#APP
 525              	# 93 "src/riscv.cpp" 1
 526              		ld a0, 88(x8)
 527              	# 0 "" 2
 528              	.LVL39:
  94:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
 529              		.loc 1 94 17 is_stmt 1
 530              	#NO_APP
 531 01d0 630C0500 		beqz	a0,.L24
  94:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
 532              		.loc 1 94 35 discriminator 1
  94:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
 533              		.loc 1 94 60 is_stmt 0 discriminator 1
 534 01d4 97000000 		call	_ZN9semaphore4waitEv@plt
 534      E7800000 
 535              	.LVL40:
 536              	.L19:
  96:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 537              		.loc 1 96 17 is_stmt 1
  96:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 538              		.loc 1 96 57 is_stmt 0
 539              	#APP
 540              	# 96 "src/riscv.cpp" 1
  97:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 541              		mv t0, a0
 542              	# 0 "" 2
 543              		.loc 1 97 17 is_stmt 1
  97:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 544              		.loc 1 97 50 is_stmt 0
GAS LISTING /tmp/ccWhwkRm.s 			page 19


 545              	# 97 "src/riscv.cpp" 1
  98:src/riscv.cpp ****                 break;
 546              		sw t0, 80(x8)
 547              	# 0 "" 2
 548              		.loc 1 98 17 is_stmt 1
 549              	#NO_APP
 550 01e4 6FF0DFEF 		j	.L5
 551              	.LVL41:
 552              	.L24:
  95:src/riscv.cpp ****                 else ret = -1;
 553              		.loc 1 95 26 is_stmt 0
 554 01e8 1305F0FF 		li	a0,-1
 555              	.LVL42:
 556 01ec 6FF01FFF 		j	.L19
 557              	.L8:
 100:src/riscv.cpp ****             case 0x24:
 558              		.loc 1 100 13 is_stmt 1
 101:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 559              		.loc 1 101 17
 101:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 560              		.loc 1 101 60 is_stmt 0
 561              	#APP
 562              	# 101 "src/riscv.cpp" 1
 563              		ld a0, 88(x8)
 564              	# 0 "" 2
 565              	.LVL43:
 102:src/riscv.cpp ****                 ret = id->semaphore::signal();
 566              		.loc 1 102 17 is_stmt 1
 102:src/riscv.cpp ****                 ret = id->semaphore::signal();
 567              		.loc 1 102 44 is_stmt 0
 568              	#NO_APP
 569 01f4 97000000 		call	_ZN9semaphore6signalEv@plt
 569      E7800000 
 570              	.LVL44:
 103:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 571              		.loc 1 103 17 is_stmt 1
 103:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 572              		.loc 1 103 57 is_stmt 0
 573              	#APP
 574              	# 103 "src/riscv.cpp" 1
 104:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 575              		mv t0, a0
 576              	# 0 "" 2
 577              		.loc 1 104 17 is_stmt 1
 104:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 578              		.loc 1 104 50 is_stmt 0
 579              	# 104 "src/riscv.cpp" 1
 105:src/riscv.cpp ****                 break;
 580              		sw t0, 80(x8)
 581              	# 0 "" 2
 582              		.loc 1 105 17 is_stmt 1
 583              	#NO_APP
 584 0204 6FF0DFED 		j	.L5
 585              	.LVL45:
 586              	.L6:
 107:src/riscv.cpp ****             case 0x26:
 587              		.loc 1 107 13
GAS LISTING /tmp/ccWhwkRm.s 			page 20


 108:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 588              		.loc 1 108 17
 108:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 589              		.loc 1 108 60 is_stmt 0
 590              	#APP
 591              	# 108 "src/riscv.cpp" 1
 592              		ld a0, 88(x8)
 593              	# 0 "" 2
 594              	.LVL46:
 109:src/riscv.cpp ****                 ret = id->semaphore::trywait();
 595              		.loc 1 109 17 is_stmt 1
 109:src/riscv.cpp ****                 ret = id->semaphore::trywait();
 596              		.loc 1 109 45 is_stmt 0
 597              	#NO_APP
 598 020c 97000000 		call	_ZN9semaphore7trywaitEv@plt
 598      E7800000 
 599              	.LVL47:
 110:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 600              		.loc 1 110 17 is_stmt 1
 110:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 601              		.loc 1 110 57 is_stmt 0
 602              	#APP
 603              	# 110 "src/riscv.cpp" 1
 111:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 604              		mv t0, a0
 605              	# 0 "" 2
 606              		.loc 1 111 17 is_stmt 1
 111:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 607              		.loc 1 111 50 is_stmt 0
 608              	# 111 "src/riscv.cpp" 1
 112:src/riscv.cpp ****                 break;
 609              		sw t0, 80(x8)
 610              	# 0 "" 2
 611              		.loc 1 112 17 is_stmt 1
 612              	#NO_APP
 613 021c 6FF05FEC 		j	.L5
 614              	.LVL48:
 615              	.L27:
 616              	.LBE65:
 617              	.LBE66:
 618              	.LBB67:
 619              	.LBB40:
 122:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 620              		.loc 1 122 9
 621              	.LBB41:
 622              	.LBB42:
 155:src/../h/riscv.hpp **** }
 623              		.loc 2 155 5
 155:src/../h/riscv.hpp **** }
 624              		.loc 2 155 64 is_stmt 0
 625 0220 93072000 		li	a5,2
 626              	#APP
 627              	# 155 "src/../h/riscv.hpp" 1
 628              		csrc sip, a5
 629              	# 0 "" 2
 630              	.LVL49:
 631              	#NO_APP
GAS LISTING /tmp/ccWhwkRm.s 			page 21


 632              	.LBE42:
 633              	.LBE41:
 123:src/riscv.cpp ****         TCB::timeSliceCounter++;
 634              		.loc 1 123 9 is_stmt 1
 123:src/riscv.cpp ****         TCB::timeSliceCounter++;
 635              		.loc 1 123 30 is_stmt 0
 636 0228 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 636      03370700 
 637              	.LVL50:
 638 0230 83370700 		ld	a5,0(a4)
 639 0234 93871700 		addi	a5,a5,1
 640 0238 2330F700 		sd	a5,0(a4)
 125:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 641              		.loc 1 125 9 is_stmt 1
 642              	.LBB43:
 125:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 643              		.loc 1 125 63 is_stmt 0
 644 023c 17070000 		la	a4,_ZN3TCB7runningE
 644      03370700 
 645 0244 03370700 		ld	a4,0(a4)
 646              	.LVL51:
 647              	.LBB44:
 648              	.LBB45:
 649              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 5/19/24.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJEKAT_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJEKAT_TCB_HPP
   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "riscv.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** class TCB {
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp ****     void *operator new(size_t n);
  14:src/../h/tcb.hpp **** 
  15:src/../h/tcb.hpp ****     void *operator new[](size_t n);
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept;
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void operator delete[](void *p) noexcept;
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp **** public:
  22:src/../h/tcb.hpp ****     ~TCB(){ delete stack;}
  23:src/../h/tcb.hpp ****     bool isFinished() const {return finished;}
  24:src/../h/tcb.hpp ****     void setFinished(bool f) { finished = f;}
  25:src/../h/tcb.hpp **** 
  26:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 650              		.loc 3 26 35 is_stmt 1
 651              		.loc 3 26 42 is_stmt 0
 652 0248 03378702 		ld	a4,40(a4)
 653              	.LVL52:
 654              	.LBE45:
 655              	.LBE44:
 125:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
GAS LISTING /tmp/ccWhwkRm.s 			page 22


 656              		.loc 1 125 9
 657 024c E3E2E7EA 		bltu	a5,a4,.L3
 658              	.LBB46:
 127:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 659              		.loc 1 127 13 is_stmt 1
 660              	.LBB47:
 661              	.LBB48:
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 662              		.loc 2 114 5
 115:src/../h/riscv.hpp ****     return sepc;
 663              		.loc 2 115 5
 115:src/../h/riscv.hpp ****     return sepc;
 664              		.loc 2 115 64 is_stmt 0
 665              	#APP
 666              	# 115 "src/../h/riscv.hpp" 1
 667              		csrr a5, sepc
 668              	# 0 "" 2
 669              	#NO_APP
 670 0254 233CF4FC 		sd	a5,-40(s0)
 116:src/../h/riscv.hpp **** }
 671              		.loc 2 116 5 is_stmt 1
 116:src/../h/riscv.hpp **** }
 672              		.loc 2 116 12 is_stmt 0
 673 0258 833784FD 		ld	a5,-40(s0)
 674              	.LBE48:
 675              	.LBE47:
 127:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 676              		.loc 1 127 43
 677 025c 2330F4FA 		sd	a5,-96(s0)
 128:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 678              		.loc 1 128 13 is_stmt 1
 679              	.LBB49:
 680              	.LBB50:
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 681              		.loc 2 182 5
 183:src/../h/riscv.hpp ****     return sstatus;
 682              		.loc 2 183 5
 183:src/../h/riscv.hpp ****     return sstatus;
 683              		.loc 2 183 76 is_stmt 0
 684              	#APP
 685              	# 183 "src/../h/riscv.hpp" 1
 686              		csrr a5, sstatus
 687              	# 0 "" 2
 688              	#NO_APP
 689 0264 2338F4FC 		sd	a5,-48(s0)
 184:src/../h/riscv.hpp **** }
 690              		.loc 2 184 5 is_stmt 1
 184:src/../h/riscv.hpp **** }
 691              		.loc 2 184 12 is_stmt 0
 692 0268 833704FD 		ld	a5,-48(s0)
 693              	.LBE50:
 694              	.LBE49:
 128:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 695              		.loc 1 128 49
 696 026c 2334F4FA 		sd	a5,-88(s0)
 129:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 697              		.loc 1 129 13 is_stmt 1
GAS LISTING /tmp/ccWhwkRm.s 			page 23


 129:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 698              		.loc 1 129 34 is_stmt 0
 699 0270 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 699      83B70700 
 700 0278 23B00700 		sd	zero,0(a5)
 130:src/riscv.cpp ****             TCB::dispatch();
 701              		.loc 1 130 13 is_stmt 1
 130:src/riscv.cpp ****             TCB::dispatch();
 702              		.loc 1 130 26 is_stmt 0
 703 027c 97000000 		call	_ZN3TCB8dispatchEv@plt
 703      E7800000 
 704              	.LVL53:
 131:src/riscv.cpp ****             w_sstatus(sstatus);
 705              		.loc 1 131 13 is_stmt 1
 131:src/riscv.cpp ****             w_sstatus(sstatus);
 706              		.loc 1 131 22 is_stmt 0
 707 0284 833784FA 		ld	a5,-88(s0)
 708              	.LVL54:
 709              	.LBB51:
 710              	.LBB52:
 189:src/../h/riscv.hpp **** }
 711              		.loc 2 189 5 is_stmt 1
 189:src/../h/riscv.hpp **** }
 712              		.loc 2 189 77 is_stmt 0
 713              	#APP
 714              	# 189 "src/../h/riscv.hpp" 1
 715              		csrw sstatus, a5
 716              	# 0 "" 2
 717              	.LVL55:
 718              	#NO_APP
 719              	.LBE52:
 720              	.LBE51:
 132:src/riscv.cpp ****             w_sepc(sepc);
 721              		.loc 1 132 13 is_stmt 1
 132:src/riscv.cpp ****             w_sepc(sepc);
 722              		.loc 1 132 19 is_stmt 0
 723 028c 833704FA 		ld	a5,-96(s0)
 724              	.LVL56:
 725              	.LBB53:
 726              	.LBB54:
 121:src/../h/riscv.hpp **** }
 727              		.loc 2 121 5 is_stmt 1
 121:src/../h/riscv.hpp **** }
 728              		.loc 2 121 65 is_stmt 0
 729              	#APP
 730              	# 121 "src/../h/riscv.hpp" 1
 122:src/../h/riscv.hpp **** 
 731              		csrw sepc, a5
 732              	# 0 "" 2
 733              		.loc 2 122 1
 734              	#NO_APP
 735 0294 6FF0DFE5 		j	.L3
 736              	.LBE54:
 737              	.LBE53:
 738              	.LBE46:
 739              	.LBE43:
 740              	.LBE40:
GAS LISTING /tmp/ccWhwkRm.s 			page 24


 741              	.LBE67:
 742              	.LBE70:
 743              		.cfi_endproc
 744              	.LFE42:
 746              	.Letext0:
 747              		.file 4 "src/../h/../lib/hw.h"
 748              		.file 5 "src/../h/MemoryAllocator.hpp"
 749              		.file 6 "src/../h/list.hpp"
 750              		.file 7 "src/../h/semaphore.hpp"
 751              		.file 8 "src/../h/syscall_c.hpp"
 752              		.file 9 "src/../h/../lib/console.h"
GAS LISTING /tmp/ccWhwkRm.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccWhwkRm.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccWhwkRm.s:13     .text:0000000000000000 .L0 
     /tmp/ccWhwkRm.s:14     .text:0000000000000000 .L0 
     /tmp/ccWhwkRm.s:15     .text:0000000000000004 .L0 
     /tmp/ccWhwkRm.s:17     .text:0000000000000008 .L0 
     /tmp/ccWhwkRm.s:19     .text:000000000000000c .L0 
     /tmp/ccWhwkRm.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:10     .text:000000000000000c .L0 
     /tmp/ccWhwkRm.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:11     .text:0000000000000010 .L0 
     /tmp/ccWhwkRm.s:33     .text:0000000000000014 .L0 
     /tmp/ccWhwkRm.s:34     .text:0000000000000018 .L0 
     /tmp/ccWhwkRm.s:35     .text:0000000000000018 .L0 
     /tmp/ccWhwkRm.s:37     .text:000000000000001c .L0 
     /tmp/ccWhwkRm.s:39     .text:0000000000000020 .L0 
     /tmp/ccWhwkRm.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccWhwkRm.s:48     .text:0000000000000020 .L0 
     /tmp/ccWhwkRm.s:49     .text:0000000000000020 .L0 
     /tmp/ccWhwkRm.s:50     .text:0000000000000024 .L0 
     /tmp/ccWhwkRm.s:54     .text:0000000000000030 .L0 
     /tmp/ccWhwkRm.s:55     .text:0000000000000030 .L0 
     /tmp/ccWhwkRm.s:56     .text:0000000000000030 .L0 
     /tmp/ccWhwkRm.s:58     .text:0000000000000034 .L0 
     /tmp/ccWhwkRm.s:63     .text:0000000000000034 .L0 
     /tmp/ccWhwkRm.s:64     .text:0000000000000034 .L0 
     /tmp/ccWhwkRm.s:65     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:196    .text:0000000000000034 .L0 
     /tmp/ccWhwkRm.s:73     .text:000000000000003c .L0 
     /tmp/ccWhwkRm.s:74     .text:000000000000003c .L0 
     /tmp/ccWhwkRm.s:81     .text:0000000000000040 .L0 
     /tmp/ccWhwkRm.s:82     .text:0000000000000040 .L0 
     /tmp/ccWhwkRm.s:83     .text:0000000000000040 .L0 
  src/../h/riscv.hpp:103    .text:0000000000000040 .L0 
     /tmp/ccWhwkRm.s:91     .text:0000000000000048 .L0 
     /tmp/ccWhwkRm.s:92     .text:0000000000000048 .L0 
     /tmp/ccWhwkRm.s:98     .text:000000000000004c .L0 
     /tmp/ccWhwkRm.s:99     .text:000000000000004c .L0 
     /tmp/ccWhwkRm.s:101    .text:0000000000000050 .L0 
     /tmp/ccWhwkRm.s:107    .text:0000000000000058 .L0 
     /tmp/ccWhwkRm.s:113    .text:0000000000000068 .L0 
     /tmp/ccWhwkRm.s:118    .text:0000000000000078 .L0 
     /tmp/ccWhwkRm.s:119    .text:0000000000000078 .L0 
     /tmp/ccWhwkRm.s:124    .text:0000000000000080 .L0 
     /tmp/ccWhwkRm.s:132    .text:0000000000000084 .L0 
     /tmp/ccWhwkRm.s:133    .text:0000000000000084 .L0 
     /tmp/ccWhwkRm.s:134    .text:0000000000000084 .L0 
  src/../h/riscv.hpp:115    .text:0000000000000084 .L0 
     /tmp/ccWhwkRm.s:143    .text:000000000000008c .L0 
     /tmp/ccWhwkRm.s:144    .text:000000000000008c .L0 
     /tmp/ccWhwkRm.s:148    .text:0000000000000090 .L0 
     /tmp/ccWhwkRm.s:150    .text:0000000000000094 .L0 
     /tmp/ccWhwkRm.s:154    .text:0000000000000098 .L0 
     /tmp/ccWhwkRm.s:155    .text:0000000000000098 .L0 
     /tmp/ccWhwkRm.s:156    .text:0000000000000098 .L0 
  src/../h/riscv.hpp:183    .text:0000000000000098 .L0 
GAS LISTING /tmp/ccWhwkRm.s 			page 26


     /tmp/ccWhwkRm.s:164    .text:00000000000000a0 .L0 
     /tmp/ccWhwkRm.s:165    .text:00000000000000a0 .L0 
     /tmp/ccWhwkRm.s:169    .text:00000000000000a4 .L0 
     /tmp/ccWhwkRm.s:171    .text:00000000000000a8 .L0 
     /tmp/ccWhwkRm.s:172    .text:00000000000000a8 .L0 
     /tmp/ccWhwkRm.s:173    .text:00000000000000a8 .L0 
     /tmp/ccWhwkRm.s:174    .text:00000000000000a8 .L0 
     /tmp/ccWhwkRm.s:230    .text:00000000000000cc .L0 
     /tmp/ccWhwkRm.s:231    .text:00000000000000cc .L0 
     /tmp/ccWhwkRm.s:232    .text:00000000000000cc .L0 
     /tmp/ccWhwkRm.s:233    .text:00000000000000cc .L0 
       src/riscv.cpp:30     .text:00000000000000cc .L0 
     /tmp/ccWhwkRm.s:240    .text:00000000000000d0 .L0 
     /tmp/ccWhwkRm.s:242    .text:00000000000000d0 .L0 
     /tmp/ccWhwkRm.s:245    .text:00000000000000d8 .L0 
       src/riscv.cpp:32     .text:00000000000000d8 .L0 
     /tmp/ccWhwkRm.s:251    .text:00000000000000dc .L0 
       src/riscv.cpp:33     .text:00000000000000dc .L0 
     /tmp/ccWhwkRm.s:260    .text:00000000000000e0 .L0 
     /tmp/ccWhwkRm.s:261    .text:00000000000000e0 .L0 
     /tmp/ccWhwkRm.s:262    .text:00000000000000e0 .L0 
     /tmp/ccWhwkRm.s:267    .text:00000000000000e4 .L0 
  src/../h/riscv.hpp:189    .text:00000000000000e4 .L0 
     /tmp/ccWhwkRm.s:277    .text:00000000000000e8 .L0 
     /tmp/ccWhwkRm.s:278    .text:00000000000000e8 .L0 
     /tmp/ccWhwkRm.s:283    .text:00000000000000ec .L0 
  src/../h/riscv.hpp:121    .text:00000000000000ec .L0 
     /tmp/ccWhwkRm.s:296    .text:00000000000000f0 .L0 
     /tmp/ccWhwkRm.s:297    .text:00000000000000f4 .L0 
     /tmp/ccWhwkRm.s:298    .text:00000000000000f4 .L0 
     /tmp/ccWhwkRm.s:300    .text:00000000000000f8 .L0 
     /tmp/ccWhwkRm.s:301    .text:00000000000000f8 .L0 
     /tmp/ccWhwkRm.s:303    .text:00000000000000fc .L0 
     /tmp/ccWhwkRm.s:305    .text:0000000000000100 .L0 
     /tmp/ccWhwkRm.s:309    .text:0000000000000104 .L0 
     /tmp/ccWhwkRm.s:314    .text:0000000000000104 .L0 
     /tmp/ccWhwkRm.s:315    .text:0000000000000104 .L0 
     /tmp/ccWhwkRm.s:316    .text:0000000000000104 .L0 
     /tmp/ccWhwkRm.s:317    .text:0000000000000104 .L0 
       src/riscv.cpp:39     .text:0000000000000104 .L0 
     /tmp/ccWhwkRm.s:324    .text:0000000000000108 .L0 
     /tmp/ccWhwkRm.s:326    .text:0000000000000108 .L0 
     /tmp/ccWhwkRm.s:329    .text:0000000000000110 .L0 
       src/riscv.cpp:41     .text:0000000000000110 .L0 
     /tmp/ccWhwkRm.s:335    .text:0000000000000114 .L0 
       src/riscv.cpp:42     .text:0000000000000114 .L0 
     /tmp/ccWhwkRm.s:341    .text:0000000000000118 .L0 
     /tmp/ccWhwkRm.s:345    .text:000000000000011c .L0 
     /tmp/ccWhwkRm.s:346    .text:000000000000011c .L0 
     /tmp/ccWhwkRm.s:347    .text:000000000000011c .L0 
     /tmp/ccWhwkRm.s:348    .text:000000000000011c .L0 
     /tmp/ccWhwkRm.s:349    .text:000000000000011c .L0 
     /tmp/ccWhwkRm.s:350    .text:000000000000011c .L0 
       src/riscv.cpp:50     .text:000000000000011c .L0 
     /tmp/ccWhwkRm.s:357    .text:0000000000000120 .L0 
       src/riscv.cpp:51     .text:0000000000000120 .L0 
     /tmp/ccWhwkRm.s:363    .text:0000000000000124 .L0 
GAS LISTING /tmp/ccWhwkRm.s 			page 27


       src/riscv.cpp:52     .text:0000000000000124 .L0 
     /tmp/ccWhwkRm.s:369    .text:0000000000000128 .L0 
       src/riscv.cpp:53     .text:0000000000000128 .L0 
     /tmp/ccWhwkRm.s:375    .text:000000000000012c .L0 
     /tmp/ccWhwkRm.s:377    .text:000000000000012c .L0 
     /tmp/ccWhwkRm.s:380    .text:0000000000000134 .L0 
     /tmp/ccWhwkRm.s:382    .text:0000000000000138 .L0 
     /tmp/ccWhwkRm.s:384    .text:000000000000013c .L0 
     /tmp/ccWhwkRm.s:388    .text:0000000000000140 .L0 
       src/riscv.cpp:58     .text:0000000000000140 .L0 
     /tmp/ccWhwkRm.s:394    .text:0000000000000144 .L0 
       src/riscv.cpp:59     .text:0000000000000144 .L0 
     /tmp/ccWhwkRm.s:400    .text:0000000000000148 .L0 
     /tmp/ccWhwkRm.s:404    .text:000000000000014c .L0 
     /tmp/ccWhwkRm.s:409    .text:0000000000000154 .L0 
     /tmp/ccWhwkRm.s:410    .text:0000000000000154 .L0 
     /tmp/ccWhwkRm.s:411    .text:0000000000000154 .L0 
     /tmp/ccWhwkRm.s:414    .text:000000000000015c .L0 
       src/riscv.cpp:64     .text:000000000000015c .L0 
     /tmp/ccWhwkRm.s:420    .text:0000000000000160 .L0 
       src/riscv.cpp:65     .text:0000000000000160 .L0 
     /tmp/ccWhwkRm.s:426    .text:0000000000000164 .L0 
     /tmp/ccWhwkRm.s:430    .text:0000000000000168 .L0 
     /tmp/ccWhwkRm.s:431    .text:0000000000000168 .L0 
     /tmp/ccWhwkRm.s:432    .text:0000000000000168 .L0 
     /tmp/ccWhwkRm.s:435    .text:0000000000000174 .L0 
     /tmp/ccWhwkRm.s:436    .text:0000000000000174 .L0 
     /tmp/ccWhwkRm.s:439    .text:000000000000017c .L0 
     /tmp/ccWhwkRm.s:443    .text:0000000000000180 .L0 
     /tmp/ccWhwkRm.s:444    .text:0000000000000180 .L0 
     /tmp/ccWhwkRm.s:445    .text:0000000000000180 .L0 
       src/riscv.cpp:75     .text:0000000000000180 .L0 
     /tmp/ccWhwkRm.s:452    .text:0000000000000184 .L0 
       src/riscv.cpp:76     .text:0000000000000184 .L0 
     /tmp/ccWhwkRm.s:458    .text:0000000000000188 .L0 
     /tmp/ccWhwkRm.s:460    .text:0000000000000188 .L0 
     /tmp/ccWhwkRm.s:464    .text:0000000000000194 .L0 
     /tmp/ccWhwkRm.s:466    .text:0000000000000198 .L0 
     /tmp/ccWhwkRm.s:468    .text:000000000000019c .L0 
     /tmp/ccWhwkRm.s:472    .text:00000000000001a0 .L0 
       src/riscv.cpp:80     .text:00000000000001a0 .L0 
     /tmp/ccWhwkRm.s:478    .text:00000000000001a4 .L0 
       src/riscv.cpp:81     .text:00000000000001a4 .L0 
     /tmp/ccWhwkRm.s:484    .text:00000000000001a8 .L0 
     /tmp/ccWhwkRm.s:488    .text:00000000000001ac .L0 
     /tmp/ccWhwkRm.s:493    .text:00000000000001b4 .L0 
     /tmp/ccWhwkRm.s:494    .text:00000000000001b4 .L0 
       src/riscv.cpp:85     .text:00000000000001b4 .L0 
     /tmp/ccWhwkRm.s:501    .text:00000000000001b8 .L0 
     /tmp/ccWhwkRm.s:503    .text:00000000000001b8 .L0 
     /tmp/ccWhwkRm.s:506    .text:00000000000001c0 .L0 
       src/riscv.cpp:88     .text:00000000000001c0 .L0 
     /tmp/ccWhwkRm.s:512    .text:00000000000001c4 .L0 
       src/riscv.cpp:89     .text:00000000000001c4 .L0 
     /tmp/ccWhwkRm.s:518    .text:00000000000001c8 .L0 
     /tmp/ccWhwkRm.s:522    .text:00000000000001cc .L0 
     /tmp/ccWhwkRm.s:523    .text:00000000000001cc .L0 
GAS LISTING /tmp/ccWhwkRm.s 			page 28


       src/riscv.cpp:93     .text:00000000000001cc .L0 
     /tmp/ccWhwkRm.s:531    .text:00000000000001d0 .L0 
     /tmp/ccWhwkRm.s:533    .text:00000000000001d4 .L0 
     /tmp/ccWhwkRm.s:534    .text:00000000000001d4 .L0 
     /tmp/ccWhwkRm.s:538    .text:00000000000001dc .L0 
       src/riscv.cpp:96     .text:00000000000001dc .L0 
     /tmp/ccWhwkRm.s:544    .text:00000000000001e0 .L0 
       src/riscv.cpp:97     .text:00000000000001e0 .L0 
     /tmp/ccWhwkRm.s:550    .text:00000000000001e4 .L0 
     /tmp/ccWhwkRm.s:554    .text:00000000000001e8 .L0 
     /tmp/ccWhwkRm.s:559    .text:00000000000001f0 .L0 
     /tmp/ccWhwkRm.s:560    .text:00000000000001f0 .L0 
       src/riscv.cpp:101    .text:00000000000001f0 .L0 
     /tmp/ccWhwkRm.s:567    .text:00000000000001f4 .L0 
     /tmp/ccWhwkRm.s:569    .text:00000000000001f4 .L0 
     /tmp/ccWhwkRm.s:572    .text:00000000000001fc .L0 
       src/riscv.cpp:103    .text:00000000000001fc .L0 
     /tmp/ccWhwkRm.s:578    .text:0000000000000200 .L0 
       src/riscv.cpp:104    .text:0000000000000200 .L0 
     /tmp/ccWhwkRm.s:584    .text:0000000000000204 .L0 
     /tmp/ccWhwkRm.s:588    .text:0000000000000208 .L0 
     /tmp/ccWhwkRm.s:589    .text:0000000000000208 .L0 
       src/riscv.cpp:108    .text:0000000000000208 .L0 
     /tmp/ccWhwkRm.s:596    .text:000000000000020c .L0 
     /tmp/ccWhwkRm.s:598    .text:000000000000020c .L0 
     /tmp/ccWhwkRm.s:601    .text:0000000000000214 .L0 
       src/riscv.cpp:110    .text:0000000000000214 .L0 
     /tmp/ccWhwkRm.s:607    .text:0000000000000218 .L0 
       src/riscv.cpp:111    .text:0000000000000218 .L0 
     /tmp/ccWhwkRm.s:613    .text:000000000000021c .L0 
     /tmp/ccWhwkRm.s:623    .text:0000000000000220 .L0 
     /tmp/ccWhwkRm.s:624    .text:0000000000000220 .L0 
     /tmp/ccWhwkRm.s:625    .text:0000000000000220 .L0 
     /tmp/ccWhwkRm.s:635    .text:0000000000000228 .L0 
     /tmp/ccWhwkRm.s:636    .text:0000000000000228 .L0 
     /tmp/ccWhwkRm.s:643    .text:000000000000023c .L0 
     /tmp/ccWhwkRm.s:644    .text:000000000000023c .L0 
     /tmp/ccWhwkRm.s:651    .text:0000000000000248 .L0 
     /tmp/ccWhwkRm.s:652    .text:0000000000000248 .L0 
     /tmp/ccWhwkRm.s:657    .text:000000000000024c .L0 
     /tmp/ccWhwkRm.s:662    .text:0000000000000250 .L0 
     /tmp/ccWhwkRm.s:663    .text:0000000000000250 .L0 
     /tmp/ccWhwkRm.s:664    .text:0000000000000250 .L0 
  src/../h/riscv.hpp:115    .text:0000000000000250 .L0 
     /tmp/ccWhwkRm.s:672    .text:0000000000000258 .L0 
     /tmp/ccWhwkRm.s:673    .text:0000000000000258 .L0 
     /tmp/ccWhwkRm.s:677    .text:000000000000025c .L0 
     /tmp/ccWhwkRm.s:681    .text:0000000000000260 .L0 
     /tmp/ccWhwkRm.s:682    .text:0000000000000260 .L0 
     /tmp/ccWhwkRm.s:683    .text:0000000000000260 .L0 
  src/../h/riscv.hpp:183    .text:0000000000000260 .L0 
     /tmp/ccWhwkRm.s:691    .text:0000000000000268 .L0 
     /tmp/ccWhwkRm.s:692    .text:0000000000000268 .L0 
     /tmp/ccWhwkRm.s:696    .text:000000000000026c .L0 
     /tmp/ccWhwkRm.s:698    .text:0000000000000270 .L0 
     /tmp/ccWhwkRm.s:699    .text:0000000000000270 .L0 
     /tmp/ccWhwkRm.s:702    .text:000000000000027c .L0 
GAS LISTING /tmp/ccWhwkRm.s 			page 29


     /tmp/ccWhwkRm.s:703    .text:000000000000027c .L0 
     /tmp/ccWhwkRm.s:706    .text:0000000000000284 .L0 
     /tmp/ccWhwkRm.s:707    .text:0000000000000284 .L0 
     /tmp/ccWhwkRm.s:712    .text:0000000000000288 .L0 
  src/../h/riscv.hpp:189    .text:0000000000000288 .L0 
     /tmp/ccWhwkRm.s:722    .text:000000000000028c .L0 
     /tmp/ccWhwkRm.s:723    .text:000000000000028c .L0 
     /tmp/ccWhwkRm.s:728    .text:0000000000000290 .L0 
  src/../h/riscv.hpp:121    .text:0000000000000290 .L0 
     /tmp/ccWhwkRm.s:735    .text:0000000000000294 .L0 
     /tmp/ccWhwkRm.s:743    .text:0000000000000298 .L0 
     /tmp/ccWhwkRm.s:753    .text:0000000000000298 .L0 
     /tmp/ccWhwkRm.s:186    .rodata:0000000000000000 .L7
     /tmp/ccWhwkRm.s:178    .text:00000000000000b4 .L0 
     /tmp/ccWhwkRm.s:432    .text:0000000000000168 .L0 
     /tmp/ccWhwkRm.s:636    .text:0000000000000228 .L0 
     /tmp/ccWhwkRm.s:644    .text:000000000000023c .L0 
     /tmp/ccWhwkRm.s:699    .text:0000000000000270 .L0 
     /tmp/ccWhwkRm.s:126    .text:0000000000000084 .L26
     /tmp/ccWhwkRm.s:615    .text:0000000000000220 .L27
     /tmp/ccWhwkRm.s:290    .text:00000000000000f0 .L3
     /tmp/ccWhwkRm.s:258    .text:00000000000000e0 .L5
     /tmp/ccWhwkRm.s:402    .text:000000000000014c .L22
     /tmp/ccWhwkRm.s:385    .text:0000000000000140 .L17
     /tmp/ccWhwkRm.s:486    .text:00000000000001ac .L23
     /tmp/ccWhwkRm.s:469    .text:00000000000001a0 .L18
     /tmp/ccWhwkRm.s:552    .text:00000000000001e8 .L24
     /tmp/ccWhwkRm.s:536    .text:00000000000001dc .L19
     /tmp/ccWhwkRm.s:227    .text:00000000000000cc .L16
     /tmp/ccWhwkRm.s:308    .text:0000000000000104 .L15
     /tmp/ccWhwkRm.s:343    .text:000000000000011c .L14
     /tmp/ccWhwkRm.s:407    .text:0000000000000154 .L13
     /tmp/ccWhwkRm.s:428    .text:0000000000000168 .L12
     /tmp/ccWhwkRm.s:441    .text:0000000000000180 .L11
     /tmp/ccWhwkRm.s:491    .text:00000000000001b4 .L10
     /tmp/ccWhwkRm.s:520    .text:00000000000001cc .L9
     /tmp/ccWhwkRm.s:557    .text:00000000000001f0 .L8
     /tmp/ccWhwkRm.s:586    .text:0000000000000208 .L6
     /tmp/ccWhwkRm.s:2399   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccWhwkRm.s:4020   .debug_str:000000000000082d .LASF180
     /tmp/ccWhwkRm.s:4108   .debug_str:0000000000000b30 .LASF181
     /tmp/ccWhwkRm.s:4116   .debug_str:0000000000000b7c .LASF182
     /tmp/ccWhwkRm.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccWhwkRm.s:746    .text:0000000000000298 .Letext0
     /tmp/ccWhwkRm.s:3742   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccWhwkRm.s:3868   .debug_str:00000000000003b5 .LASF0
     /tmp/ccWhwkRm.s:3900   .debug_str:00000000000004b9 .LASF1
     /tmp/ccWhwkRm.s:3988   .debug_str:000000000000071d .LASF2
     /tmp/ccWhwkRm.s:3828   .debug_str:000000000000027b .LASF3
     /tmp/ccWhwkRm.s:3996   .debug_str:000000000000075a .LASF4
     /tmp/ccWhwkRm.s:3876   .debug_str:00000000000003e9 .LASF5
     /tmp/ccWhwkRm.s:3756   .debug_str:000000000000006b .LASF6
     /tmp/ccWhwkRm.s:3960   .debug_str:0000000000000637 .LASF7
     /tmp/ccWhwkRm.s:3888   .debug_str:0000000000000468 .LASF8
     /tmp/ccWhwkRm.s:3842   .debug_str:00000000000002d1 .LASF9
     /tmp/ccWhwkRm.s:3854   .debug_str:0000000000000350 .LASF10
     /tmp/ccWhwkRm.s:3784   .debug_str:000000000000011d .LASF11
GAS LISTING /tmp/ccWhwkRm.s 			page 30


     /tmp/ccWhwkRm.s:3834   .debug_str:000000000000029d .LASF12
     /tmp/ccWhwkRm.s:3798   .debug_str:0000000000000185 .LASF13
     /tmp/ccWhwkRm.s:3782   .debug_str:000000000000010d .LASF14
     /tmp/ccWhwkRm.s:4030   .debug_str:000000000000092b .LASF15
     /tmp/ccWhwkRm.s:3822   .debug_str:000000000000022e .LASF16
     /tmp/ccWhwkRm.s:4014   .debug_str:00000000000007eb .LASF17
     /tmp/ccWhwkRm.s:3956   .debug_str:000000000000061b .LASF27
     /tmp/ccWhwkRm.s:4046   .debug_str:000000000000097e .LASF50
     /tmp/ccWhwkRm.s:3772   .debug_str:00000000000000c9 .LASF18
     /tmp/ccWhwkRm.s:3898   .debug_str:00000000000004b4 .LASF19
     /tmp/ccWhwkRm.s:3814   .debug_str:0000000000000200 .LASF20
     /tmp/ccWhwkRm.s:4044   .debug_str:0000000000000979 .LASF52
     /tmp/ccWhwkRm.s:4078   .debug_str:0000000000000a62 .LASF54
     /tmp/ccWhwkRm.s:3804   .debug_str:00000000000001ae .LASF21
     /tmp/ccWhwkRm.s:3892   .debug_str:000000000000048e .LASF72
     /tmp/ccWhwkRm.s:4006   .debug_str:000000000000078e .LASF74
     /tmp/ccWhwkRm.s:3924   .debug_str:0000000000000561 .LASF22
     /tmp/ccWhwkRm.s:3760   .debug_str:000000000000007d .LASF24
     /tmp/ccWhwkRm.s:4038   .debug_str:000000000000095a .LASF23
     /tmp/ccWhwkRm.s:3966   .debug_str:0000000000000675 .LASF25
     /tmp/ccWhwkRm.s:3770   .debug_str:00000000000000c4 .LASF76
     /tmp/ccWhwkRm.s:4122   .debug_str:0000000000000bc3 .LASF78
     /tmp/ccWhwkRm.s:3914   .debug_str:0000000000000516 .LASF26
     /tmp/ccWhwkRm.s:4088   .debug_str:0000000000000aad .LASF28
     /tmp/ccWhwkRm.s:3746   .debug_str:0000000000000005 .LASF29
     /tmp/ccWhwkRm.s:3938   .debug_str:00000000000005a3 .LASF31
     /tmp/ccWhwkRm.s:4012   .debug_str:00000000000007d8 .LASF30
     /tmp/ccWhwkRm.s:4016   .debug_str:0000000000000801 .LASF32
     /tmp/ccWhwkRm.s:4074   .debug_str:0000000000000a44 .LASF183
     /tmp/ccWhwkRm.s:3832   .debug_str:0000000000000298 .LASF33
     /tmp/ccWhwkRm.s:3936   .debug_str:000000000000059e .LASF34
     /tmp/ccWhwkRm.s:3930   .debug_str:000000000000057a .LASF35
     /tmp/ccWhwkRm.s:4034   .debug_str:000000000000093e .LASF36
     /tmp/ccWhwkRm.s:3830   .debug_str:0000000000000281 .LASF42
     /tmp/ccWhwkRm.s:3992   .debug_str:0000000000000738 .LASF184
     /tmp/ccWhwkRm.s:3980   .debug_str:00000000000006e8 .LASF185
     /tmp/ccWhwkRm.s:3894   .debug_str:000000000000049d .LASF37
     /tmp/ccWhwkRm.s:3778   .debug_str:00000000000000e8 .LASF38
     /tmp/ccWhwkRm.s:3912   .debug_str:000000000000050e .LASF39
     /tmp/ccWhwkRm.s:3824   .debug_str:0000000000000244 .LASF40
     /tmp/ccWhwkRm.s:3958   .debug_str:000000000000062b .LASF41
     /tmp/ccWhwkRm.s:4090   .debug_str:0000000000000ab7 .LASF43
     /tmp/ccWhwkRm.s:4130   .debug_str:0000000000000bff .LASF44
     /tmp/ccWhwkRm.s:4120   .debug_str:0000000000000ba8 .LASF45
     /tmp/ccWhwkRm.s:4008   .debug_str:00000000000007b5 .LASF46
     /tmp/ccWhwkRm.s:3886   .debug_str:000000000000044b .LASF47
     /tmp/ccWhwkRm.s:3974   .debug_str:00000000000006c5 .LASF48
     /tmp/ccWhwkRm.s:3750   .debug_str:000000000000001d .LASF49
     /tmp/ccWhwkRm.s:3790   .debug_str:0000000000000149 .LASF51
     /tmp/ccWhwkRm.s:4124   .debug_str:0000000000000bdf .LASF53
     /tmp/ccWhwkRm.s:3850   .debug_str:0000000000000328 .LASF55
     /tmp/ccWhwkRm.s:3920   .debug_str:000000000000053b .LASF56
     /tmp/ccWhwkRm.s:3840   .debug_str:00000000000002c5 .LASF57
     /tmp/ccWhwkRm.s:3946   .debug_str:00000000000005db .LASF58
     /tmp/ccWhwkRm.s:3990   .debug_str:000000000000072b .LASF59
     /tmp/ccWhwkRm.s:3998   .debug_str:0000000000000761 .LASF60
     /tmp/ccWhwkRm.s:3754   .debug_str:000000000000005f .LASF61
GAS LISTING /tmp/ccWhwkRm.s 			page 31


     /tmp/ccWhwkRm.s:4040   .debug_str:0000000000000963 .LASF62
     /tmp/ccWhwkRm.s:3932   .debug_str:000000000000057f .LASF63
     /tmp/ccWhwkRm.s:3774   .debug_str:00000000000000ce .LASF64
     /tmp/ccWhwkRm.s:4066   .debug_str:0000000000000a02 .LASF65
     /tmp/ccWhwkRm.s:3906   .debug_str:00000000000004e0 .LASF66
     /tmp/ccWhwkRm.s:4076   .debug_str:0000000000000a49 .LASF67
     /tmp/ccWhwkRm.s:4050   .debug_str:0000000000000997 .LASF186
     /tmp/ccWhwkRm.s:4028   .debug_str:000000000000091e .LASF68
     /tmp/ccWhwkRm.s:3856   .debug_str:000000000000035e .LASF69
     /tmp/ccWhwkRm.s:3952   .debug_str:0000000000000605 .LASF187
     /tmp/ccWhwkRm.s:4080   .debug_str:0000000000000a8a .LASF70
     /tmp/ccWhwkRm.s:3918   .debug_str:0000000000000521 .LASF71
     /tmp/ccWhwkRm.s:4126   .debug_str:0000000000000bec .LASF73
     /tmp/ccWhwkRm.s:3964   .debug_str:000000000000065f .LASF75
     /tmp/ccWhwkRm.s:3902   .debug_str:00000000000004cc .LASF77
     /tmp/ccWhwkRm.s:4058   .debug_str:00000000000009cb .LASF79
     /tmp/ccWhwkRm.s:4042   .debug_str:000000000000096e .LASF80
     /tmp/ccWhwkRm.s:3794   .debug_str:0000000000000164 .LASF81
     /tmp/ccWhwkRm.s:4010   .debug_str:00000000000007c0 .LASF188
     /tmp/ccWhwkRm.s:3744   .debug_str:0000000000000000 .LASF82
     /tmp/ccWhwkRm.s:3878   .debug_str:00000000000003fb .LASF83
     /tmp/ccWhwkRm.s:3916   .debug_str:000000000000051b .LASF84
     /tmp/ccWhwkRm.s:4062   .debug_str:00000000000009e5 .LASF85
     /tmp/ccWhwkRm.s:4060   .debug_str:00000000000009db .LASF86
     /tmp/ccWhwkRm.s:4036   .debug_str:0000000000000951 .LASF87
     /tmp/ccWhwkRm.s:3948   .debug_str:00000000000005e8 .LASF88
     /tmp/ccWhwkRm.s:3810   .debug_str:00000000000001e6 .LASF89
     /tmp/ccWhwkRm.s:3776   .debug_str:00000000000000da .LASF90
     /tmp/ccWhwkRm.s:3908   .debug_str:00000000000004ed .LASF92
     /tmp/ccWhwkRm.s:3812   .debug_str:00000000000001f7 .LASF91
     /tmp/ccWhwkRm.s:3792   .debug_str:0000000000000151 .LASF93
     /tmp/ccWhwkRm.s:4118   .debug_str:0000000000000b9a .LASF189
     /tmp/ccWhwkRm.s:3752   .debug_str:0000000000000037 .LASF190
     /tmp/ccWhwkRm.s:3982   .debug_str:00000000000006ff .LASF94
     /tmp/ccWhwkRm.s:3978   .debug_str:00000000000006d6 .LASF95
     /tmp/ccWhwkRm.s:3802   .debug_str:000000000000019c .LASF96
     /tmp/ccWhwkRm.s:4070   .debug_str:0000000000000a28 .LASF97
     /tmp/ccWhwkRm.s:3764   .debug_str:00000000000000a7 .LASF98
     /tmp/ccWhwkRm.s:3904   .debug_str:00000000000004d2 .LASF99
     /tmp/ccWhwkRm.s:4112   .debug_str:0000000000000b47 .LASF100
     /tmp/ccWhwkRm.s:4054   .debug_str:00000000000009b7 .LASF101
     /tmp/ccWhwkRm.s:3844   .debug_str:00000000000002e1 .LASF102
     /tmp/ccWhwkRm.s:4056   .debug_str:00000000000009c6 .LASF103
     /tmp/ccWhwkRm.s:4102   .debug_str:0000000000000af9 .LASF104
     /tmp/ccWhwkRm.s:4032   .debug_str:0000000000000937 .LASF105
     /tmp/ccWhwkRm.s:3846   .debug_str:0000000000000301 .LASF106
     /tmp/ccWhwkRm.s:4084   .debug_str:0000000000000a9c .LASF107
     /tmp/ccWhwkRm.s:4018   .debug_str:0000000000000815 .LASF108
     /tmp/ccWhwkRm.s:3864   .debug_str:00000000000003a4 .LASF109
     /tmp/ccWhwkRm.s:3884   .debug_str:000000000000042f .LASF110
     /tmp/ccWhwkRm.s:4022   .debug_str:00000000000008f1 .LASF111
     /tmp/ccWhwkRm.s:3860   .debug_str:000000000000038c .LASF112
     /tmp/ccWhwkRm.s:4092   .debug_str:0000000000000ad5 .LASF113
     /tmp/ccWhwkRm.s:3866   .debug_str:00000000000003af .LASF114
     /tmp/ccWhwkRm.s:3820   .debug_str:0000000000000218 .LASF115
     /tmp/ccWhwkRm.s:3748   .debug_str:0000000000000015 .LASF116
     /tmp/ccWhwkRm.s:3806   .debug_str:00000000000001bc .LASF117
GAS LISTING /tmp/ccWhwkRm.s 			page 32


     /tmp/ccWhwkRm.s:4094   .debug_str:0000000000000adc .LASF118
     /tmp/ccWhwkRm.s:3796   .debug_str:000000000000017a .LASF191
     /tmp/ccWhwkRm.s:3880   .debug_str:0000000000000404 .LASF119
     /tmp/ccWhwkRm.s:3762   .debug_str:000000000000009e .LASF120
     /tmp/ccWhwkRm.s:4110   .debug_str:0000000000000b3e .LASF121
     /tmp/ccWhwkRm.s:3858   .debug_str:0000000000000381 .LASF122
     /tmp/ccWhwkRm.s:3942   .debug_str:00000000000005be .LASF123
     /tmp/ccWhwkRm.s:4004   .debug_str:0000000000000780 .LASF124
     /tmp/ccWhwkRm.s:3826   .debug_str:0000000000000260 .LASF125
     /tmp/ccWhwkRm.s:3870   .debug_str:00000000000003c2 .LASF126
     /tmp/ccWhwkRm.s:4104   .debug_str:0000000000000b0e .LASF127
     /tmp/ccWhwkRm.s:4072   .debug_str:0000000000000a3b .LASF128
     /tmp/ccWhwkRm.s:4064   .debug_str:00000000000009ed .LASF129
     /tmp/ccWhwkRm.s:3984   .debug_str:0000000000000709 .LASF130
     /tmp/ccWhwkRm.s:3950   .debug_str:00000000000005f0 .LASF131
     /tmp/ccWhwkRm.s:3968   .debug_str:0000000000000697 .LASF132
     /tmp/ccWhwkRm.s:3970   .debug_str:000000000000069e .LASF133
     /tmp/ccWhwkRm.s:3940   .debug_str:00000000000005b7 .LASF134
     /tmp/ccWhwkRm.s:3890   .debug_str:000000000000047b .LASF135
     /tmp/ccWhwkRm.s:4106   .debug_str:0000000000000b28 .LASF136
     /tmp/ccWhwkRm.s:4026   .debug_str:000000000000090a .LASF137
     /tmp/ccWhwkRm.s:3934   .debug_str:0000000000000596 .LASF138
     /tmp/ccWhwkRm.s:3836   .debug_str:00000000000002ac .LASF139
     /tmp/ccWhwkRm.s:3910   .debug_str:0000000000000506 .LASF140
     /tmp/ccWhwkRm.s:3972   .debug_str:00000000000006b1 .LASF141
     /tmp/ccWhwkRm.s:4128   .debug_str:0000000000000bf7 .LASF142
     /tmp/ccWhwkRm.s:3874   .debug_str:00000000000003d5 .LASF143
     /tmp/ccWhwkRm.s:4024   .debug_str:0000000000000903 .LASF144
     /tmp/ccWhwkRm.s:4000   .debug_str:0000000000000766 .LASF145
     /tmp/ccWhwkRm.s:4002   .debug_str:0000000000000779 .LASF146
     /tmp/ccWhwkRm.s:3788   .debug_str:0000000000000136 .LASF147
     /tmp/ccWhwkRm.s:3818   .debug_str:0000000000000212 .LASF148
     /tmp/ccWhwkRm.s:3862   .debug_str:0000000000000392 .LASF149
     /tmp/ccWhwkRm.s:3872   .debug_str:00000000000003cf .LASF150
     /tmp/ccWhwkRm.s:3808   .debug_str:00000000000001d4 .LASF151
     /tmp/ccWhwkRm.s:3758   .debug_str:0000000000000072 .LASF152
     /tmp/ccWhwkRm.s:3994   .debug_str:0000000000000742 .LASF153
     /tmp/ccWhwkRm.s:3986   .debug_str:0000000000000712 .LASF154
     /tmp/ccWhwkRm.s:4052   .debug_str:000000000000099f .LASF155
     /tmp/ccWhwkRm.s:4098   .debug_str:0000000000000ae7 .LASF156
     /tmp/ccWhwkRm.s:4114   .debug_str:0000000000000b66 .LASF157
     /tmp/ccWhwkRm.s:3786   .debug_str:000000000000012c .LASF158
     /tmp/ccWhwkRm.s:3922   .debug_str:000000000000054b .LASF159
     /tmp/ccWhwkRm.s:3944   .debug_str:00000000000005d6 .LASF160
     /tmp/ccWhwkRm.s:3954   .debug_str:000000000000060a .LASF161
     /tmp/ccWhwkRm.s:3768   .debug_str:00000000000000bf .LASF162
     /tmp/ccWhwkRm.s:4048   .debug_str:0000000000000986 .LASF163
     /tmp/ccWhwkRm.s:4068   .debug_str:0000000000000a19 .LASF164
     /tmp/ccWhwkRm.s:3852   .debug_str:0000000000000334 .LASF165
     /tmp/ccWhwkRm.s:3962   .debug_str:000000000000064a .LASF166
     /tmp/ccWhwkRm.s:3882   .debug_str:000000000000040d .LASF167
     /tmp/ccWhwkRm.s:4086   .debug_str:0000000000000aa4 .LASF168
     /tmp/ccWhwkRm.s:46     .text:0000000000000020 .LFB42
     /tmp/ccWhwkRm.s:744    .text:0000000000000298 .LFE42
     /tmp/ccWhwkRm.s:3463   .debug_loc:0000000000000000 .LLST0
     /tmp/ccWhwkRm.s:3800   .debug_str:0000000000000195 .LASF169
     /tmp/ccWhwkRm.s:3474   .debug_loc:0000000000000036 .LLST1
GAS LISTING /tmp/ccWhwkRm.s 			page 33


     /tmp/ccWhwkRm.s:3728   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccWhwkRm.s:4096   .debug_str:0000000000000ae2 .LASF170
     /tmp/ccWhwkRm.s:4100   .debug_str:0000000000000af1 .LASF171
     /tmp/ccWhwkRm.s:3555   .debug_loc:0000000000000166 .LLST5
     /tmp/ccWhwkRm.s:3976   .debug_str:00000000000006ce .LASF172
     /tmp/ccWhwkRm.s:3586   .debug_loc:00000000000001fb .LLST6
     /tmp/ccWhwkRm.s:3593   .debug_loc:000000000000021e .LLST7
     /tmp/ccWhwkRm.s:3616   .debug_loc:000000000000028d .LLST8
     /tmp/ccWhwkRm.s:3780   .debug_str:0000000000000105 .LASF173
     /tmp/ccWhwkRm.s:3623   .debug_loc:00000000000002b0 .LLST9
     /tmp/ccWhwkRm.s:3816   .debug_str:000000000000020c .LASF174
     /tmp/ccWhwkRm.s:3630   .debug_loc:00000000000002d3 .LLST10
     /tmp/ccWhwkRm.s:3926   .debug_str:000000000000056b .LASF175
     /tmp/ccWhwkRm.s:3637   .debug_loc:00000000000002f6 .LLST11
     /tmp/ccWhwkRm.s:3896   .debug_str:00000000000004a6 .LASF176
     /tmp/ccWhwkRm.s:3644   .debug_loc:0000000000000319 .LLST12
     /tmp/ccWhwkRm.s:3651   .debug_loc:000000000000033c .LLST13
     /tmp/ccWhwkRm.s:3928   .debug_str:0000000000000572 .LASF177
     /tmp/ccWhwkRm.s:3658   .debug_loc:000000000000035f .LLST14
     /tmp/ccWhwkRm.s:3766   .debug_str:00000000000000ba .LASF178
     /tmp/ccWhwkRm.s:3665   .debug_loc:0000000000000382 .LLST15
     /tmp/ccWhwkRm.s:3672   .debug_loc:00000000000003a5 .LLST16
     /tmp/ccWhwkRm.s:243    .text:00000000000000d8 .LVL8
     /tmp/ccWhwkRm.s:327    .text:0000000000000110 .LVL16
     /tmp/ccWhwkRm.s:378    .text:0000000000000134 .LVL22
     /tmp/ccWhwkRm.s:412    .text:000000000000015c .LVL26
     /tmp/ccWhwkRm.s:437    .text:000000000000017c .LVL28
     /tmp/ccWhwkRm.s:462    .text:0000000000000194 .LVL32
     /tmp/ccWhwkRm.s:504    .text:00000000000001c0 .LVL37
     /tmp/ccWhwkRm.s:535    .text:00000000000001dc .LVL40
     /tmp/ccWhwkRm.s:570    .text:00000000000001fc .LVL44
     /tmp/ccWhwkRm.s:599    .text:0000000000000214 .LVL47
     /tmp/ccWhwkRm.s:130    .text:0000000000000084 .LBB56
     /tmp/ccWhwkRm.s:146    .text:0000000000000090 .LBE56
     /tmp/ccWhwkRm.s:152    .text:0000000000000098 .LBB58
     /tmp/ccWhwkRm.s:167    .text:00000000000000a4 .LBE58
     /tmp/ccWhwkRm.s:264    .text:00000000000000e4 .LBB61
     /tmp/ccWhwkRm.s:275    .text:00000000000000e8 .LBE61
     /tmp/ccWhwkRm.s:3679   .debug_loc:00000000000003c8 .LLST17
     /tmp/ccWhwkRm.s:280    .text:00000000000000ec .LBB63
     /tmp/ccWhwkRm.s:292    .text:00000000000000f0 .LBE63
     /tmp/ccWhwkRm.s:3686   .debug_loc:00000000000003eb .LLST18
     /tmp/ccWhwkRm.s:658    .text:0000000000000250 .LBB46
     /tmp/ccWhwkRm.s:738    .text:0000000000000298 .LBE46
     /tmp/ccWhwkRm.s:660    .text:0000000000000250 .LBB47
     /tmp/ccWhwkRm.s:675    .text:000000000000025c .LBE47
     /tmp/ccWhwkRm.s:679    .text:0000000000000260 .LBB49
     /tmp/ccWhwkRm.s:694    .text:000000000000026c .LBE49
     /tmp/ccWhwkRm.s:709    .text:0000000000000288 .LBB51
     /tmp/ccWhwkRm.s:720    .text:000000000000028c .LBE51
     /tmp/ccWhwkRm.s:3693   .debug_loc:000000000000040e .LLST4
     /tmp/ccWhwkRm.s:725    .text:0000000000000290 .LBB53
     /tmp/ccWhwkRm.s:737    .text:0000000000000298 .LBE53
     /tmp/ccWhwkRm.s:704    .text:0000000000000284 .LVL53
     /tmp/ccWhwkRm.s:60     .text:0000000000000034 .LBB34
     /tmp/ccWhwkRm.s:77     .text:0000000000000040 .LBE34
     /tmp/ccWhwkRm.s:79     .text:0000000000000040 .LBB36
GAS LISTING /tmp/ccWhwkRm.s 			page 34


     /tmp/ccWhwkRm.s:95     .text:000000000000004c .LBE36
     /tmp/ccWhwkRm.s:621    .text:0000000000000220 .LBB41
     /tmp/ccWhwkRm.s:633    .text:0000000000000228 .LBE41
     /tmp/ccWhwkRm.s:3700   .debug_loc:0000000000000431 .LLST2
     /tmp/ccWhwkRm.s:647    .text:0000000000000248 .LBB44
     /tmp/ccWhwkRm.s:655    .text:000000000000024c .LBE44
     /tmp/ccWhwkRm.s:3708   .debug_loc:0000000000000455 .LLST3
     /tmp/ccWhwkRm.s:120    .text:0000000000000080 .LVL3
     /tmp/ccWhwkRm.s:10     .text:0000000000000000 .LFB41
     /tmp/ccWhwkRm.s:40     .text:0000000000000020 .LFE41
     /tmp/ccWhwkRm.s:4082   .debug_str:0000000000000a97 .LASF179
     /tmp/ccWhwkRm.s:3838   .debug_str:00000000000002c0 .LASF192
     /tmp/ccWhwkRm.s:3848   .debug_str:0000000000000318 .LASF193
     /tmp/ccWhwkRm.s:75     .text:0000000000000040 .LVL0
     /tmp/ccWhwkRm.s:108    .text:000000000000005c .LVL2
     /tmp/ccWhwkRm.s:125    .text:0000000000000084 .LVL4
     /tmp/ccWhwkRm.s:177    .text:00000000000000b4 .LVL6
     /tmp/ccWhwkRm.s:93     .text:000000000000004c .LVL1
     /tmp/ccWhwkRm.s:139    .text:0000000000000088 .LVL5
     /tmp/ccWhwkRm.s:307    .text:0000000000000104 .LVL14
     /tmp/ccWhwkRm.s:342    .text:000000000000011c .LVL17
     /tmp/ccWhwkRm.s:373    .text:000000000000012c .LVL21
     /tmp/ccWhwkRm.s:406    .text:0000000000000154 .LVL25
     /tmp/ccWhwkRm.s:427    .text:0000000000000168 .LVL27
     /tmp/ccWhwkRm.s:440    .text:0000000000000180 .LVL29
     /tmp/ccWhwkRm.s:490    .text:00000000000001b4 .LVL35
     /tmp/ccWhwkRm.s:519    .text:00000000000001cc .LVL38
     /tmp/ccWhwkRm.s:551    .text:00000000000001e8 .LVL41
     /tmp/ccWhwkRm.s:585    .text:0000000000000208 .LVL45
     /tmp/ccWhwkRm.s:614    .text:0000000000000220 .LVL48
     /tmp/ccWhwkRm.s:637    .text:0000000000000230 .LVL50
     /tmp/ccWhwkRm.s:386    .text:0000000000000140 .LVL23
     /tmp/ccWhwkRm.s:401    .text:000000000000014c .LVL24
     /tmp/ccWhwkRm.s:470    .text:00000000000001a0 .LVL33
     /tmp/ccWhwkRm.s:485    .text:00000000000001ac .LVL34
     /tmp/ccWhwkRm.s:450    .text:0000000000000184 .LVL30
     /tmp/ccWhwkRm.s:499    .text:00000000000001b8 .LVL36
     /tmp/ccWhwkRm.s:528    .text:00000000000001d0 .LVL39
     /tmp/ccWhwkRm.s:555    .text:00000000000001ec .LVL42
     /tmp/ccWhwkRm.s:565    .text:00000000000001f4 .LVL43
     /tmp/ccWhwkRm.s:594    .text:000000000000020c .LVL46
     /tmp/ccWhwkRm.s:238    .text:00000000000000d0 .LVL7
     /tmp/ccWhwkRm.s:256    .text:00000000000000e0 .LVL9
     /tmp/ccWhwkRm.s:322    .text:0000000000000108 .LVL15
     /tmp/ccWhwkRm.s:361    .text:0000000000000124 .LVL19
     /tmp/ccWhwkRm.s:367    .text:0000000000000128 .LVL20
     /tmp/ccWhwkRm.s:355    .text:0000000000000120 .LVL18
     /tmp/ccWhwkRm.s:456    .text:0000000000000188 .LVL31
     /tmp/ccWhwkRm.s:263    .text:00000000000000e4 .LVL10
     /tmp/ccWhwkRm.s:272    .text:00000000000000e8 .LVL11
     /tmp/ccWhwkRm.s:279    .text:00000000000000ec .LVL12
     /tmp/ccWhwkRm.s:288    .text:00000000000000f0 .LVL13
     /tmp/ccWhwkRm.s:708    .text:0000000000000288 .LVL54
     /tmp/ccWhwkRm.s:717    .text:000000000000028c .LVL55
     /tmp/ccWhwkRm.s:630    .text:0000000000000228 .LVL49
     /tmp/ccWhwkRm.s:646    .text:0000000000000248 .LVL51
     /tmp/ccWhwkRm.s:653    .text:000000000000024c .LVL52
GAS LISTING /tmp/ccWhwkRm.s 			page 35


     /tmp/ccWhwkRm.s:754    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccWhwkRm.s:128    .text:0000000000000084 .LBB55
     /tmp/ccWhwkRm.s:293    .text:00000000000000f0 .LBE55
     /tmp/ccWhwkRm.s:311    .text:0000000000000104 .LBB66
     /tmp/ccWhwkRm.s:617    .text:0000000000000220 .LBE66
     /tmp/ccWhwkRm.s:228    .text:00000000000000cc .LBB60
     /tmp/ccWhwkRm.s:259    .text:00000000000000e0 .LBE60
     /tmp/ccWhwkRm.s:312    .text:0000000000000104 .LBB65
     /tmp/ccWhwkRm.s:616    .text:0000000000000220 .LBE65

UNDEFINED SYMBOLS
console_handler
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPKv
_ZN3TCB12createThreadEPFvPvES0_S0_
_ZN3TCB10exitThreadEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN9semaphore13openSemaphoreEi
_ZN9semaphore14closeSemaphoreEv
_ZN9semaphore4waitEv
_ZN9semaphore6signalEv
_ZN9semaphore7trywaitEv
_ZN3TCB7runningE
