GAS LISTING /tmp/ccFY8Ffw.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB41:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by os on 5/17/24.
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   7:src/riscv.cpp **** #include "../h/tcb.hpp"
   8:src/riscv.cpp **** #include "../h/semaphore.hpp"
   9:src/riscv.cpp **** #include "../h/print.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 11 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  12:src/riscv.cpp **** 
  13:src/riscv.cpp ****     if(TCB::running->body != nullptr) {
  20              		.loc 1 13 5
  21              		.loc 1 13 22 is_stmt 0
  22 000c 97070000 		la	a5,_ZN3TCB7runningE
  22      83B70700 
  23 0014 83B70700 		ld	a5,0(a5)
  24 0018 83B70700 		ld	a5,0(a5)
  25              		.loc 1 13 5
  26 001c 63860700 		beqz	a5,.L2
  14:src/riscv.cpp ****         __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(Riscv::BitMaskSstatus::SSTATUS_SPP
  27              		.loc 1 14 9 is_stmt 1
  28              		.loc 1 14 102 is_stmt 0
  29 0020 93070010 		li	a5,256
  30              	#APP
  31              	# 14 "src/riscv.cpp" 1
  15              	    }
  32              		csrc sstatus, a5
  33              	# 0 "" 2
  34              	#NO_APP
  35              	.L2:
  16:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  36              		.loc 1 16 5 is_stmt 1
  37              		.loc 1 16 38 is_stmt 0
  38              	#APP
  39              	# 16 "src/riscv.cpp" 1
  17              	    __asm__ volatile("sret");
  40              		csrw sepc, ra
GAS LISTING /tmp/ccFY8Ffw.s 			page 2


  41              	# 0 "" 2
  42              		.loc 1 17 5 is_stmt 1
  43              		.loc 1 17 29 is_stmt 0
  44              	# 17 "src/riscv.cpp" 1
  18              	}
  45              		sret
  46              	# 0 "" 2
  47              		.loc 1 18 1
  48              	#NO_APP
  49 0030 03348100 		ld	s0,8(sp)
  50              		.cfi_restore 8
  51              		.cfi_def_cfa 2, 16
  52 0034 13010101 		addi	sp,sp,16
  53              		.cfi_def_cfa_offset 0
  54 0038 67800000 		jr	ra
  55              		.cfi_endproc
  56              	.LFE41:
  58              		.section	.rodata.str1.8,"aMS",@progbits,1
  59              		.align	3
  60              	.LC0:
  61 0000 67726573 		.string	"greska\n"
  61      6B610A00 
  62              		.text
  63              		.align	2
  64              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  66              	_ZN5Riscv20handleSupervisorTrapEv:
  67              	.LFB42:
  19:src/riscv.cpp **** 
  20:src/riscv.cpp **** void Riscv::handleSupervisorTrap() {
  68              		.loc 1 20 36 is_stmt 1
  69              		.cfi_startproc
  70 003c 130101F7 		addi	sp,sp,-144
  71              		.cfi_def_cfa_offset 144
  72 0040 23341108 		sd	ra,136(sp)
  73 0044 23308108 		sd	s0,128(sp)
  74 0048 233C9106 		sd	s1,120(sp)
  75              		.cfi_offset 1, -8
  76              		.cfi_offset 8, -16
  77              		.cfi_offset 9, -24
  78 004c 13040109 		addi	s0,sp,144
  79              		.cfi_def_cfa 8, 0
  21:src/riscv.cpp **** 
  22:src/riscv.cpp ****     uint64 kod = r_a0();
  80              		.loc 1 22 5
  81              	.LBB42:
  82              	.LBB43:
  83              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../lib/console.h"
  10:src/../h/riscv.hpp **** class Riscv
GAS LISTING /tmp/ccFY8Ffw.s 			page 3


  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     //pop sstatus spp and sstatus spie
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp ****     //push x3..31 registers
  17:src/../h/riscv.hpp ****     static void pushRegisters();
  18:src/../h/riscv.hpp ****     //pop x3..31 regiesters
  19:src/../h/riscv.hpp ****     static void popRegisters();
  20:src/../h/riscv.hpp **** 
  21:src/../h/riscv.hpp ****     // read register scause
  22:src/../h/riscv.hpp ****     static uint64 r_scause();
  23:src/../h/riscv.hpp **** 
  24:src/../h/riscv.hpp ****     // write register scause
  25:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // read register sepc
  28:src/../h/riscv.hpp ****     static uint64 r_sepc();
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // write register sepc
  31:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // read register stvec
  34:src/../h/riscv.hpp ****     static uint64 r_stvec();
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // write register stvec
  37:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // read register stval
  40:src/../h/riscv.hpp ****     static uint64 r_stval();
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // write register stval
  43:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     enum BitMaskSip
  46:src/../h/riscv.hpp ****     {
  47:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  48:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  49:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  50:src/../h/riscv.hpp ****     };
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp ****     // mask set register sip
  53:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  54:src/../h/riscv.hpp **** 
  55:src/../h/riscv.hpp ****     // mask clear register sip
  56:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // read register sip
  59:src/../h/riscv.hpp ****     static uint64 r_sip();
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // write register sip
  62:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     enum BitMaskSstatus
  65:src/../h/riscv.hpp ****     {
  66:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  67:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
GAS LISTING /tmp/ccFY8Ffw.s 			page 4


  68:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  69:src/../h/riscv.hpp ****     };
  70:src/../h/riscv.hpp **** 
  71:src/../h/riscv.hpp ****     // mask set register sstatus
  72:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  73:src/../h/riscv.hpp **** 
  74:src/../h/riscv.hpp ****     // mask clear register sstatus
  75:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // read register sstatus
  78:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // write register sstatus
  81:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     //read a0 register
  84:src/../h/riscv.hpp ****     static uint64 r_a0();
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     //write to a0 register
  87:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     static void supervisorTrap();
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp **** private:
  92:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  93:src/../h/riscv.hpp **** };
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     uint64 volatile scause;
  99:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 100:src/../h/riscv.hpp ****     return scause;
 101:src/../h/riscv.hpp **** }
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 104:src/../h/riscv.hpp **** {
 105:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     uint64 volatile sepc;
 111:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 112:src/../h/riscv.hpp ****     return sepc;
 113:src/../h/riscv.hpp **** }
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 116:src/../h/riscv.hpp **** {
 117:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     uint64 volatile stvec;
 123:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 124:src/../h/riscv.hpp ****     return stvec;
GAS LISTING /tmp/ccFY8Ffw.s 			page 5


 125:src/../h/riscv.hpp **** }
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 128:src/../h/riscv.hpp **** {
 129:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     uint64 volatile stval;
 135:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 136:src/../h/riscv.hpp ****     return stval;
 137:src/../h/riscv.hpp **** }
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 140:src/../h/riscv.hpp **** {
 141:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 145:src/../h/riscv.hpp **** {
 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 147:src/../h/riscv.hpp **** }
 148:src/../h/riscv.hpp **** 
 149:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 150:src/../h/riscv.hpp **** {
 151:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     uint64 volatile sip;
 157:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 158:src/../h/riscv.hpp ****     return sip;
 159:src/../h/riscv.hpp **** }
 160:src/../h/riscv.hpp **** 
 161:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 162:src/../h/riscv.hpp **** {
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 164:src/../h/riscv.hpp **** }
 165:src/../h/riscv.hpp **** 
 166:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 167:src/../h/riscv.hpp **** {
 168:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 169:src/../h/riscv.hpp **** }
 170:src/../h/riscv.hpp **** 
 171:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 172:src/../h/riscv.hpp **** {
 173:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 179:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 180:src/../h/riscv.hpp ****     return sstatus;
 181:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccFY8Ffw.s 			page 6


 182:src/../h/riscv.hpp **** 
 183:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 184:src/../h/riscv.hpp **** {
 185:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 186:src/../h/riscv.hpp **** }
 187:src/../h/riscv.hpp **** 
 188:src/../h/riscv.hpp **** //a0
 189:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 190:src/../h/riscv.hpp **** {
 191:src/../h/riscv.hpp ****     uint64 volatile a0;
  84              		.loc 2 191 5
 192:src/../h/riscv.hpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
  85              		.loc 2 192 5
  86              		.loc 2 192 46 is_stmt 0
  87              	#APP
  88              	# 192 "src/../h/riscv.hpp" 1
 193              	    return a0;
  89              		mv a5, a0
  90              	# 0 "" 2
  91              	#NO_APP
  92 0054 2334F4FA 		sd	a5,-88(s0)
  93              		.loc 2 193 5 is_stmt 1
  94              		.loc 2 193 12 is_stmt 0
  95 0058 833784FA 		ld	a5,-88(s0)
  96              	.LVL0:
  97              	.LBE43:
  98              	.LBE42:
  23:src/riscv.cpp ****     uint64 scause = r_scause();
  99              		.loc 1 23 5 is_stmt 1
 100              	.LBB44:
 101              	.LBB45:
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 102              		.loc 2 98 5
  99:src/../h/riscv.hpp ****     return scause;
 103              		.loc 2 99 5
  99:src/../h/riscv.hpp ****     return scause;
 104              		.loc 2 99 72 is_stmt 0
 105              	#APP
 106              	# 99 "src/../h/riscv.hpp" 1
 107              		csrr a4, scause
 108              	# 0 "" 2
 109              	#NO_APP
 110 0060 2330E4FA 		sd	a4,-96(s0)
 100:src/../h/riscv.hpp **** }
 111              		.loc 2 100 5 is_stmt 1
 100:src/../h/riscv.hpp **** }
 112              		.loc 2 100 12 is_stmt 0
 113 0064 033704FA 		ld	a4,-96(s0)
 114              	.LVL1:
 115              	.LBE45:
 116              	.LBE44:
  24:src/riscv.cpp **** 
  25:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){//pomera registar a3??
 117              		.loc 1 25 5 is_stmt 1
 118              	.LBB46:
 119              		.loc 1 25 39 is_stmt 0
 120 0068 130687FF 		addi	a2,a4,-8
GAS LISTING /tmp/ccFY8Ffw.s 			page 7


 121              		.loc 1 25 5
 122 006c 93061000 		li	a3,1
 123 0070 63F8C604 		bleu	a2,a3,.L31
 124              	.LBE46:
  26:src/riscv.cpp ****         //environment call
  27:src/riscv.cpp **** 
  28:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
  29:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  30:src/riscv.cpp ****         int ret;
  31:src/riscv.cpp ****         char c;
  32:src/riscv.cpp ****         semaphore ** shandle;
  33:src/riscv.cpp ****         semaphore * id;
  34:src/riscv.cpp ****         switch (kod) {
  35:src/riscv.cpp ****             case 0x01:
  36:src/riscv.cpp ****                 size_t size;
  37:src/riscv.cpp ****                 void *mallocr;
  38:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
  39:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
  40:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
  41:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  42:src/riscv.cpp ****                 break;
  43:src/riscv.cpp **** 
  44:src/riscv.cpp ****             case 0x02:
  45:src/riscv.cpp ****                 void *freep;
  46:src/riscv.cpp ****                 int greska;
  47:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
  48:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
  49:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
  50:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  51:src/riscv.cpp ****                 break;
  52:src/riscv.cpp **** 
  53:src/riscv.cpp ****             case 0x11:
  54:src/riscv.cpp ****                 TCB::Body start_routine;
  55:src/riscv.cpp ****                 void* arg;
  56:src/riscv.cpp ****                 thread_t* thandle;
  57:src/riscv.cpp ****                 void* stek;
  58:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
  59:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
  60:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
  61:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
  62:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
  63:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
  64:src/riscv.cpp ****                 else ret = -1;
  65:src/riscv.cpp **** 
  66:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  67:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  68:src/riscv.cpp ****                 break;
  69:src/riscv.cpp **** 
  70:src/riscv.cpp ****             case 0x12:
  71:src/riscv.cpp ****                 ret = TCB::exitThread();
  72:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  73:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  74:src/riscv.cpp ****                 break;
  75:src/riscv.cpp **** 
  76:src/riscv.cpp ****             case 0x13:
  77:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
  78:src/riscv.cpp ****                 TCB::dispatch();
GAS LISTING /tmp/ccFY8Ffw.s 			page 8


  79:src/riscv.cpp ****                 break;
  80:src/riscv.cpp **** 
  81:src/riscv.cpp ****             case 0x21:
  82:src/riscv.cpp ****                 int val;
  83:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
  84:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
  85:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
  86:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
  87:src/riscv.cpp ****                 else ret = -1;
  88:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  89:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  90:src/riscv.cpp ****                 break;
  91:src/riscv.cpp **** 
  92:src/riscv.cpp ****             case 0x22:
  93:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
  94:src/riscv.cpp ****                 ret = id->semaphore::closeSemaphore();
  95:src/riscv.cpp ****                 //MemoryAllocator::mem_free(id);
  96:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  97:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  98:src/riscv.cpp ****                 break;
  99:src/riscv.cpp **** 
 100:src/riscv.cpp ****             case 0x23:
 101:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 102:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
 103:src/riscv.cpp ****                 else ret = -1;
 104:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 105:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 106:src/riscv.cpp ****                 break;
 107:src/riscv.cpp **** 
 108:src/riscv.cpp ****             case 0x24:
 109:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 110:src/riscv.cpp ****                 ret = id->semaphore::signal();
 111:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 112:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 113:src/riscv.cpp ****                 break;
 114:src/riscv.cpp **** 
 115:src/riscv.cpp ****             case 0x26:
 116:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 117:src/riscv.cpp ****                 ret = id->semaphore::trywait();
 118:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 119:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 120:src/riscv.cpp ****                 break;
 121:src/riscv.cpp ****             case 0x41:
 122:src/riscv.cpp ****                 c = __getc();
 123:src/riscv.cpp ****                 __asm__ volatile ("mv t0, %0" : : "r"(c));
 124:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 125:src/riscv.cpp ****                 break;
 126:src/riscv.cpp ****             case 0x42:
 127:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(c));
 128:src/riscv.cpp ****                 __putc(c);
 129:src/riscv.cpp ****                 break;
 130:src/riscv.cpp ****             default:
 131:src/riscv.cpp ****                 break;
 132:src/riscv.cpp ****         }
 133:src/riscv.cpp **** 
 134:src/riscv.cpp ****         w_sstatus(sstatus);
 135:src/riscv.cpp ****         w_sepc(sepc);
GAS LISTING /tmp/ccFY8Ffw.s 			page 9


 136:src/riscv.cpp ****         //if(TCB::running->body != nullptr) Riscv::mc_sstatus(Riscv::SSTATUS_SPP);
 137:src/riscv.cpp ****     }
 138:src/riscv.cpp ****     else if(scause == 0x8000000000000001UL){
 125              		.loc 1 138 10 is_stmt 1
 126              	.LBB86:
 127              	.LBB47:
 128 0074 9307F0FF 		li	a5,-1
 129              	.LVL2:
 130 0078 9397F703 		slli	a5,a5,63
 131 007c 93871700 		addi	a5,a5,1
 132 0080 6302F720 		beq	a4,a5,.L32
 133              	.LBE47:
 134              	.LBE86:
 139:src/riscv.cpp **** 
 140:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 141:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 142:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 143:src/riscv.cpp **** 
 144:src/riscv.cpp ****         TCB::timeSliceCounter++;
 145:src/riscv.cpp ****         //supervisor software interrupt; timer
 146:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 147:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 148:src/riscv.cpp ****             TCB::dispatch();
 149:src/riscv.cpp ****         }
 150:src/riscv.cpp **** 
 151:src/riscv.cpp ****         w_sstatus(sstatus);
 152:src/riscv.cpp ****         w_sepc(sepc);
 153:src/riscv.cpp **** 
 154:src/riscv.cpp **** 
 155:src/riscv.cpp ****     }else if(scause == 0x8000000000000009UL){
 135              		.loc 1 155 11
 136              	.LBB87:
 137              	.LBB72:
 138              	.LBB48:
 139 0084 9307F0FF 		li	a5,-1
 140 0088 9397F703 		slli	a5,a5,63
 141 008c 93879700 		addi	a5,a5,9
 142 0090 6308F726 		beq	a4,a5,.L33
 156:src/riscv.cpp ****         // supervisor external interrupt; console
 157:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 158:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 159:src/riscv.cpp **** 
 160:src/riscv.cpp ****         console_handler();
 161:src/riscv.cpp **** 
 162:src/riscv.cpp ****         w_sstatus(sstatus);
 163:src/riscv.cpp ****         w_sepc(sepc);
 164:src/riscv.cpp **** 
 165:src/riscv.cpp ****     }else if(scause == 0x0000000000000002UL){
 143              		.loc 1 165 11
 144 0094 93072000 		li	a5,2
 145 0098 631AF708 		bne	a4,a5,.L4
 166:src/riscv.cpp ****         //unexpected interrupt;
 167:src/riscv.cpp ****         //printInteger(scause);
 168:src/riscv.cpp ****         //printInteger(r_sepc());
 169:src/riscv.cpp ****         //printInteger(r_stval());
 170:src/riscv.cpp ****         printString("greska\n");
 146              		.loc 1 170 9
GAS LISTING /tmp/ccFY8Ffw.s 			page 10


 147              		.loc 1 170 20 is_stmt 0
 148 009c 17050000 		lla	a0,.LC0
 148      13050500 
 149 00a4 97000000 		call	_Z11printStringPKc@plt
 149      E7800000 
 150              	.LVL3:
 171:src/riscv.cpp **** 
 172:src/riscv.cpp ****         __asm__ volatile("li t0, 0x5555");
 151              		.loc 1 172 9 is_stmt 1
 152              		.loc 1 172 42 is_stmt 0
 153              	#APP
 154              	# 172 "src/riscv.cpp" 1
 173              	        __asm__ volatile("li t1, 0x100000");
 155              		li t0, 0x5555
 156              	# 0 "" 2
 157              		.loc 1 173 9 is_stmt 1
 158              		.loc 1 173 44 is_stmt 0
 159              	# 173 "src/riscv.cpp" 1
 174              	        __asm__ volatile("sw t0, 0(t1)");
 160              		li t1, 0x100000
 161              	# 0 "" 2
 162              		.loc 1 174 9 is_stmt 1
 163              		.loc 1 174 41 is_stmt 0
 164              	# 174 "src/riscv.cpp" 1
 175              	    }
 165              		sw t0, 0(t1)
 166              	# 0 "" 2
 167              	#NO_APP
 168              	.LBE48:
 169              	.LBE72:
 170              	.LBE87:
 176:src/riscv.cpp **** };...
 171              		.loc 1 176 1
 172 00bc 6F000007 		j	.L4
 173              	.LVL4:
 174              	.L31:
 175              	.LBB88:
 176              	.LBB73:
  28:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 177              		.loc 1 28 9 is_stmt 1
 178              	.LBB74:
 179              	.LBB75:
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 180              		.loc 2 110 5
 111:src/../h/riscv.hpp ****     return sepc;
 181              		.loc 2 111 5
 111:src/../h/riscv.hpp ****     return sepc;
 182              		.loc 2 111 64 is_stmt 0
 183              	#APP
 184              	# 111 "src/../h/riscv.hpp" 1
 185              		csrr a4, sepc
 186              	# 0 "" 2
 187              	.LVL5:
 188              	#NO_APP
 189 00c4 233CE4FA 		sd	a4,-72(s0)
 112:src/../h/riscv.hpp **** }
 190              		.loc 2 112 5 is_stmt 1
GAS LISTING /tmp/ccFY8Ffw.s 			page 11


 112:src/../h/riscv.hpp **** }
 191              		.loc 2 112 12 is_stmt 0
 192 00c8 033784FB 		ld	a4,-72(s0)
 193              	.LBE75:
 194              	.LBE74:
  28:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 195              		.loc 1 28 41
 196 00cc 13074700 		addi	a4,a4,4
  28:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 197              		.loc 1 28 42
 198 00d0 2338E4F6 		sd	a4,-144(s0)
  29:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 199              		.loc 1 29 9 is_stmt 1
 200              	.LBB76:
 201              	.LBB77:
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 202              		.loc 2 178 5
 179:src/../h/riscv.hpp ****     return sstatus;
 203              		.loc 2 179 5
 179:src/../h/riscv.hpp ****     return sstatus;
 204              		.loc 2 179 76 is_stmt 0
 205              	#APP
 206              	# 179 "src/../h/riscv.hpp" 1
 207              		csrr a4, sstatus
 208              	# 0 "" 2
 209              	#NO_APP
 210 00d8 2338E4FA 		sd	a4,-80(s0)
 180:src/../h/riscv.hpp **** }
 211              		.loc 2 180 5 is_stmt 1
 180:src/../h/riscv.hpp **** }
 212              		.loc 2 180 12 is_stmt 0
 213 00dc 033704FB 		ld	a4,-80(s0)
 214              	.LBE77:
 215              	.LBE76:
  29:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 216              		.loc 1 29 45
 217 00e0 233CE4F6 		sd	a4,-136(s0)
  30:src/riscv.cpp ****         int ret;
 218              		.loc 1 30 9 is_stmt 1
  31:src/riscv.cpp ****         char c;
 219              		.loc 1 31 9
  32:src/riscv.cpp ****         semaphore ** shandle;
 220              		.loc 1 32 9
  33:src/riscv.cpp ****         semaphore * id;
 221              		.loc 1 33 9
  34:src/riscv.cpp ****         switch (kod) {
 222              		.loc 1 34 9
 223 00e4 13072004 		li	a4,66
 224 00e8 636AF702 		bgtu	a5,a4,.L6
 225 00ec 93972700 		slli	a5,a5,2
 226              	.LVL6:
 227 00f0 17070000 		lla	a4,.L8
 227      13070700 
 228 00f8 B387E700 		add	a5,a5,a4
 229 00fc 83A70700 		lw	a5,0(a5)
 230 0100 B387E700 		add	a5,a5,a4
 231 0104 67800700 		jr	a5
GAS LISTING /tmp/ccFY8Ffw.s 			page 12


 232              		.section	.rodata
 233              		.align	2
 234              		.align	2
 235              	.L8:
 236 0000 00000000 		.word	.L6-.L8
 237 0004 00000000 		.word	.L19-.L8
 238 0008 00000000 		.word	.L18-.L8
 239 000c 00000000 		.word	.L6-.L8
 240 0010 00000000 		.word	.L6-.L8
 241 0014 00000000 		.word	.L6-.L8
 242 0018 00000000 		.word	.L6-.L8
 243 001c 00000000 		.word	.L6-.L8
 244 0020 00000000 		.word	.L6-.L8
 245 0024 00000000 		.word	.L6-.L8
 246 0028 00000000 		.word	.L6-.L8
 247 002c 00000000 		.word	.L6-.L8
 248 0030 00000000 		.word	.L6-.L8
 249 0034 00000000 		.word	.L6-.L8
 250 0038 00000000 		.word	.L6-.L8
 251 003c 00000000 		.word	.L6-.L8
 252 0040 00000000 		.word	.L6-.L8
 253 0044 00000000 		.word	.L17-.L8
 254 0048 00000000 		.word	.L16-.L8
 255 004c 00000000 		.word	.L15-.L8
 256 0050 00000000 		.word	.L6-.L8
 257 0054 00000000 		.word	.L6-.L8
 258 0058 00000000 		.word	.L6-.L8
 259 005c 00000000 		.word	.L6-.L8
 260 0060 00000000 		.word	.L6-.L8
 261 0064 00000000 		.word	.L6-.L8
 262 0068 00000000 		.word	.L6-.L8
 263 006c 00000000 		.word	.L6-.L8
 264 0070 00000000 		.word	.L6-.L8
 265 0074 00000000 		.word	.L6-.L8
 266 0078 00000000 		.word	.L6-.L8
 267 007c 00000000 		.word	.L6-.L8
 268 0080 00000000 		.word	.L6-.L8
 269 0084 00000000 		.word	.L14-.L8
 270 0088 00000000 		.word	.L13-.L8
 271 008c 00000000 		.word	.L12-.L8
 272 0090 00000000 		.word	.L11-.L8
 273 0094 00000000 		.word	.L6-.L8
 274 0098 00000000 		.word	.L10-.L8
 275 009c 00000000 		.word	.L6-.L8
 276 00a0 00000000 		.word	.L6-.L8
 277 00a4 00000000 		.word	.L6-.L8
 278 00a8 00000000 		.word	.L6-.L8
 279 00ac 00000000 		.word	.L6-.L8
 280 00b0 00000000 		.word	.L6-.L8
 281 00b4 00000000 		.word	.L6-.L8
 282 00b8 00000000 		.word	.L6-.L8
 283 00bc 00000000 		.word	.L6-.L8
 284 00c0 00000000 		.word	.L6-.L8
 285 00c4 00000000 		.word	.L6-.L8
 286 00c8 00000000 		.word	.L6-.L8
 287 00cc 00000000 		.word	.L6-.L8
 288 00d0 00000000 		.word	.L6-.L8
GAS LISTING /tmp/ccFY8Ffw.s 			page 13


 289 00d4 00000000 		.word	.L6-.L8
 290 00d8 00000000 		.word	.L6-.L8
 291 00dc 00000000 		.word	.L6-.L8
 292 00e0 00000000 		.word	.L6-.L8
 293 00e4 00000000 		.word	.L6-.L8
 294 00e8 00000000 		.word	.L6-.L8
 295 00ec 00000000 		.word	.L6-.L8
 296 00f0 00000000 		.word	.L6-.L8
 297 00f4 00000000 		.word	.L6-.L8
 298 00f8 00000000 		.word	.L6-.L8
 299 00fc 00000000 		.word	.L6-.L8
 300 0100 00000000 		.word	.L6-.L8
 301 0104 00000000 		.word	.L9-.L8
 302 0108 00000000 		.word	.L7-.L8
 303              		.text
 304              	.L19:
 305              	.LBB78:
  35:src/riscv.cpp ****             case 0x01:
 306              		.loc 1 35 13
  36:src/riscv.cpp ****                 size_t size;
 307              		.loc 1 36 17
  37:src/riscv.cpp ****                 void *mallocr;
 308              		.loc 1 37 17
  38:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
 309              		.loc 1 38 17
  38:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(size));
 310              		.loc 1 38 61 is_stmt 0
 311              	#APP
 312              	# 38 "src/riscv.cpp" 1
 313              		ld a0, 88(x8)
 314              	# 0 "" 2
 315              	.LVL7:
  39:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 316              		.loc 1 39 17 is_stmt 1
  39:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 317              		.loc 1 39 53 is_stmt 0
 318              	#NO_APP
 319 010c 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 319      E7800000 
 320              	.LVL8:
  40:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 321              		.loc 1 40 17 is_stmt 1
  40:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 322              		.loc 1 40 60 is_stmt 0
 323              	#APP
 324              	# 40 "src/riscv.cpp" 1
  41:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 325              		mv t0, a0
 326              	# 0 "" 2
 327              		.loc 1 41 17 is_stmt 1
  41:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 328              		.loc 1 41 50 is_stmt 0
 329              	# 41 "src/riscv.cpp" 1
  42:src/riscv.cpp ****                 break;
 330              		sd t0, 80(x8)
 331              	# 0 "" 2
 332              		.loc 1 42 17 is_stmt 1
GAS LISTING /tmp/ccFY8Ffw.s 			page 14


 333              	.LVL9:
 334              	#NO_APP
 335              	.L6:
 336              	.LBE78:
 134:src/riscv.cpp ****         w_sstatus(sstatus);
 337              		.loc 1 134 9
 134:src/riscv.cpp ****         w_sstatus(sstatus);
 338              		.loc 1 134 18 is_stmt 0
 339 011c 833784F7 		ld	a5,-136(s0)
 340              	.LVL10:
 341              	.LBB79:
 342              	.LBB80:
 185:src/../h/riscv.hpp **** }
 343              		.loc 2 185 5 is_stmt 1
 185:src/../h/riscv.hpp **** }
 344              		.loc 2 185 77 is_stmt 0
 345              	#APP
 346              	# 185 "src/../h/riscv.hpp" 1
 347              		csrw sstatus, a5
 348              	# 0 "" 2
 349              	.LVL11:
 350              	#NO_APP
 351              	.LBE80:
 352              	.LBE79:
 135:src/riscv.cpp ****         w_sepc(sepc);
 353              		.loc 1 135 9 is_stmt 1
 135:src/riscv.cpp ****         w_sepc(sepc);
 354              		.loc 1 135 15 is_stmt 0
 355 0124 833704F7 		ld	a5,-144(s0)
 356              	.LVL12:
 357              	.LBB81:
 358              	.LBB82:
 117:src/../h/riscv.hpp **** }
 359              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 360              		.loc 2 117 65 is_stmt 0
 361              	#APP
 362              	# 117 "src/../h/riscv.hpp" 1
 363              		csrw sepc, a5
 364              	# 0 "" 2
 365              	.LVL13:
 366              	#NO_APP
 367              	.L4:
 368              	.LBE82:
 369              	.LBE81:
 370              	.LBE73:
 371              	.LBE88:
 372              		.loc 1 176 1
 373 012c 83308108 		ld	ra,136(sp)
 374              		.cfi_remember_state
 375              		.cfi_restore 1
 376 0130 03340108 		ld	s0,128(sp)
 377              		.cfi_restore 8
 378              		.cfi_def_cfa 2, 144
 379 0134 83348107 		ld	s1,120(sp)
 380              		.cfi_restore 9
 381 0138 13010109 		addi	sp,sp,144
GAS LISTING /tmp/ccFY8Ffw.s 			page 15


 382              		.cfi_def_cfa_offset 0
 383 013c 67800000 		jr	ra
 384              	.LVL14:
 385              	.L18:
 386              		.cfi_restore_state
 387              	.LBB89:
 388              	.LBB84:
 389              	.LBB83:
  44:src/riscv.cpp ****             case 0x02:
 390              		.loc 1 44 13 is_stmt 1
  45:src/riscv.cpp ****                 void *freep;
 391              		.loc 1 45 17
  46:src/riscv.cpp ****                 int greska;
 392              		.loc 1 46 17
  47:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
 393              		.loc 1 47 17
  47:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)":"=r"(freep));
 394              		.loc 1 47 62 is_stmt 0
 395              	#APP
 396              	# 47 "src/riscv.cpp" 1
 397              		ld a0, 88(x8)
 398              	# 0 "" 2
 399              	.LVL15:
  48:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 400              		.loc 1 48 17 is_stmt 1
  48:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 401              		.loc 1 48 51 is_stmt 0
 402              	#NO_APP
 403 0144 97000000 		call	_ZN15MemoryAllocator8mem_freeEPKv@plt
 403      E7800000 
 404              	.LVL16:
  49:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 405              		.loc 1 49 17 is_stmt 1
  49:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 406              		.loc 1 49 60 is_stmt 0
 407              	#APP
 408              	# 49 "src/riscv.cpp" 1
  50:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 409              		mv t0, a0
 410              	# 0 "" 2
 411              		.loc 1 50 17 is_stmt 1
  50:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 412              		.loc 1 50 50 is_stmt 0
 413              	# 50 "src/riscv.cpp" 1
  51:src/riscv.cpp ****                 break;
 414              		sd t0, 80(x8)
 415              	# 0 "" 2
 416              		.loc 1 51 17 is_stmt 1
 417              	#NO_APP
 418 0154 6FF09FFC 		j	.L6
 419              	.LVL17:
 420              	.L17:
  53:src/riscv.cpp ****             case 0x11:
 421              		.loc 1 53 13
  54:src/riscv.cpp ****                 TCB::Body start_routine;
 422              		.loc 1 54 17
  55:src/riscv.cpp ****                 void* arg;
GAS LISTING /tmp/ccFY8Ffw.s 			page 16


 423              		.loc 1 55 17
  56:src/riscv.cpp ****                 thread_t* thandle;
 424              		.loc 1 56 17
  57:src/riscv.cpp ****                 void* stek;
 425              		.loc 1 57 17
  58:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
 426              		.loc 1 58 17
  58:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
 427              		.loc 1 58 65 is_stmt 0
 428              	#APP
 429              	# 58 "src/riscv.cpp" 1
 430              		ld s1, 88(x8)
 431              	# 0 "" 2
 432              	.LVL18:
  59:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 433              		.loc 1 59 17 is_stmt 1
  59:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 434              		.loc 1 59 71 is_stmt 0
 435              	# 59 "src/riscv.cpp" 1
 436              		ld a0, 96(x8)
 437              	# 0 "" 2
 438              	.LVL19:
  60:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 439              		.loc 1 60 17 is_stmt 1
  60:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 440              		.loc 1 60 62 is_stmt 0
 441              	# 60 "src/riscv.cpp" 1
 442              		ld a1, 104(x8)
 443              	# 0 "" 2
 444              	.LVL20:
  61:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
 445              		.loc 1 61 17 is_stmt 1
  61:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
 446              		.loc 1 61 63 is_stmt 0
 447              	# 61 "src/riscv.cpp" 1
 448              		ld a2, 112(x8)
 449              	# 0 "" 2
 450              	.LVL21:
  62:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 451              		.loc 1 62 17 is_stmt 1
  62:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 452              		.loc 1 62 45 is_stmt 0
 453              	#NO_APP
 454 0168 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_@plt
 454      E7800000 
 455              	.LVL22:
  62:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 456              		.loc 1 62 26
 457 0170 23B0A400 		sd	a0,0(s1)
  63:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
 458              		.loc 1 63 17 is_stmt 1
 459 0174 630A0500 		beqz	a0,.L27
  63:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
 460              		.loc 1 63 45 is_stmt 0
 461 0178 93070000 		li	a5,0
 462              	.L20:
 463              	.LVL23:
GAS LISTING /tmp/ccFY8Ffw.s 			page 17


  66:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 464              		.loc 1 66 17 is_stmt 1
  66:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 465              		.loc 1 66 57 is_stmt 0
 466              	#APP
 467              	# 66 "src/riscv.cpp" 1
  67:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 468              		mv t0, a5
 469              	# 0 "" 2
 470              		.loc 1 67 17 is_stmt 1
  67:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 471              		.loc 1 67 50 is_stmt 0
 472              	# 67 "src/riscv.cpp" 1
  68:src/riscv.cpp ****                 break;
 473              		sd t0, 80(x8)
 474              	# 0 "" 2
 475              		.loc 1 68 17 is_stmt 1
 476              	#NO_APP
 477 0184 6FF09FF9 		j	.L6
 478              	.LVL24:
 479              	.L27:
  64:src/riscv.cpp ****                 else ret = -1;
 480              		.loc 1 64 26 is_stmt 0
 481 0188 9307F0FF 		li	a5,-1
 482 018c 6FF01FFF 		j	.L20
 483              	.LVL25:
 484              	.L16:
  70:src/riscv.cpp ****             case 0x12:
 485              		.loc 1 70 13 is_stmt 1
  71:src/riscv.cpp ****                 ret = TCB::exitThread();
 486              		.loc 1 71 17
  71:src/riscv.cpp ****                 ret = TCB::exitThread();
 487              		.loc 1 71 38 is_stmt 0
 488 0190 97000000 		call	_ZN3TCB10exitThreadEv@plt
 488      E7800000 
 489              	.LVL26:
  72:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 490              		.loc 1 72 17 is_stmt 1
  72:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 491              		.loc 1 72 57 is_stmt 0
 492              	#APP
 493              	# 72 "src/riscv.cpp" 1
  73:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 494              		mv t0, a0
 495              	# 0 "" 2
 496              		.loc 1 73 17 is_stmt 1
  73:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 497              		.loc 1 73 50 is_stmt 0
 498              	# 73 "src/riscv.cpp" 1
  74:src/riscv.cpp ****                 break;
 499              		sw t0, 80(x8)
 500              	# 0 "" 2
 501              		.loc 1 74 17 is_stmt 1
 502              	#NO_APP
 503 01a0 6FF0DFF7 		j	.L6
 504              	.LVL27:
 505              	.L15:
GAS LISTING /tmp/ccFY8Ffw.s 			page 18


  76:src/riscv.cpp ****             case 0x13:
 506              		.loc 1 76 13
  77:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 507              		.loc 1 77 17
  77:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 508              		.loc 1 77 38 is_stmt 0
 509 01a4 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 509      83B70700 
 510 01ac 23B00700 		sd	zero,0(a5)
  78:src/riscv.cpp ****                 TCB::dispatch();
 511              		.loc 1 78 17 is_stmt 1
  78:src/riscv.cpp ****                 TCB::dispatch();
 512              		.loc 1 78 30 is_stmt 0
 513 01b0 97000000 		call	_ZN3TCB8dispatchEv@plt
 513      E7800000 
 514              	.LVL28:
  79:src/riscv.cpp ****                 break;
 515              		.loc 1 79 17 is_stmt 1
 516 01b8 6FF05FF6 		j	.L6
 517              	.LVL29:
 518              	.L14:
  81:src/riscv.cpp ****             case 0x21:
 519              		.loc 1 81 13
  82:src/riscv.cpp ****                 int val;
 520              		.loc 1 82 17
  83:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 521              		.loc 1 83 17
  83:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 522              		.loc 1 83 65 is_stmt 0
 523              	#APP
 524              	# 83 "src/riscv.cpp" 1
 525              		ld s1, 88(x8)
 526              	# 0 "" 2
 527              	.LVL30:
  84:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
 528              		.loc 1 84 17 is_stmt 1
  84:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
 529              		.loc 1 84 61 is_stmt 0
 530              	# 84 "src/riscv.cpp" 1
 531              		ld a0, 96(x8)
 532              	# 0 "" 2
 533              	.LVL31:
  85:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
 534              		.loc 1 85 17 is_stmt 1
  85:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
 535              		.loc 1 85 52 is_stmt 0
 536              	#NO_APP
 537 01c4 1B050500 		sext.w	a0,a0
 538 01c8 97000000 		call	_ZN9semaphore13openSemaphoreEi@plt
 538      E7800000 
 539              	.LVL32:
  85:src/riscv.cpp ****                 *shandle = semaphore::openSemaphore(val);
 540              		.loc 1 85 26
 541 01d0 23B0A400 		sd	a0,0(s1)
  86:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
 542              		.loc 1 86 17 is_stmt 1
 543 01d4 630A0500 		beqz	a0,.L28
GAS LISTING /tmp/ccFY8Ffw.s 			page 19


  86:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
 544              		.loc 1 86 45 is_stmt 0
 545 01d8 93070000 		li	a5,0
 546              	.L21:
 547              	.LVL33:
  88:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 548              		.loc 1 88 17 is_stmt 1
  88:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 549              		.loc 1 88 57 is_stmt 0
 550              	#APP
 551              	# 88 "src/riscv.cpp" 1
  89:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 552              		mv t0, a5
 553              	# 0 "" 2
 554              		.loc 1 89 17 is_stmt 1
  89:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 555              		.loc 1 89 50 is_stmt 0
 556              	# 89 "src/riscv.cpp" 1
  90:src/riscv.cpp ****                 break;
 557              		sw t0, 80(x8)
 558              	# 0 "" 2
 559              		.loc 1 90 17 is_stmt 1
 560              	#NO_APP
 561 01e4 6FF09FF3 		j	.L6
 562              	.LVL34:
 563              	.L28:
  87:src/riscv.cpp ****                 else ret = -1;
 564              		.loc 1 87 26 is_stmt 0
 565 01e8 9307F0FF 		li	a5,-1
 566 01ec 6FF01FFF 		j	.L21
 567              	.LVL35:
 568              	.L13:
  92:src/riscv.cpp ****             case 0x22:
 569              		.loc 1 92 13 is_stmt 1
  93:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 570              		.loc 1 93 17
  93:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 571              		.loc 1 93 60 is_stmt 0
 572              	#APP
 573              	# 93 "src/riscv.cpp" 1
 574              		ld a0, 88(x8)
 575              	# 0 "" 2
 576              	.LVL36:
  94:src/riscv.cpp ****                 ret = id->semaphore::closeSemaphore();
 577              		.loc 1 94 17 is_stmt 1
  94:src/riscv.cpp ****                 ret = id->semaphore::closeSemaphore();
 578              		.loc 1 94 52 is_stmt 0
 579              	#NO_APP
 580 01f4 97000000 		call	_ZN9semaphore14closeSemaphoreEv@plt
 580      E7800000 
 581              	.LVL37:
  96:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 582              		.loc 1 96 17 is_stmt 1
  96:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 583              		.loc 1 96 57 is_stmt 0
 584              	#APP
 585              	# 96 "src/riscv.cpp" 1
GAS LISTING /tmp/ccFY8Ffw.s 			page 20


  97:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 586              		mv t0, a0
 587              	# 0 "" 2
 588              		.loc 1 97 17 is_stmt 1
  97:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 589              		.loc 1 97 50 is_stmt 0
 590              	# 97 "src/riscv.cpp" 1
  98:src/riscv.cpp ****                 break;
 591              		sw t0, 80(x8)
 592              	# 0 "" 2
 593              		.loc 1 98 17 is_stmt 1
 594              	#NO_APP
 595 0204 6FF09FF1 		j	.L6
 596              	.LVL38:
 597              	.L12:
 100:src/riscv.cpp ****             case 0x23:
 598              		.loc 1 100 13
 101:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 599              		.loc 1 101 17
 101:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 600              		.loc 1 101 60 is_stmt 0
 601              	#APP
 602              	# 101 "src/riscv.cpp" 1
 603              		ld a0, 88(x8)
 604              	# 0 "" 2
 605              	.LVL39:
 102:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
 606              		.loc 1 102 17 is_stmt 1
 607              	#NO_APP
 608 020c 630C0500 		beqz	a0,.L29
 102:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
 609              		.loc 1 102 35 discriminator 1
 102:src/riscv.cpp ****                 if(id != nullptr) ret = id->semaphore::wait();
 610              		.loc 1 102 60 is_stmt 0 discriminator 1
 611 0210 97000000 		call	_ZN9semaphore4waitEv@plt
 611      E7800000 
 612              	.LVL40:
 613              	.L22:
 104:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 614              		.loc 1 104 17 is_stmt 1
 104:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 615              		.loc 1 104 57 is_stmt 0
 616              	#APP
 617              	# 104 "src/riscv.cpp" 1
 105:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 618              		mv t0, a0
 619              	# 0 "" 2
 620              		.loc 1 105 17 is_stmt 1
 105:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 621              		.loc 1 105 50 is_stmt 0
 622              	# 105 "src/riscv.cpp" 1
 106:src/riscv.cpp ****                 break;
 623              		sw t0, 80(x8)
 624              	# 0 "" 2
 625              		.loc 1 106 17 is_stmt 1
 626              	#NO_APP
 627 0220 6FF0DFEF 		j	.L6
GAS LISTING /tmp/ccFY8Ffw.s 			page 21


 628              	.LVL41:
 629              	.L29:
 103:src/riscv.cpp ****                 else ret = -1;
 630              		.loc 1 103 26 is_stmt 0
 631 0224 1305F0FF 		li	a0,-1
 632              	.LVL42:
 633 0228 6FF01FFF 		j	.L22
 634              	.L11:
 108:src/riscv.cpp ****             case 0x24:
 635              		.loc 1 108 13 is_stmt 1
 109:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 636              		.loc 1 109 17
 109:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 637              		.loc 1 109 60 is_stmt 0
 638              	#APP
 639              	# 109 "src/riscv.cpp" 1
 640              		ld a0, 88(x8)
 641              	# 0 "" 2
 642              	.LVL43:
 110:src/riscv.cpp ****                 ret = id->semaphore::signal();
 643              		.loc 1 110 17 is_stmt 1
 110:src/riscv.cpp ****                 ret = id->semaphore::signal();
 644              		.loc 1 110 44 is_stmt 0
 645              	#NO_APP
 646 0230 97000000 		call	_ZN9semaphore6signalEv@plt
 646      E7800000 
 647              	.LVL44:
 111:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 648              		.loc 1 111 17 is_stmt 1
 111:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 649              		.loc 1 111 57 is_stmt 0
 650              	#APP
 651              	# 111 "src/riscv.cpp" 1
 112:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 652              		mv t0, a0
 653              	# 0 "" 2
 654              		.loc 1 112 17 is_stmt 1
 112:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 655              		.loc 1 112 50 is_stmt 0
 656              	# 112 "src/riscv.cpp" 1
 113:src/riscv.cpp ****                 break;
 657              		sw t0, 80(x8)
 658              	# 0 "" 2
 659              		.loc 1 113 17 is_stmt 1
 660              	#NO_APP
 661 0240 6FF0DFED 		j	.L6
 662              	.LVL45:
 663              	.L10:
 115:src/riscv.cpp ****             case 0x26:
 664              		.loc 1 115 13
 116:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 665              		.loc 1 116 17
 116:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(id));
 666              		.loc 1 116 60 is_stmt 0
 667              	#APP
 668              	# 116 "src/riscv.cpp" 1
 669              		ld a0, 88(x8)
GAS LISTING /tmp/ccFY8Ffw.s 			page 22


 670              	# 0 "" 2
 671              	.LVL46:
 117:src/riscv.cpp ****                 ret = id->semaphore::trywait();
 672              		.loc 1 117 17 is_stmt 1
 117:src/riscv.cpp ****                 ret = id->semaphore::trywait();
 673              		.loc 1 117 45 is_stmt 0
 674              	#NO_APP
 675 0248 97000000 		call	_ZN9semaphore7trywaitEv@plt
 675      E7800000 
 676              	.LVL47:
 118:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 677              		.loc 1 118 17 is_stmt 1
 118:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 678              		.loc 1 118 57 is_stmt 0
 679              	#APP
 680              	# 118 "src/riscv.cpp" 1
 119:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 681              		mv t0, a0
 682              	# 0 "" 2
 683              		.loc 1 119 17 is_stmt 1
 119:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 684              		.loc 1 119 50 is_stmt 0
 685              	# 119 "src/riscv.cpp" 1
 120:src/riscv.cpp ****                 break;
 686              		sw t0, 80(x8)
 687              	# 0 "" 2
 688              		.loc 1 120 17 is_stmt 1
 689              	#NO_APP
 690 0258 6FF05FEC 		j	.L6
 691              	.LVL48:
 692              	.L9:
 121:src/riscv.cpp ****             case 0x41:
 693              		.loc 1 121 13
 122:src/riscv.cpp ****                 c = __getc();
 694              		.loc 1 122 17
 122:src/riscv.cpp ****                 c = __getc();
 695              		.loc 1 122 27 is_stmt 0
 696 025c 97000000 		call	__getc@plt
 696      E7800000 
 697              	.LVL49:
 123:src/riscv.cpp ****                 __asm__ volatile ("mv t0, %0" : : "r"(c));
 698              		.loc 1 123 17 is_stmt 1
 123:src/riscv.cpp ****                 __asm__ volatile ("mv t0, %0" : : "r"(c));
 699              		.loc 1 123 58 is_stmt 0
 700              	#APP
 701              	# 123 "src/riscv.cpp" 1
 124:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 702              		mv t0, a0
 703              	# 0 "" 2
 704              		.loc 1 124 17 is_stmt 1
 124:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 705              		.loc 1 124 51 is_stmt 0
 706              	# 124 "src/riscv.cpp" 1
 125:src/riscv.cpp ****                 break;
 707              		sw t0, 80(x8)
 708              	# 0 "" 2
 709              		.loc 1 125 17 is_stmt 1
GAS LISTING /tmp/ccFY8Ffw.s 			page 23


 710              	#NO_APP
 711 026c 6FF01FEB 		j	.L6
 712              	.LVL50:
 713              	.L7:
 126:src/riscv.cpp ****             case 0x42:
 714              		.loc 1 126 13
 127:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(c));
 715              		.loc 1 127 17
 127:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(c));
 716              		.loc 1 127 59 is_stmt 0
 717              	#APP
 718              	# 127 "src/riscv.cpp" 1
 719              		ld a0, 88(x8)
 720              	# 0 "" 2
 721              	.LVL51:
 128:src/riscv.cpp ****                 __putc(c);
 722              		.loc 1 128 17 is_stmt 1
 128:src/riscv.cpp ****                 __putc(c);
 723              		.loc 1 128 23 is_stmt 0
 724              	#NO_APP
 725 0274 1375F50F 		andi	a0,a0,0xff
 726 0278 97000000 		call	__putc@plt
 726      E7800000 
 727              	.LVL52:
 129:src/riscv.cpp ****                 break;
 728              		.loc 1 129 17 is_stmt 1
 729 0280 6FF0DFE9 		j	.L6
 730              	.LVL53:
 731              	.L32:
 732              	.LBE83:
 733              	.LBE84:
 734              	.LBB85:
 735              	.LBB58:
 140:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 736              		.loc 1 140 9
 737              	.LBB59:
 738              	.LBB60:
 151:src/../h/riscv.hpp **** }
 739              		.loc 2 151 5
 151:src/../h/riscv.hpp **** }
 740              		.loc 2 151 64 is_stmt 0
 741 0284 93072000 		li	a5,2
 742              	#APP
 743              	# 151 "src/../h/riscv.hpp" 1
 744              		csrc sip, a5
 745              	# 0 "" 2
 746              	.LVL54:
 747              	#NO_APP
 748              	.LBE60:
 749              	.LBE59:
 141:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 750              		.loc 1 141 9 is_stmt 1
 751              	.LBB61:
 752              	.LBB62:
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 753              		.loc 2 110 5
 111:src/../h/riscv.hpp ****     return sepc;
GAS LISTING /tmp/ccFY8Ffw.s 			page 24


 754              		.loc 2 111 5
 111:src/../h/riscv.hpp ****     return sepc;
 755              		.loc 2 111 64 is_stmt 0
 756              	#APP
 757              	# 111 "src/../h/riscv.hpp" 1
 758              		csrr a5, sepc
 759              	# 0 "" 2
 760              	#NO_APP
 761 0290 2334F4FC 		sd	a5,-56(s0)
 112:src/../h/riscv.hpp **** }
 762              		.loc 2 112 5 is_stmt 1
 112:src/../h/riscv.hpp **** }
 763              		.loc 2 112 12 is_stmt 0
 764 0294 833784FC 		ld	a5,-56(s0)
 765              	.LBE62:
 766              	.LBE61:
 141:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 767              		.loc 1 141 39
 768 0298 2330F4F8 		sd	a5,-128(s0)
 142:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 769              		.loc 1 142 9 is_stmt 1
 770              	.LBB63:
 771              	.LBB64:
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 772              		.loc 2 178 5
 179:src/../h/riscv.hpp ****     return sstatus;
 773              		.loc 2 179 5
 179:src/../h/riscv.hpp ****     return sstatus;
 774              		.loc 2 179 76 is_stmt 0
 775              	#APP
 776              	# 179 "src/../h/riscv.hpp" 1
 777              		csrr a5, sstatus
 778              	# 0 "" 2
 779              	#NO_APP
 780 02a0 2330F4FC 		sd	a5,-64(s0)
 180:src/../h/riscv.hpp **** }
 781              		.loc 2 180 5 is_stmt 1
 180:src/../h/riscv.hpp **** }
 782              		.loc 2 180 12 is_stmt 0
 783 02a4 833704FC 		ld	a5,-64(s0)
 784              	.LBE64:
 785              	.LBE63:
 142:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 786              		.loc 1 142 45
 787 02a8 2334F4F8 		sd	a5,-120(s0)
 144:src/riscv.cpp ****         TCB::timeSliceCounter++;
 788              		.loc 1 144 9 is_stmt 1
 144:src/riscv.cpp ****         TCB::timeSliceCounter++;
 789              		.loc 1 144 30 is_stmt 0
 790 02ac 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 790      03370700 
 791              	.LVL55:
 792 02b4 83370700 		ld	a5,0(a4)
 793 02b8 93871700 		addi	a5,a5,1
 794 02bc 2330F700 		sd	a5,0(a4)
 146:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 795              		.loc 1 146 9 is_stmt 1
GAS LISTING /tmp/ccFY8Ffw.s 			page 25


 146:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 796              		.loc 1 146 63 is_stmt 0
 797 02c0 17070000 		la	a4,_ZN3TCB7runningE
 797      03370700 
 798 02c8 03370700 		ld	a4,0(a4)
 799              	.LVL56:
 800              	.LBB65:
 801              	.LBB66:
 802              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 5/19/24.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJEKAT_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJEKAT_TCB_HPP
   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "riscv.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** class TCB {
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp ****     void *operator new(size_t n);
  14:src/../h/tcb.hpp **** 
  15:src/../h/tcb.hpp ****     void *operator new[](size_t n);
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept;
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void operator delete[](void *p) noexcept;
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp **** public:
  22:src/../h/tcb.hpp ****     ~TCB(){ delete stack;}
  23:src/../h/tcb.hpp ****     bool isFinished() const {return finished;}
  24:src/../h/tcb.hpp ****     void setFinished(bool f) { finished = f;}
  25:src/../h/tcb.hpp **** 
  26:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 803              		.loc 3 26 35 is_stmt 1
 804              		.loc 3 26 42 is_stmt 0
 805 02cc 03370703 		ld	a4,48(a4)
 806              	.LVL57:
 807              	.LBE66:
 808              	.LBE65:
 146:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 809              		.loc 1 146 9
 810 02d0 63FCE700 		bgeu	a5,a4,.L34
 811              	.LVL58:
 812              	.L25:
 151:src/riscv.cpp ****         w_sstatus(sstatus);
 813              		.loc 1 151 9 is_stmt 1
 151:src/riscv.cpp ****         w_sstatus(sstatus);
 814              		.loc 1 151 18 is_stmt 0
 815 02d4 833784F8 		ld	a5,-120(s0)
 816              	.LVL59:
 817              	.LBB67:
 818              	.LBB68:
 185:src/../h/riscv.hpp **** }
 819              		.loc 2 185 5 is_stmt 1
 185:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccFY8Ffw.s 			page 26


 820              		.loc 2 185 77 is_stmt 0
 821              	#APP
 822              	# 185 "src/../h/riscv.hpp" 1
 823              		csrw sstatus, a5
 824              	# 0 "" 2
 825              	.LVL60:
 826              	#NO_APP
 827              	.LBE68:
 828              	.LBE67:
 152:src/riscv.cpp ****         w_sepc(sepc);
 829              		.loc 1 152 9 is_stmt 1
 152:src/riscv.cpp ****         w_sepc(sepc);
 830              		.loc 1 152 15 is_stmt 0
 831 02dc 833704F8 		ld	a5,-128(s0)
 832              	.LVL61:
 833              	.LBB69:
 834              	.LBB70:
 117:src/../h/riscv.hpp **** }
 835              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 836              		.loc 2 117 65 is_stmt 0
 837              	#APP
 838              	# 117 "src/../h/riscv.hpp" 1
 118:src/../h/riscv.hpp **** 
 839              		csrw sepc, a5
 840              	# 0 "" 2
 841              		.loc 2 118 1
 842              	#NO_APP
 843 02e4 6FF09FE4 		j	.L4
 844              	.LVL62:
 845              	.L34:
 846              	.LBE70:
 847              	.LBE69:
 147:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 848              		.loc 1 147 13 is_stmt 1
 147:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 849              		.loc 1 147 34 is_stmt 0
 850 02e8 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 850      83B70700 
 851 02f0 23B00700 		sd	zero,0(a5)
 148:src/riscv.cpp ****             TCB::dispatch();
 852              		.loc 1 148 13 is_stmt 1
 148:src/riscv.cpp ****             TCB::dispatch();
 853              		.loc 1 148 26 is_stmt 0
 854 02f4 97000000 		call	_ZN3TCB8dispatchEv@plt
 854      E7800000 
 855              	.LVL63:
 856 02fc 6FF09FFD 		j	.L25
 857              	.LVL64:
 858              	.L33:
 859              	.LBE58:
 860              	.LBB71:
 861              	.LBB49:
 157:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 862              		.loc 1 157 9 is_stmt 1
 863              	.LBB50:
 864              	.LBB51:
GAS LISTING /tmp/ccFY8Ffw.s 			page 27


 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 865              		.loc 2 110 5
 111:src/../h/riscv.hpp ****     return sepc;
 866              		.loc 2 111 5
 111:src/../h/riscv.hpp ****     return sepc;
 867              		.loc 2 111 64 is_stmt 0
 868              	#APP
 869              	# 111 "src/../h/riscv.hpp" 1
 870              		csrr a5, sepc
 871              	# 0 "" 2
 872              	#NO_APP
 873 0304 233CF4FC 		sd	a5,-40(s0)
 112:src/../h/riscv.hpp **** }
 874              		.loc 2 112 5 is_stmt 1
 112:src/../h/riscv.hpp **** }
 875              		.loc 2 112 12 is_stmt 0
 876 0308 833784FD 		ld	a5,-40(s0)
 877              	.LBE51:
 878              	.LBE50:
 157:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 879              		.loc 1 157 39
 880 030c 2338F4F8 		sd	a5,-112(s0)
 158:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 881              		.loc 1 158 9 is_stmt 1
 882              	.LBB52:
 883              	.LBB53:
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 884              		.loc 2 178 5
 179:src/../h/riscv.hpp ****     return sstatus;
 885              		.loc 2 179 5
 179:src/../h/riscv.hpp ****     return sstatus;
 886              		.loc 2 179 76 is_stmt 0
 887              	#APP
 888              	# 179 "src/../h/riscv.hpp" 1
 889              		csrr a5, sstatus
 890              	# 0 "" 2
 891              	#NO_APP
 892 0314 2338F4FC 		sd	a5,-48(s0)
 180:src/../h/riscv.hpp **** }
 893              		.loc 2 180 5 is_stmt 1
 180:src/../h/riscv.hpp **** }
 894              		.loc 2 180 12 is_stmt 0
 895 0318 833704FD 		ld	a5,-48(s0)
 896              	.LBE53:
 897              	.LBE52:
 158:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 898              		.loc 1 158 45
 899 031c 233CF4F8 		sd	a5,-104(s0)
 160:src/riscv.cpp ****         console_handler();
 900              		.loc 1 160 9 is_stmt 1
 160:src/riscv.cpp ****         console_handler();
 901              		.loc 1 160 24 is_stmt 0
 902 0320 97000000 		call	console_handler@plt
 902      E7800000 
 903              	.LVL65:
 162:src/riscv.cpp ****         w_sstatus(sstatus);
 904              		.loc 1 162 9 is_stmt 1
GAS LISTING /tmp/ccFY8Ffw.s 			page 28


 162:src/riscv.cpp ****         w_sstatus(sstatus);
 905              		.loc 1 162 18 is_stmt 0
 906 0328 833784F9 		ld	a5,-104(s0)
 907              	.LVL66:
 908              	.LBB54:
 909              	.LBB55:
 185:src/../h/riscv.hpp **** }
 910              		.loc 2 185 5 is_stmt 1
 185:src/../h/riscv.hpp **** }
 911              		.loc 2 185 77 is_stmt 0
 912              	#APP
 913              	# 185 "src/../h/riscv.hpp" 1
 914              		csrw sstatus, a5
 915              	# 0 "" 2
 916              	.LVL67:
 917              	#NO_APP
 918              	.LBE55:
 919              	.LBE54:
 163:src/riscv.cpp ****         w_sepc(sepc);
 920              		.loc 1 163 9 is_stmt 1
 163:src/riscv.cpp ****         w_sepc(sepc);
 921              		.loc 1 163 15 is_stmt 0
 922 0330 833704F9 		ld	a5,-112(s0)
 923              	.LVL68:
 924              	.LBB56:
 925              	.LBB57:
 117:src/../h/riscv.hpp **** }
 926              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 927              		.loc 2 117 65 is_stmt 0
 928              	#APP
 929              	# 117 "src/../h/riscv.hpp" 1
 118:src/../h/riscv.hpp **** 
 930              		csrw sepc, a5
 931              	# 0 "" 2
 932              		.loc 2 118 1
 933              	#NO_APP
 934 0338 6FF05FDF 		j	.L4
 935              	.LBE57:
 936              	.LBE56:
 937              	.LBE49:
 938              	.LBE71:
 939              	.LBE85:
 940              	.LBE89:
 941              		.cfi_endproc
 942              	.LFE42:
 944              	.Letext0:
 945              		.file 4 "src/../h/../lib/hw.h"
 946              		.file 5 "src/../h/syscall_c.hpp"
 947              		.file 6 "src/../h/MemoryAllocator.hpp"
 948              		.file 7 "src/../h/list.hpp"
 949              		.file 8 "src/../h/semaphore.hpp"
 950              		.file 9 "src/../h/../lib/console.h"
 951              		.file 10 "src/../h/print.hpp"
GAS LISTING /tmp/ccFY8Ffw.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccFY8Ffw.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccFY8Ffw.s:13     .text:0000000000000000 .L0 
     /tmp/ccFY8Ffw.s:14     .text:0000000000000000 .L0 
     /tmp/ccFY8Ffw.s:15     .text:0000000000000004 .L0 
     /tmp/ccFY8Ffw.s:17     .text:0000000000000008 .L0 
     /tmp/ccFY8Ffw.s:19     .text:000000000000000c .L0 
     /tmp/ccFY8Ffw.s:21     .text:000000000000000c .L0 
     /tmp/ccFY8Ffw.s:22     .text:000000000000000c .L0 
     /tmp/ccFY8Ffw.s:26     .text:000000000000001c .L0 
     /tmp/ccFY8Ffw.s:28     .text:0000000000000020 .L0 
     /tmp/ccFY8Ffw.s:29     .text:0000000000000020 .L0 
     /tmp/ccFY8Ffw.s:37     .text:0000000000000028 .L0 
       src/riscv.cpp:16     .text:0000000000000028 .L0 
     /tmp/ccFY8Ffw.s:43     .text:000000000000002c .L0 
       src/riscv.cpp:17     .text:000000000000002c .L0 
     /tmp/ccFY8Ffw.s:49     .text:0000000000000030 .L0 
     /tmp/ccFY8Ffw.s:50     .text:0000000000000034 .L0 
     /tmp/ccFY8Ffw.s:51     .text:0000000000000034 .L0 
     /tmp/ccFY8Ffw.s:53     .text:0000000000000038 .L0 
     /tmp/ccFY8Ffw.s:55     .text:000000000000003c .L0 
     /tmp/ccFY8Ffw.s:66     .text:000000000000003c _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccFY8Ffw.s:69     .text:000000000000003c .L0 
     /tmp/ccFY8Ffw.s:70     .text:000000000000003c .L0 
     /tmp/ccFY8Ffw.s:71     .text:0000000000000040 .L0 
     /tmp/ccFY8Ffw.s:75     .text:000000000000004c .L0 
     /tmp/ccFY8Ffw.s:76     .text:000000000000004c .L0 
     /tmp/ccFY8Ffw.s:77     .text:000000000000004c .L0 
     /tmp/ccFY8Ffw.s:79     .text:0000000000000050 .L0 
     /tmp/ccFY8Ffw.s:84     .text:0000000000000050 .L0 
     /tmp/ccFY8Ffw.s:85     .text:0000000000000050 .L0 
     /tmp/ccFY8Ffw.s:86     .text:0000000000000050 .L0 
  src/../h/riscv.hpp:192    .text:0000000000000050 .L0 
     /tmp/ccFY8Ffw.s:94     .text:0000000000000058 .L0 
     /tmp/ccFY8Ffw.s:95     .text:0000000000000058 .L0 
     /tmp/ccFY8Ffw.s:102    .text:000000000000005c .L0 
     /tmp/ccFY8Ffw.s:103    .text:000000000000005c .L0 
     /tmp/ccFY8Ffw.s:104    .text:000000000000005c .L0 
  src/../h/riscv.hpp:99     .text:000000000000005c .L0 
     /tmp/ccFY8Ffw.s:112    .text:0000000000000064 .L0 
     /tmp/ccFY8Ffw.s:113    .text:0000000000000064 .L0 
     /tmp/ccFY8Ffw.s:119    .text:0000000000000068 .L0 
     /tmp/ccFY8Ffw.s:120    .text:0000000000000068 .L0 
     /tmp/ccFY8Ffw.s:122    .text:000000000000006c .L0 
     /tmp/ccFY8Ffw.s:128    .text:0000000000000074 .L0 
     /tmp/ccFY8Ffw.s:139    .text:0000000000000084 .L0 
     /tmp/ccFY8Ffw.s:144    .text:0000000000000094 .L0 
     /tmp/ccFY8Ffw.s:147    .text:000000000000009c .L0 
     /tmp/ccFY8Ffw.s:148    .text:000000000000009c .L0 
     /tmp/ccFY8Ffw.s:152    .text:00000000000000ac .L0 
       src/riscv.cpp:172    .text:00000000000000ac .L0 
     /tmp/ccFY8Ffw.s:158    .text:00000000000000b4 .L0 
       src/riscv.cpp:173    .text:00000000000000b4 .L0 
     /tmp/ccFY8Ffw.s:163    .text:00000000000000b8 .L0 
       src/riscv.cpp:174    .text:00000000000000b8 .L0 
     /tmp/ccFY8Ffw.s:172    .text:00000000000000bc .L0 
GAS LISTING /tmp/ccFY8Ffw.s 			page 30


     /tmp/ccFY8Ffw.s:180    .text:00000000000000c0 .L0 
     /tmp/ccFY8Ffw.s:181    .text:00000000000000c0 .L0 
     /tmp/ccFY8Ffw.s:182    .text:00000000000000c0 .L0 
  src/../h/riscv.hpp:111    .text:00000000000000c0 .L0 
     /tmp/ccFY8Ffw.s:191    .text:00000000000000c8 .L0 
     /tmp/ccFY8Ffw.s:192    .text:00000000000000c8 .L0 
     /tmp/ccFY8Ffw.s:196    .text:00000000000000cc .L0 
     /tmp/ccFY8Ffw.s:198    .text:00000000000000d0 .L0 
     /tmp/ccFY8Ffw.s:202    .text:00000000000000d4 .L0 
     /tmp/ccFY8Ffw.s:203    .text:00000000000000d4 .L0 
     /tmp/ccFY8Ffw.s:204    .text:00000000000000d4 .L0 
  src/../h/riscv.hpp:179    .text:00000000000000d4 .L0 
     /tmp/ccFY8Ffw.s:212    .text:00000000000000dc .L0 
     /tmp/ccFY8Ffw.s:213    .text:00000000000000dc .L0 
     /tmp/ccFY8Ffw.s:217    .text:00000000000000e0 .L0 
     /tmp/ccFY8Ffw.s:219    .text:00000000000000e4 .L0 
     /tmp/ccFY8Ffw.s:220    .text:00000000000000e4 .L0 
     /tmp/ccFY8Ffw.s:221    .text:00000000000000e4 .L0 
     /tmp/ccFY8Ffw.s:222    .text:00000000000000e4 .L0 
     /tmp/ccFY8Ffw.s:223    .text:00000000000000e4 .L0 
     /tmp/ccFY8Ffw.s:307    .text:0000000000000108 .L0 
     /tmp/ccFY8Ffw.s:308    .text:0000000000000108 .L0 
     /tmp/ccFY8Ffw.s:309    .text:0000000000000108 .L0 
     /tmp/ccFY8Ffw.s:310    .text:0000000000000108 .L0 
       src/riscv.cpp:38     .text:0000000000000108 .L0 
     /tmp/ccFY8Ffw.s:317    .text:000000000000010c .L0 
     /tmp/ccFY8Ffw.s:319    .text:000000000000010c .L0 
     /tmp/ccFY8Ffw.s:322    .text:0000000000000114 .L0 
       src/riscv.cpp:40     .text:0000000000000114 .L0 
     /tmp/ccFY8Ffw.s:328    .text:0000000000000118 .L0 
       src/riscv.cpp:41     .text:0000000000000118 .L0 
     /tmp/ccFY8Ffw.s:337    .text:000000000000011c .L0 
     /tmp/ccFY8Ffw.s:338    .text:000000000000011c .L0 
     /tmp/ccFY8Ffw.s:339    .text:000000000000011c .L0 
     /tmp/ccFY8Ffw.s:344    .text:0000000000000120 .L0 
  src/../h/riscv.hpp:185    .text:0000000000000120 .L0 
     /tmp/ccFY8Ffw.s:354    .text:0000000000000124 .L0 
     /tmp/ccFY8Ffw.s:355    .text:0000000000000124 .L0 
     /tmp/ccFY8Ffw.s:360    .text:0000000000000128 .L0 
  src/../h/riscv.hpp:117    .text:0000000000000128 .L0 
     /tmp/ccFY8Ffw.s:373    .text:000000000000012c .L0 
     /tmp/ccFY8Ffw.s:374    .text:0000000000000130 .L0 
     /tmp/ccFY8Ffw.s:375    .text:0000000000000130 .L0 
     /tmp/ccFY8Ffw.s:377    .text:0000000000000134 .L0 
     /tmp/ccFY8Ffw.s:378    .text:0000000000000134 .L0 
     /tmp/ccFY8Ffw.s:380    .text:0000000000000138 .L0 
     /tmp/ccFY8Ffw.s:382    .text:000000000000013c .L0 
     /tmp/ccFY8Ffw.s:386    .text:0000000000000140 .L0 
     /tmp/ccFY8Ffw.s:391    .text:0000000000000140 .L0 
     /tmp/ccFY8Ffw.s:392    .text:0000000000000140 .L0 
     /tmp/ccFY8Ffw.s:393    .text:0000000000000140 .L0 
     /tmp/ccFY8Ffw.s:394    .text:0000000000000140 .L0 
       src/riscv.cpp:47     .text:0000000000000140 .L0 
     /tmp/ccFY8Ffw.s:401    .text:0000000000000144 .L0 
     /tmp/ccFY8Ffw.s:403    .text:0000000000000144 .L0 
     /tmp/ccFY8Ffw.s:406    .text:000000000000014c .L0 
       src/riscv.cpp:49     .text:000000000000014c .L0 
GAS LISTING /tmp/ccFY8Ffw.s 			page 31


     /tmp/ccFY8Ffw.s:412    .text:0000000000000150 .L0 
       src/riscv.cpp:50     .text:0000000000000150 .L0 
     /tmp/ccFY8Ffw.s:418    .text:0000000000000154 .L0 
     /tmp/ccFY8Ffw.s:422    .text:0000000000000158 .L0 
     /tmp/ccFY8Ffw.s:423    .text:0000000000000158 .L0 
     /tmp/ccFY8Ffw.s:424    .text:0000000000000158 .L0 
     /tmp/ccFY8Ffw.s:425    .text:0000000000000158 .L0 
     /tmp/ccFY8Ffw.s:426    .text:0000000000000158 .L0 
     /tmp/ccFY8Ffw.s:427    .text:0000000000000158 .L0 
       src/riscv.cpp:58     .text:0000000000000158 .L0 
     /tmp/ccFY8Ffw.s:434    .text:000000000000015c .L0 
       src/riscv.cpp:59     .text:000000000000015c .L0 
     /tmp/ccFY8Ffw.s:440    .text:0000000000000160 .L0 
       src/riscv.cpp:60     .text:0000000000000160 .L0 
     /tmp/ccFY8Ffw.s:446    .text:0000000000000164 .L0 
       src/riscv.cpp:61     .text:0000000000000164 .L0 
     /tmp/ccFY8Ffw.s:452    .text:0000000000000168 .L0 
     /tmp/ccFY8Ffw.s:454    .text:0000000000000168 .L0 
     /tmp/ccFY8Ffw.s:457    .text:0000000000000170 .L0 
     /tmp/ccFY8Ffw.s:459    .text:0000000000000174 .L0 
     /tmp/ccFY8Ffw.s:461    .text:0000000000000178 .L0 
     /tmp/ccFY8Ffw.s:465    .text:000000000000017c .L0 
       src/riscv.cpp:66     .text:000000000000017c .L0 
     /tmp/ccFY8Ffw.s:471    .text:0000000000000180 .L0 
       src/riscv.cpp:67     .text:0000000000000180 .L0 
     /tmp/ccFY8Ffw.s:477    .text:0000000000000184 .L0 
     /tmp/ccFY8Ffw.s:481    .text:0000000000000188 .L0 
     /tmp/ccFY8Ffw.s:486    .text:0000000000000190 .L0 
     /tmp/ccFY8Ffw.s:487    .text:0000000000000190 .L0 
     /tmp/ccFY8Ffw.s:488    .text:0000000000000190 .L0 
     /tmp/ccFY8Ffw.s:491    .text:0000000000000198 .L0 
       src/riscv.cpp:72     .text:0000000000000198 .L0 
     /tmp/ccFY8Ffw.s:497    .text:000000000000019c .L0 
       src/riscv.cpp:73     .text:000000000000019c .L0 
     /tmp/ccFY8Ffw.s:503    .text:00000000000001a0 .L0 
     /tmp/ccFY8Ffw.s:507    .text:00000000000001a4 .L0 
     /tmp/ccFY8Ffw.s:508    .text:00000000000001a4 .L0 
     /tmp/ccFY8Ffw.s:509    .text:00000000000001a4 .L0 
     /tmp/ccFY8Ffw.s:512    .text:00000000000001b0 .L0 
     /tmp/ccFY8Ffw.s:513    .text:00000000000001b0 .L0 
     /tmp/ccFY8Ffw.s:516    .text:00000000000001b8 .L0 
     /tmp/ccFY8Ffw.s:520    .text:00000000000001bc .L0 
     /tmp/ccFY8Ffw.s:521    .text:00000000000001bc .L0 
     /tmp/ccFY8Ffw.s:522    .text:00000000000001bc .L0 
       src/riscv.cpp:83     .text:00000000000001bc .L0 
     /tmp/ccFY8Ffw.s:529    .text:00000000000001c0 .L0 
       src/riscv.cpp:84     .text:00000000000001c0 .L0 
     /tmp/ccFY8Ffw.s:535    .text:00000000000001c4 .L0 
     /tmp/ccFY8Ffw.s:537    .text:00000000000001c4 .L0 
     /tmp/ccFY8Ffw.s:541    .text:00000000000001d0 .L0 
     /tmp/ccFY8Ffw.s:543    .text:00000000000001d4 .L0 
     /tmp/ccFY8Ffw.s:545    .text:00000000000001d8 .L0 
     /tmp/ccFY8Ffw.s:549    .text:00000000000001dc .L0 
       src/riscv.cpp:88     .text:00000000000001dc .L0 
     /tmp/ccFY8Ffw.s:555    .text:00000000000001e0 .L0 
       src/riscv.cpp:89     .text:00000000000001e0 .L0 
     /tmp/ccFY8Ffw.s:561    .text:00000000000001e4 .L0 
GAS LISTING /tmp/ccFY8Ffw.s 			page 32


     /tmp/ccFY8Ffw.s:565    .text:00000000000001e8 .L0 
     /tmp/ccFY8Ffw.s:570    .text:00000000000001f0 .L0 
     /tmp/ccFY8Ffw.s:571    .text:00000000000001f0 .L0 
       src/riscv.cpp:93     .text:00000000000001f0 .L0 
     /tmp/ccFY8Ffw.s:578    .text:00000000000001f4 .L0 
     /tmp/ccFY8Ffw.s:580    .text:00000000000001f4 .L0 
     /tmp/ccFY8Ffw.s:583    .text:00000000000001fc .L0 
       src/riscv.cpp:96     .text:00000000000001fc .L0 
     /tmp/ccFY8Ffw.s:589    .text:0000000000000200 .L0 
       src/riscv.cpp:97     .text:0000000000000200 .L0 
     /tmp/ccFY8Ffw.s:595    .text:0000000000000204 .L0 
     /tmp/ccFY8Ffw.s:599    .text:0000000000000208 .L0 
     /tmp/ccFY8Ffw.s:600    .text:0000000000000208 .L0 
       src/riscv.cpp:101    .text:0000000000000208 .L0 
     /tmp/ccFY8Ffw.s:608    .text:000000000000020c .L0 
     /tmp/ccFY8Ffw.s:610    .text:0000000000000210 .L0 
     /tmp/ccFY8Ffw.s:611    .text:0000000000000210 .L0 
     /tmp/ccFY8Ffw.s:615    .text:0000000000000218 .L0 
       src/riscv.cpp:104    .text:0000000000000218 .L0 
     /tmp/ccFY8Ffw.s:621    .text:000000000000021c .L0 
       src/riscv.cpp:105    .text:000000000000021c .L0 
     /tmp/ccFY8Ffw.s:627    .text:0000000000000220 .L0 
     /tmp/ccFY8Ffw.s:631    .text:0000000000000224 .L0 
     /tmp/ccFY8Ffw.s:636    .text:000000000000022c .L0 
     /tmp/ccFY8Ffw.s:637    .text:000000000000022c .L0 
       src/riscv.cpp:109    .text:000000000000022c .L0 
     /tmp/ccFY8Ffw.s:644    .text:0000000000000230 .L0 
     /tmp/ccFY8Ffw.s:646    .text:0000000000000230 .L0 
     /tmp/ccFY8Ffw.s:649    .text:0000000000000238 .L0 
       src/riscv.cpp:111    .text:0000000000000238 .L0 
     /tmp/ccFY8Ffw.s:655    .text:000000000000023c .L0 
       src/riscv.cpp:112    .text:000000000000023c .L0 
     /tmp/ccFY8Ffw.s:661    .text:0000000000000240 .L0 
     /tmp/ccFY8Ffw.s:665    .text:0000000000000244 .L0 
     /tmp/ccFY8Ffw.s:666    .text:0000000000000244 .L0 
       src/riscv.cpp:116    .text:0000000000000244 .L0 
     /tmp/ccFY8Ffw.s:673    .text:0000000000000248 .L0 
     /tmp/ccFY8Ffw.s:675    .text:0000000000000248 .L0 
     /tmp/ccFY8Ffw.s:678    .text:0000000000000250 .L0 
       src/riscv.cpp:118    .text:0000000000000250 .L0 
     /tmp/ccFY8Ffw.s:684    .text:0000000000000254 .L0 
       src/riscv.cpp:119    .text:0000000000000254 .L0 
     /tmp/ccFY8Ffw.s:690    .text:0000000000000258 .L0 
     /tmp/ccFY8Ffw.s:694    .text:000000000000025c .L0 
     /tmp/ccFY8Ffw.s:695    .text:000000000000025c .L0 
     /tmp/ccFY8Ffw.s:696    .text:000000000000025c .L0 
     /tmp/ccFY8Ffw.s:699    .text:0000000000000264 .L0 
       src/riscv.cpp:123    .text:0000000000000264 .L0 
     /tmp/ccFY8Ffw.s:705    .text:0000000000000268 .L0 
       src/riscv.cpp:124    .text:0000000000000268 .L0 
     /tmp/ccFY8Ffw.s:711    .text:000000000000026c .L0 
     /tmp/ccFY8Ffw.s:715    .text:0000000000000270 .L0 
     /tmp/ccFY8Ffw.s:716    .text:0000000000000270 .L0 
       src/riscv.cpp:127    .text:0000000000000270 .L0 
     /tmp/ccFY8Ffw.s:723    .text:0000000000000274 .L0 
     /tmp/ccFY8Ffw.s:725    .text:0000000000000274 .L0 
     /tmp/ccFY8Ffw.s:729    .text:0000000000000280 .L0 
GAS LISTING /tmp/ccFY8Ffw.s 			page 33


     /tmp/ccFY8Ffw.s:739    .text:0000000000000284 .L0 
     /tmp/ccFY8Ffw.s:740    .text:0000000000000284 .L0 
     /tmp/ccFY8Ffw.s:741    .text:0000000000000284 .L0 
     /tmp/ccFY8Ffw.s:753    .text:000000000000028c .L0 
     /tmp/ccFY8Ffw.s:754    .text:000000000000028c .L0 
     /tmp/ccFY8Ffw.s:755    .text:000000000000028c .L0 
  src/../h/riscv.hpp:111    .text:000000000000028c .L0 
     /tmp/ccFY8Ffw.s:763    .text:0000000000000294 .L0 
     /tmp/ccFY8Ffw.s:764    .text:0000000000000294 .L0 
     /tmp/ccFY8Ffw.s:768    .text:0000000000000298 .L0 
     /tmp/ccFY8Ffw.s:772    .text:000000000000029c .L0 
     /tmp/ccFY8Ffw.s:773    .text:000000000000029c .L0 
     /tmp/ccFY8Ffw.s:774    .text:000000000000029c .L0 
  src/../h/riscv.hpp:179    .text:000000000000029c .L0 
     /tmp/ccFY8Ffw.s:782    .text:00000000000002a4 .L0 
     /tmp/ccFY8Ffw.s:783    .text:00000000000002a4 .L0 
     /tmp/ccFY8Ffw.s:787    .text:00000000000002a8 .L0 
     /tmp/ccFY8Ffw.s:789    .text:00000000000002ac .L0 
     /tmp/ccFY8Ffw.s:790    .text:00000000000002ac .L0 
     /tmp/ccFY8Ffw.s:796    .text:00000000000002c0 .L0 
     /tmp/ccFY8Ffw.s:797    .text:00000000000002c0 .L0 
     /tmp/ccFY8Ffw.s:804    .text:00000000000002cc .L0 
     /tmp/ccFY8Ffw.s:805    .text:00000000000002cc .L0 
     /tmp/ccFY8Ffw.s:810    .text:00000000000002d0 .L0 
     /tmp/ccFY8Ffw.s:814    .text:00000000000002d4 .L0 
     /tmp/ccFY8Ffw.s:815    .text:00000000000002d4 .L0 
     /tmp/ccFY8Ffw.s:820    .text:00000000000002d8 .L0 
  src/../h/riscv.hpp:185    .text:00000000000002d8 .L0 
     /tmp/ccFY8Ffw.s:830    .text:00000000000002dc .L0 
     /tmp/ccFY8Ffw.s:831    .text:00000000000002dc .L0 
     /tmp/ccFY8Ffw.s:836    .text:00000000000002e0 .L0 
  src/../h/riscv.hpp:117    .text:00000000000002e0 .L0 
     /tmp/ccFY8Ffw.s:843    .text:00000000000002e4 .L0 
     /tmp/ccFY8Ffw.s:849    .text:00000000000002e8 .L0 
     /tmp/ccFY8Ffw.s:850    .text:00000000000002e8 .L0 
     /tmp/ccFY8Ffw.s:853    .text:00000000000002f4 .L0 
     /tmp/ccFY8Ffw.s:854    .text:00000000000002f4 .L0 
     /tmp/ccFY8Ffw.s:865    .text:0000000000000300 .L0 
     /tmp/ccFY8Ffw.s:866    .text:0000000000000300 .L0 
     /tmp/ccFY8Ffw.s:867    .text:0000000000000300 .L0 
  src/../h/riscv.hpp:111    .text:0000000000000300 .L0 
     /tmp/ccFY8Ffw.s:875    .text:0000000000000308 .L0 
     /tmp/ccFY8Ffw.s:876    .text:0000000000000308 .L0 
     /tmp/ccFY8Ffw.s:880    .text:000000000000030c .L0 
     /tmp/ccFY8Ffw.s:884    .text:0000000000000310 .L0 
     /tmp/ccFY8Ffw.s:885    .text:0000000000000310 .L0 
     /tmp/ccFY8Ffw.s:886    .text:0000000000000310 .L0 
  src/../h/riscv.hpp:179    .text:0000000000000310 .L0 
     /tmp/ccFY8Ffw.s:894    .text:0000000000000318 .L0 
     /tmp/ccFY8Ffw.s:895    .text:0000000000000318 .L0 
     /tmp/ccFY8Ffw.s:899    .text:000000000000031c .L0 
     /tmp/ccFY8Ffw.s:901    .text:0000000000000320 .L0 
     /tmp/ccFY8Ffw.s:902    .text:0000000000000320 .L0 
     /tmp/ccFY8Ffw.s:905    .text:0000000000000328 .L0 
     /tmp/ccFY8Ffw.s:906    .text:0000000000000328 .L0 
     /tmp/ccFY8Ffw.s:911    .text:000000000000032c .L0 
  src/../h/riscv.hpp:185    .text:000000000000032c .L0 
GAS LISTING /tmp/ccFY8Ffw.s 			page 34


     /tmp/ccFY8Ffw.s:921    .text:0000000000000330 .L0 
     /tmp/ccFY8Ffw.s:922    .text:0000000000000330 .L0 
     /tmp/ccFY8Ffw.s:927    .text:0000000000000334 .L0 
  src/../h/riscv.hpp:117    .text:0000000000000334 .L0 
     /tmp/ccFY8Ffw.s:934    .text:0000000000000338 .L0 
     /tmp/ccFY8Ffw.s:941    .text:000000000000033c .L0 
     /tmp/ccFY8Ffw.s:952    .text:000000000000033c .L0 
     /tmp/ccFY8Ffw.s:22     .text:000000000000000c .L0 
     /tmp/ccFY8Ffw.s:60     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccFY8Ffw.s:148    .text:000000000000009c .L0 
     /tmp/ccFY8Ffw.s:235    .rodata:0000000000000000 .L8
     /tmp/ccFY8Ffw.s:227    .text:00000000000000f0 .L0 
     /tmp/ccFY8Ffw.s:509    .text:00000000000001a4 .L0 
     /tmp/ccFY8Ffw.s:790    .text:00000000000002ac .L0 
     /tmp/ccFY8Ffw.s:797    .text:00000000000002c0 .L0 
     /tmp/ccFY8Ffw.s:850    .text:00000000000002e8 .L0 
     /tmp/ccFY8Ffw.s:35     .text:0000000000000028 .L2
     /tmp/ccFY8Ffw.s:174    .text:00000000000000c0 .L31
     /tmp/ccFY8Ffw.s:731    .text:0000000000000284 .L32
     /tmp/ccFY8Ffw.s:858    .text:0000000000000300 .L33
     /tmp/ccFY8Ffw.s:367    .text:000000000000012c .L4
     /tmp/ccFY8Ffw.s:335    .text:000000000000011c .L6
     /tmp/ccFY8Ffw.s:479    .text:0000000000000188 .L27
     /tmp/ccFY8Ffw.s:462    .text:000000000000017c .L20
     /tmp/ccFY8Ffw.s:563    .text:00000000000001e8 .L28
     /tmp/ccFY8Ffw.s:546    .text:00000000000001dc .L21
     /tmp/ccFY8Ffw.s:629    .text:0000000000000224 .L29
     /tmp/ccFY8Ffw.s:613    .text:0000000000000218 .L22
     /tmp/ccFY8Ffw.s:845    .text:00000000000002e8 .L34
     /tmp/ccFY8Ffw.s:812    .text:00000000000002d4 .L25
     /tmp/ccFY8Ffw.s:304    .text:0000000000000108 .L19
     /tmp/ccFY8Ffw.s:385    .text:0000000000000140 .L18
     /tmp/ccFY8Ffw.s:420    .text:0000000000000158 .L17
     /tmp/ccFY8Ffw.s:484    .text:0000000000000190 .L16
     /tmp/ccFY8Ffw.s:505    .text:00000000000001a4 .L15
     /tmp/ccFY8Ffw.s:518    .text:00000000000001bc .L14
     /tmp/ccFY8Ffw.s:568    .text:00000000000001f0 .L13
     /tmp/ccFY8Ffw.s:597    .text:0000000000000208 .L12
     /tmp/ccFY8Ffw.s:634    .text:000000000000022c .L11
     /tmp/ccFY8Ffw.s:663    .text:0000000000000244 .L10
     /tmp/ccFY8Ffw.s:692    .text:000000000000025c .L9
     /tmp/ccFY8Ffw.s:713    .text:0000000000000270 .L7
     /tmp/ccFY8Ffw.s:2745   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccFY8Ffw.s:4449   .debug_str:00000000000008d5 .LASF191
     /tmp/ccFY8Ffw.s:4537   .debug_str:0000000000000bb1 .LASF192
     /tmp/ccFY8Ffw.s:4547   .debug_str:0000000000000c09 .LASF193
     /tmp/ccFY8Ffw.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccFY8Ffw.s:944    .text:000000000000033c .Letext0
     /tmp/ccFY8Ffw.s:4153   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccFY8Ffw.s:4289   .debug_str:000000000000041c .LASF0
     /tmp/ccFY8Ffw.s:4319   .debug_str:000000000000051b .LASF1
     /tmp/ccFY8Ffw.s:4417   .debug_str:00000000000007db .LASF2
     /tmp/ccFY8Ffw.s:4247   .debug_str:00000000000002e5 .LASF3
     /tmp/ccFY8Ffw.s:4425   .debug_str:0000000000000818 .LASF4
     /tmp/ccFY8Ffw.s:4297   .debug_str:0000000000000450 .LASF5
     /tmp/ccFY8Ffw.s:4167   .debug_str:000000000000006b .LASF6
     /tmp/ccFY8Ffw.s:4377   .debug_str:0000000000000691 .LASF7
GAS LISTING /tmp/ccFY8Ffw.s 			page 35


     /tmp/ccFY8Ffw.s:4307   .debug_str:00000000000004c2 .LASF8
     /tmp/ccFY8Ffw.s:4261   .debug_str:0000000000000332 .LASF9
     /tmp/ccFY8Ffw.s:4271   .debug_str:000000000000039a .LASF10
     /tmp/ccFY8Ffw.s:4197   .debug_str:000000000000013d .LASF11
     /tmp/ccFY8Ffw.s:4255   .debug_str:0000000000000312 .LASF12
     /tmp/ccFY8Ffw.s:4207   .debug_str:0000000000000194 .LASF13
     /tmp/ccFY8Ffw.s:4195   .debug_str:000000000000012d .LASF14
     /tmp/ccFY8Ffw.s:4459   .debug_str:00000000000009cb .LASF15
     /tmp/ccFY8Ffw.s:4241   .debug_str:0000000000000298 .LASF16
     /tmp/ccFY8Ffw.s:4443   .debug_str:0000000000000893 .LASF17
     /tmp/ccFY8Ffw.s:4523   .debug_str:0000000000000b6d .LASF71
     /tmp/ccFY8Ffw.s:4397   .debug_str:000000000000073a .LASF21
     /tmp/ccFY8Ffw.s:4325   .debug_str:0000000000000542 .LASF18
     /tmp/ccFY8Ffw.s:4173   .debug_str:000000000000009e .LASF19
     /tmp/ccFY8Ffw.s:4539   .debug_str:0000000000000bbf .LASF20
     /tmp/ccFY8Ffw.s:4511   .debug_str:0000000000000b1c .LASF22
     /tmp/ccFY8Ffw.s:4249   .debug_str:00000000000002eb .LASF23
     /tmp/ccFY8Ffw.s:4481   .debug_str:0000000000000a32 .LASF24
     /tmp/ccFY8Ffw.s:4221   .debug_str:0000000000000202 .LASF25
     /tmp/ccFY8Ffw.s:4275   .debug_str:00000000000003cb .LASF26
     /tmp/ccFY8Ffw.s:4285   .debug_str:00000000000003fe .LASF28
     /tmp/ccFY8Ffw.s:4433   .debug_str:000000000000083e .LASF27
     /tmp/ccFY8Ffw.s:4245   .debug_str:00000000000002ca .LASF29
     /tmp/ccFY8Ffw.s:4291   .debug_str:0000000000000429 .LASF30
     /tmp/ccFY8Ffw.s:4533   .debug_str:0000000000000b8f .LASF31
     /tmp/ccFY8Ffw.s:4503   .debug_str:0000000000000ace .LASF32
     /tmp/ccFY8Ffw.s:4495   .debug_str:0000000000000a80 .LASF34
     /tmp/ccFY8Ffw.s:4413   .debug_str:00000000000007c7 .LASF36
     /tmp/ccFY8Ffw.s:4367   .debug_str:000000000000064a .LASF38
     /tmp/ccFY8Ffw.s:4391   .debug_str:000000000000070c .LASF33
     /tmp/ccFY8Ffw.s:4393   .debug_str:0000000000000713 .LASF35
     /tmp/ccFY8Ffw.s:4363   .debug_str:000000000000062f .LASF37
     /tmp/ccFY8Ffw.s:4309   .debug_str:00000000000004d5 .LASF39
     /tmp/ccFY8Ffw.s:4535   .debug_str:0000000000000ba9 .LASF40
     /tmp/ccFY8Ffw.s:4489   .debug_str:0000000000000a5a .LASF41
     /tmp/ccFY8Ffw.s:4357   .debug_str:000000000000060e .LASF42
     /tmp/ccFY8Ffw.s:4365   .debug_str:0000000000000636 .LASF43
     /tmp/ccFY8Ffw.s:4333   .debug_str:0000000000000578 .LASF44
     /tmp/ccFY8Ffw.s:4395   .debug_str:0000000000000726 .LASF45
     /tmp/ccFY8Ffw.s:4557   .debug_str:0000000000000c5d .LASF46
     /tmp/ccFY8Ffw.s:4295   .debug_str:000000000000043c .LASF47
     /tmp/ccFY8Ffw.s:4453   .debug_str:00000000000009ab .LASF48
     /tmp/ccFY8Ffw.s:4429   .debug_str:0000000000000824 .LASF49
     /tmp/ccFY8Ffw.s:4431   .debug_str:0000000000000837 .LASF50
     /tmp/ccFY8Ffw.s:4201   .debug_str:000000000000015b .LASF51
     /tmp/ccFY8Ffw.s:4235   .debug_str:0000000000000265 .LASF52
     /tmp/ccFY8Ffw.s:4281   .debug_str:00000000000003e3 .LASF53
     /tmp/ccFY8Ffw.s:4293   .debug_str:0000000000000436 .LASF54
     /tmp/ccFY8Ffw.s:4225   .debug_str:0000000000000226 .LASF55
     /tmp/ccFY8Ffw.s:4169   .debug_str:0000000000000072 .LASF56
     /tmp/ccFY8Ffw.s:4423   .debug_str:0000000000000800 .LASF57
     /tmp/ccFY8Ffw.s:4415   .debug_str:00000000000007d0 .LASF58
     /tmp/ccFY8Ffw.s:4551   .debug_str:0000000000000c2d .LASF59
     /tmp/ccFY8Ffw.s:4527   .debug_str:0000000000000b78 .LASF60
     /tmp/ccFY8Ffw.s:4543   .debug_str:0000000000000be7 .LASF61
     /tmp/ccFY8Ffw.s:4517   .debug_str:0000000000000b3e .LASF62
     /tmp/ccFY8Ffw.s:4345   .debug_str:00000000000005c3 .LASF63
GAS LISTING /tmp/ccFY8Ffw.s 			page 36


     /tmp/ccFY8Ffw.s:4531   .debug_str:0000000000000b8a .LASF64
     /tmp/ccFY8Ffw.s:4371   .debug_str:0000000000000664 .LASF65
     /tmp/ccFY8Ffw.s:4299   .debug_str:0000000000000462 .LASF66
     /tmp/ccFY8Ffw.s:4457   .debug_str:00000000000009ba .LASF67
     /tmp/ccFY8Ffw.s:4499   .debug_str:0000000000000aac .LASF68
     /tmp/ccFY8Ffw.s:4269   .debug_str:000000000000037e .LASF69
     /tmp/ccFY8Ffw.s:4381   .debug_str:00000000000006ae .LASF105
     /tmp/ccFY8Ffw.s:4301   .debug_str:0000000000000467 .LASF107
     /tmp/ccFY8Ffw.s:4483   .debug_str:0000000000000a3f .LASF70
     /tmp/ccFY8Ffw.s:4467   .debug_str:00000000000009fa .LASF112
     /tmp/ccFY8Ffw.s:4553   .debug_str:0000000000000c45 .LASF72
     /tmp/ccFY8Ffw.s:4267   .debug_str:0000000000000372 .LASF73
     /tmp/ccFY8Ffw.s:4189   .debug_str:00000000000000f8 .LASF74
     /tmp/ccFY8Ffw.s:4259   .debug_str:0000000000000326 .LASF75
     /tmp/ccFY8Ffw.s:4157   .debug_str:0000000000000005 .LASF76
     /tmp/ccFY8Ffw.s:4339   .debug_str:000000000000058f .LASF78
     /tmp/ccFY8Ffw.s:4441   .debug_str:0000000000000880 .LASF77
     /tmp/ccFY8Ffw.s:4419   .debug_str:00000000000007e9 .LASF79
     /tmp/ccFY8Ffw.s:4427   .debug_str:000000000000081f .LASF80
     /tmp/ccFY8Ffw.s:4165   .debug_str:000000000000005f .LASF82
     /tmp/ccFY8Ffw.s:4469   .debug_str:0000000000000a02 .LASF84
     /tmp/ccFY8Ffw.s:4355   .debug_str:00000000000005f7 .LASF86
     /tmp/ccFY8Ffw.s:4185   .debug_str:00000000000000de .LASF81
     /tmp/ccFY8Ffw.s:4497   .debug_str:0000000000000a95 .LASF83
     /tmp/ccFY8Ffw.s:4341   .debug_str:000000000000059c .LASF85
     /tmp/ccFY8Ffw.s:4509   .debug_str:0000000000000b03 .LASF87
     /tmp/ccFY8Ffw.s:4479   .debug_str:0000000000000a2a .LASF194
     /tmp/ccFY8Ffw.s:4485   .debug_str:0000000000000a48 .LASF88
     /tmp/ccFY8Ffw.s:4273   .debug_str:00000000000003a8 .LASF89
     /tmp/ccFY8Ffw.s:4369   .debug_str:000000000000065f .LASF195
     /tmp/ccFY8Ffw.s:4317   .debug_str:000000000000050e .LASF90
     /tmp/ccFY8Ffw.s:4343   .debug_str:00000000000005a9 .LASF91
     /tmp/ccFY8Ffw.s:4555   .debug_str:0000000000000c52 .LASF92
     /tmp/ccFY8Ffw.s:4383   .debug_str:00000000000006c3 .LASF93
     /tmp/ccFY8Ffw.s:4321   .debug_str:000000000000052e .LASF94
     /tmp/ccFY8Ffw.s:4411   .debug_str:00000000000007b7 .LASF95
     /tmp/ccFY8Ffw.s:4471   .debug_str:0000000000000a0d .LASF96
     /tmp/ccFY8Ffw.s:4251   .debug_str:00000000000002f7 .LASF97
     /tmp/ccFY8Ffw.s:4439   .debug_str:0000000000000868 .LASF196
     /tmp/ccFY8Ffw.s:4155   .debug_str:0000000000000000 .LASF98
     /tmp/ccFY8Ffw.s:4329   .debug_str:0000000000000564 .LASF99
     /tmp/ccFY8Ffw.s:4549   .debug_str:0000000000000c27 .LASF100
     /tmp/ccFY8Ffw.s:4493   .debug_str:0000000000000a78 .LASF101
     /tmp/ccFY8Ffw.s:4491   .debug_str:0000000000000a6e .LASF102
     /tmp/ccFY8Ffw.s:4465   .debug_str:00000000000009f1 .LASF103
     /tmp/ccFY8Ffw.s:4387   .debug_str:00000000000006e2 .LASF104
     /tmp/ccFY8Ffw.s:4435   .debug_str:000000000000084c .LASF116
     /tmp/ccFY8Ffw.s:4187   .debug_str:00000000000000ea .LASF106
     /tmp/ccFY8Ffw.s:4327   .debug_str:000000000000054b .LASF108
     /tmp/ccFY8Ffw.s:4229   .debug_str:000000000000024a .LASF109
     /tmp/ccFY8Ffw.s:4203   .debug_str:000000000000016e .LASF110
     /tmp/ccFY8Ffw.s:4219   .debug_str:00000000000001f4 .LASF197
     /tmp/ccFY8Ffw.s:4163   .debug_str:0000000000000037 .LASF198
     /tmp/ccFY8Ffw.s:4373   .debug_str:0000000000000675 .LASF111
     /tmp/ccFY8Ffw.s:4477   .debug_str:0000000000000a22 .LASF113
     /tmp/ccFY8Ffw.s:4183   .debug_str:00000000000000d9 .LASF114
     /tmp/ccFY8Ffw.s:4217   .debug_str:00000000000001ef .LASF115
GAS LISTING /tmp/ccFY8Ffw.s 			page 37


     /tmp/ccFY8Ffw.s:4231   .debug_str:0000000000000253 .LASF117
     /tmp/ccFY8Ffw.s:4475   .debug_str:0000000000000a1d .LASF118
     /tmp/ccFY8Ffw.s:4401   .debug_str:000000000000074d .LASF119
     /tmp/ccFY8Ffw.s:4515   .debug_str:0000000000000b30 .LASF120
     /tmp/ccFY8Ffw.s:4311   .debug_str:00000000000004e8 .LASF121
     /tmp/ccFY8Ffw.s:4505   .debug_str:0000000000000ad7 .LASF122
     /tmp/ccFY8Ffw.s:4347   .debug_str:00000000000005d9 .LASF123
     /tmp/ccFY8Ffw.s:4171   .debug_str:000000000000007d .LASF124
     /tmp/ccFY8Ffw.s:4283   .debug_str:00000000000003f5 .LASF125
     /tmp/ccFY8Ffw.s:4389   .debug_str:00000000000006ea .LASF126
     /tmp/ccFY8Ffw.s:4181   .debug_str:00000000000000d4 .LASF127
     /tmp/ccFY8Ffw.s:4407   .debug_str:0000000000000791 .LASF128
     /tmp/ccFY8Ffw.s:4403   .debug_str:0000000000000775 .LASF129
     /tmp/ccFY8Ffw.s:4379   .debug_str:00000000000006a4 .LASF130
     /tmp/ccFY8Ffw.s:4361   .debug_str:000000000000061b .LASF131
     /tmp/ccFY8Ffw.s:4445   .debug_str:00000000000008a9 .LASF132
     /tmp/ccFY8Ffw.s:4507   .debug_str:0000000000000afe .LASF199
     /tmp/ccFY8Ffw.s:4253   .debug_str:000000000000030d .LASF133
     /tmp/ccFY8Ffw.s:4359   .debug_str:0000000000000616 .LASF134
     /tmp/ccFY8Ffw.s:4353   .debug_str:00000000000005f2 .LASF135
     /tmp/ccFY8Ffw.s:4463   .debug_str:00000000000009de .LASF136
     /tmp/ccFY8Ffw.s:4239   .debug_str:0000000000000281 .LASF137
     /tmp/ccFY8Ffw.s:4421   .debug_str:00000000000007f6 .LASF200
     /tmp/ccFY8Ffw.s:4405   .debug_str:000000000000077a .LASF201
     /tmp/ccFY8Ffw.s:4313   .debug_str:00000000000004f7 .LASF138
     /tmp/ccFY8Ffw.s:4193   .debug_str:0000000000000110 .LASF139
     /tmp/ccFY8Ffw.s:4335   .debug_str:0000000000000580 .LASF140
     /tmp/ccFY8Ffw.s:4243   .debug_str:00000000000002ae .LASF141
     /tmp/ccFY8Ffw.s:4375   .debug_str:0000000000000685 .LASF142
     /tmp/ccFY8Ffw.s:4519   .debug_str:0000000000000b48 .LASF143
     /tmp/ccFY8Ffw.s:4559   .debug_str:0000000000000c65 .LASF144
     /tmp/ccFY8Ffw.s:4209   .debug_str:00000000000001a4 .LASF145
     /tmp/ccFY8Ffw.s:4437   .debug_str:000000000000085d .LASF146
     /tmp/ccFY8Ffw.s:4305   .debug_str:00000000000004a5 .LASF147
     /tmp/ccFY8Ffw.s:4385   .debug_str:00000000000006d9 .LASF148
     /tmp/ccFY8Ffw.s:4161   .debug_str:000000000000001d .LASF149
     /tmp/ccFY8Ffw.s:4409   .debug_str:00000000000007ad .LASF150
     /tmp/ccFY8Ffw.s:4227   .debug_str:0000000000000238 .LASF151
     /tmp/ccFY8Ffw.s:4215   .debug_str:00000000000001dd .LASF152
     /tmp/ccFY8Ffw.s:4501   .debug_str:0000000000000abb .LASF153
     /tmp/ccFY8Ffw.s:4175   .debug_str:00000000000000a7 .LASF154
     /tmp/ccFY8Ffw.s:4323   .debug_str:0000000000000534 .LASF155
     /tmp/ccFY8Ffw.s:4541   .debug_str:0000000000000bc8 .LASF156
     /tmp/ccFY8Ffw.s:4199   .debug_str:000000000000014c .LASF157
     /tmp/ccFY8Ffw.s:4263   .debug_str:0000000000000342 .LASF158
     /tmp/ccFY8Ffw.s:4487   .debug_str:0000000000000a55 .LASF159
     /tmp/ccFY8Ffw.s:4179   .debug_str:00000000000000bf .LASF160
     /tmp/ccFY8Ffw.s:4461   .debug_str:00000000000009d7 .LASF161
     /tmp/ccFY8Ffw.s:4211   .debug_str:00000000000001bf .LASF162
     /tmp/ccFY8Ffw.s:4455   .debug_str:00000000000009b2 .LASF163
     /tmp/ccFY8Ffw.s:4447   .debug_str:00000000000008bd .LASF164
     /tmp/ccFY8Ffw.s:4331   .debug_str:000000000000056d .LASF165
     /tmp/ccFY8Ffw.s:4303   .debug_str:0000000000000489 .LASF166
     /tmp/ccFY8Ffw.s:4451   .debug_str:0000000000000999 .LASF167
     /tmp/ccFY8Ffw.s:4277   .debug_str:00000000000003d6 .LASF168
     /tmp/ccFY8Ffw.s:4521   .debug_str:0000000000000b66 .LASF169
     /tmp/ccFY8Ffw.s:4287   .debug_str:0000000000000416 .LASF170
GAS LISTING /tmp/ccFY8Ffw.s 			page 38


     /tmp/ccFY8Ffw.s:4237   .debug_str:000000000000026b .LASF171
     /tmp/ccFY8Ffw.s:4159   .debug_str:0000000000000015 .LASF172
     /tmp/ccFY8Ffw.s:4223   .debug_str:000000000000020e .LASF173
     /tmp/ccFY8Ffw.s:67     .text:000000000000003c .LFB42
     /tmp/ccFY8Ffw.s:942    .text:000000000000033c .LFE42
     /tmp/ccFY8Ffw.s:3827   .debug_loc:0000000000000000 .LLST0
     /tmp/ccFY8Ffw.s:4213   .debug_str:00000000000001d6 .LASF174
     /tmp/ccFY8Ffw.s:3838   .debug_loc:0000000000000036 .LLST1
     /tmp/ccFY8Ffw.s:4139   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccFY8Ffw.s:4525   .debug_str:0000000000000b73 .LASF175
     /tmp/ccFY8Ffw.s:4529   .debug_str:0000000000000b82 .LASF176
     /tmp/ccFY8Ffw.s:3941   .debug_loc:00000000000001b8 .LLST7
     /tmp/ccFY8Ffw.s:3972   .debug_loc:000000000000024d .LLST8
     /tmp/ccFY8Ffw.s:4399   .debug_str:0000000000000745 .LASF177
     /tmp/ccFY8Ffw.s:3983   .debug_loc:0000000000000283 .LLST9
     /tmp/ccFY8Ffw.s:3990   .debug_loc:00000000000002a6 .LLST10
     /tmp/ccFY8Ffw.s:4013   .debug_loc:0000000000000315 .LLST11
     /tmp/ccFY8Ffw.s:4191   .debug_str:0000000000000108 .LASF178
     /tmp/ccFY8Ffw.s:4020   .debug_loc:0000000000000338 .LLST12
     /tmp/ccFY8Ffw.s:4233   .debug_str:000000000000025f .LASF179
     /tmp/ccFY8Ffw.s:4027   .debug_loc:000000000000035b .LLST13
     /tmp/ccFY8Ffw.s:4349   .debug_str:00000000000005e3 .LASF180
     /tmp/ccFY8Ffw.s:4034   .debug_loc:000000000000037e .LLST14
     /tmp/ccFY8Ffw.s:4315   .debug_str:0000000000000500 .LASF181
     /tmp/ccFY8Ffw.s:4041   .debug_loc:00000000000003a1 .LLST15
     /tmp/ccFY8Ffw.s:4048   .debug_loc:00000000000003c4 .LLST16
     /tmp/ccFY8Ffw.s:4351   .debug_str:00000000000005ea .LASF182
     /tmp/ccFY8Ffw.s:4055   .debug_loc:00000000000003e7 .LLST17
     /tmp/ccFY8Ffw.s:4177   .debug_str:00000000000000ba .LASF183
     /tmp/ccFY8Ffw.s:4062   .debug_loc:000000000000040a .LLST18
     /tmp/ccFY8Ffw.s:4069   .debug_loc:000000000000042d .LLST19
     /tmp/ccFY8Ffw.s:320    .text:0000000000000114 .LVL8
     /tmp/ccFY8Ffw.s:404    .text:000000000000014c .LVL16
     /tmp/ccFY8Ffw.s:455    .text:0000000000000170 .LVL22
     /tmp/ccFY8Ffw.s:489    .text:0000000000000198 .LVL26
     /tmp/ccFY8Ffw.s:514    .text:00000000000001b8 .LVL28
     /tmp/ccFY8Ffw.s:539    .text:00000000000001d0 .LVL32
     /tmp/ccFY8Ffw.s:581    .text:00000000000001fc .LVL37
     /tmp/ccFY8Ffw.s:612    .text:0000000000000218 .LVL40
     /tmp/ccFY8Ffw.s:647    .text:0000000000000238 .LVL44
     /tmp/ccFY8Ffw.s:676    .text:0000000000000250 .LVL47
     /tmp/ccFY8Ffw.s:697    .text:0000000000000264 .LVL49
     /tmp/ccFY8Ffw.s:727    .text:0000000000000280 .LVL52
     /tmp/ccFY8Ffw.s:178    .text:00000000000000c0 .LBB74
     /tmp/ccFY8Ffw.s:194    .text:00000000000000cc .LBE74
     /tmp/ccFY8Ffw.s:200    .text:00000000000000d4 .LBB76
     /tmp/ccFY8Ffw.s:215    .text:00000000000000e0 .LBE76
     /tmp/ccFY8Ffw.s:341    .text:0000000000000120 .LBB79
     /tmp/ccFY8Ffw.s:352    .text:0000000000000124 .LBE79
     /tmp/ccFY8Ffw.s:4076   .debug_loc:0000000000000450 .LLST20
     /tmp/ccFY8Ffw.s:357    .text:0000000000000128 .LBB81
     /tmp/ccFY8Ffw.s:369    .text:000000000000012c .LBE81
     /tmp/ccFY8Ffw.s:4083   .debug_loc:0000000000000473 .LLST21
     /tmp/ccFY8Ffw.s:735    .text:0000000000000284 .LBB58
     /tmp/ccFY8Ffw.s:859    .text:0000000000000300 .LBE58
     /tmp/ccFY8Ffw.s:737    .text:0000000000000284 .LBB59
     /tmp/ccFY8Ffw.s:749    .text:000000000000028c .LBE59
GAS LISTING /tmp/ccFY8Ffw.s 			page 39


     /tmp/ccFY8Ffw.s:4090   .debug_loc:0000000000000496 .LLST3
     /tmp/ccFY8Ffw.s:751    .text:000000000000028c .LBB61
     /tmp/ccFY8Ffw.s:766    .text:0000000000000298 .LBE61
     /tmp/ccFY8Ffw.s:770    .text:000000000000029c .LBB63
     /tmp/ccFY8Ffw.s:785    .text:00000000000002a8 .LBE63
     /tmp/ccFY8Ffw.s:800    .text:00000000000002cc .LBB65
     /tmp/ccFY8Ffw.s:808    .text:00000000000002d0 .LBE65
     /tmp/ccFY8Ffw.s:4098   .debug_loc:00000000000004ba .LLST4
     /tmp/ccFY8Ffw.s:817    .text:00000000000002d8 .LBB67
     /tmp/ccFY8Ffw.s:828    .text:00000000000002dc .LBE67
     /tmp/ccFY8Ffw.s:4105   .debug_loc:00000000000004dd .LLST5
     /tmp/ccFY8Ffw.s:833    .text:00000000000002e0 .LBB69
     /tmp/ccFY8Ffw.s:847    .text:00000000000002e8 .LBE69
     /tmp/ccFY8Ffw.s:4112   .debug_loc:0000000000000500 .LLST6
     /tmp/ccFY8Ffw.s:855    .text:00000000000002fc .LVL63
     /tmp/ccFY8Ffw.s:861    .text:0000000000000300 .LBB49
     /tmp/ccFY8Ffw.s:937    .text:000000000000033c .LBE49
     /tmp/ccFY8Ffw.s:863    .text:0000000000000300 .LBB50
     /tmp/ccFY8Ffw.s:878    .text:000000000000030c .LBE50
     /tmp/ccFY8Ffw.s:882    .text:0000000000000310 .LBB52
     /tmp/ccFY8Ffw.s:897    .text:000000000000031c .LBE52
     /tmp/ccFY8Ffw.s:908    .text:000000000000032c .LBB54
     /tmp/ccFY8Ffw.s:919    .text:0000000000000330 .LBE54
     /tmp/ccFY8Ffw.s:4119   .debug_loc:0000000000000523 .LLST2
     /tmp/ccFY8Ffw.s:924    .text:0000000000000334 .LBB56
     /tmp/ccFY8Ffw.s:936    .text:000000000000033c .LBE56
     /tmp/ccFY8Ffw.s:903    .text:0000000000000328 .LVL65
     /tmp/ccFY8Ffw.s:81     .text:0000000000000050 .LBB42
     /tmp/ccFY8Ffw.s:98     .text:000000000000005c .LBE42
     /tmp/ccFY8Ffw.s:100    .text:000000000000005c .LBB44
     /tmp/ccFY8Ffw.s:116    .text:0000000000000068 .LBE44
     /tmp/ccFY8Ffw.s:150    .text:00000000000000ac .LVL3
     /tmp/ccFY8Ffw.s:4473   .debug_str:0000000000000a18 .LASF184
     /tmp/ccFY8Ffw.s:10     .text:0000000000000000 .LFB41
     /tmp/ccFY8Ffw.s:56     .text:000000000000003c .LFE41
     /tmp/ccFY8Ffw.s:4257   .debug_str:0000000000000321 .LASF202
     /tmp/ccFY8Ffw.s:4513   .debug_str:0000000000000b2b .LASF185
     /tmp/ccFY8Ffw.s:4279   .debug_str:00000000000003dc .LASF186
     /tmp/ccFY8Ffw.s:4337   .debug_str:0000000000000588 .LASF187
     /tmp/ccFY8Ffw.s:4265   .debug_str:0000000000000362 .LASF188
     /tmp/ccFY8Ffw.s:4205   .debug_str:0000000000000181 .LASF189
     /tmp/ccFY8Ffw.s:4545   .debug_str:0000000000000bfd .LASF190
     /tmp/ccFY8Ffw.s:96     .text:000000000000005c .LVL0
     /tmp/ccFY8Ffw.s:129    .text:0000000000000078 .LVL2
     /tmp/ccFY8Ffw.s:173    .text:00000000000000c0 .LVL4
     /tmp/ccFY8Ffw.s:226    .text:00000000000000f0 .LVL6
     /tmp/ccFY8Ffw.s:114    .text:0000000000000068 .LVL1
     /tmp/ccFY8Ffw.s:187    .text:00000000000000c4 .LVL5
     /tmp/ccFY8Ffw.s:384    .text:0000000000000140 .LVL14
     /tmp/ccFY8Ffw.s:419    .text:0000000000000158 .LVL17
     /tmp/ccFY8Ffw.s:450    .text:0000000000000168 .LVL21
     /tmp/ccFY8Ffw.s:483    .text:0000000000000190 .LVL25
     /tmp/ccFY8Ffw.s:504    .text:00000000000001a4 .LVL27
     /tmp/ccFY8Ffw.s:517    .text:00000000000001bc .LVL29
     /tmp/ccFY8Ffw.s:567    .text:00000000000001f0 .LVL35
     /tmp/ccFY8Ffw.s:596    .text:0000000000000208 .LVL38
     /tmp/ccFY8Ffw.s:628    .text:0000000000000224 .LVL41
GAS LISTING /tmp/ccFY8Ffw.s 			page 40


     /tmp/ccFY8Ffw.s:662    .text:0000000000000244 .LVL45
     /tmp/ccFY8Ffw.s:691    .text:000000000000025c .LVL48
     /tmp/ccFY8Ffw.s:712    .text:0000000000000270 .LVL50
     /tmp/ccFY8Ffw.s:730    .text:0000000000000284 .LVL53
     /tmp/ccFY8Ffw.s:791    .text:00000000000002b4 .LVL55
     /tmp/ccFY8Ffw.s:811    .text:00000000000002d4 .LVL58
     /tmp/ccFY8Ffw.s:844    .text:00000000000002e8 .LVL62
     /tmp/ccFY8Ffw.s:857    .text:0000000000000300 .LVL64
     /tmp/ccFY8Ffw.s:463    .text:000000000000017c .LVL23
     /tmp/ccFY8Ffw.s:478    .text:0000000000000188 .LVL24
     /tmp/ccFY8Ffw.s:547    .text:00000000000001dc .LVL33
     /tmp/ccFY8Ffw.s:562    .text:00000000000001e8 .LVL34
     /tmp/ccFY8Ffw.s:721    .text:0000000000000274 .LVL51
     /tmp/ccFY8Ffw.s:527    .text:00000000000001c0 .LVL30
     /tmp/ccFY8Ffw.s:576    .text:00000000000001f4 .LVL36
     /tmp/ccFY8Ffw.s:605    .text:000000000000020c .LVL39
     /tmp/ccFY8Ffw.s:632    .text:0000000000000228 .LVL42
     /tmp/ccFY8Ffw.s:642    .text:0000000000000230 .LVL43
     /tmp/ccFY8Ffw.s:671    .text:0000000000000248 .LVL46
     /tmp/ccFY8Ffw.s:315    .text:000000000000010c .LVL7
     /tmp/ccFY8Ffw.s:333    .text:000000000000011c .LVL9
     /tmp/ccFY8Ffw.s:399    .text:0000000000000144 .LVL15
     /tmp/ccFY8Ffw.s:438    .text:0000000000000160 .LVL19
     /tmp/ccFY8Ffw.s:444    .text:0000000000000164 .LVL20
     /tmp/ccFY8Ffw.s:432    .text:000000000000015c .LVL18
     /tmp/ccFY8Ffw.s:533    .text:00000000000001c4 .LVL31
     /tmp/ccFY8Ffw.s:340    .text:0000000000000120 .LVL10
     /tmp/ccFY8Ffw.s:349    .text:0000000000000124 .LVL11
     /tmp/ccFY8Ffw.s:356    .text:0000000000000128 .LVL12
     /tmp/ccFY8Ffw.s:365    .text:000000000000012c .LVL13
     /tmp/ccFY8Ffw.s:746    .text:000000000000028c .LVL54
     /tmp/ccFY8Ffw.s:799    .text:00000000000002cc .LVL56
     /tmp/ccFY8Ffw.s:806    .text:00000000000002d0 .LVL57
     /tmp/ccFY8Ffw.s:816    .text:00000000000002d8 .LVL59
     /tmp/ccFY8Ffw.s:825    .text:00000000000002dc .LVL60
     /tmp/ccFY8Ffw.s:832    .text:00000000000002e0 .LVL61
     /tmp/ccFY8Ffw.s:907    .text:000000000000032c .LVL66
     /tmp/ccFY8Ffw.s:916    .text:0000000000000330 .LVL67
     /tmp/ccFY8Ffw.s:953    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccFY8Ffw.s:176    .text:00000000000000c0 .LBB73
     /tmp/ccFY8Ffw.s:370    .text:000000000000012c .LBE73
     /tmp/ccFY8Ffw.s:388    .text:0000000000000140 .LBB84
     /tmp/ccFY8Ffw.s:733    .text:0000000000000284 .LBE84
     /tmp/ccFY8Ffw.s:305    .text:0000000000000108 .LBB78
     /tmp/ccFY8Ffw.s:336    .text:000000000000011c .LBE78
     /tmp/ccFY8Ffw.s:389    .text:0000000000000140 .LBB83
     /tmp/ccFY8Ffw.s:732    .text:0000000000000284 .LBE83

UNDEFINED SYMBOLS
_ZN3TCB7runningE
_Z11printStringPKc
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPKv
_ZN3TCB12createThreadEPFvPvES0_S0_
_ZN3TCB10exitThreadEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
GAS LISTING /tmp/ccFY8Ffw.s 			page 41


_ZN9semaphore13openSemaphoreEi
_ZN9semaphore14closeSemaphoreEv
_ZN9semaphore4waitEv
_ZN9semaphore6signalEv
_ZN9semaphore7trywaitEv
__getc
__putc
console_handler
