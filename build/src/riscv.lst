GAS LISTING /tmp/cc8EM8XN.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB43:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by os on 5/17/24.
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   7:src/riscv.cpp **** 
   8:src/riscv.cpp **** 
   9:src/riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 9 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  10:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 10 5
  21              		.loc 1 10 38 is_stmt 0
  22              	#APP
  23              	# 10 "src/riscv.cpp" 1
  11              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 11 5 is_stmt 1
  27              		.loc 1 11 29 is_stmt 0
  28              	# 11 "src/riscv.cpp" 1
  12              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 12 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE43:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB44:
  13:src/riscv.cpp **** 
  14:src/riscv.cpp **** void Riscv::handleSupervisorTrap() {
GAS LISTING /tmp/cc8EM8XN.s 			page 2


  47              		.loc 1 14 36 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F8 		addi	sp,sp,-128
  50              		.cfi_def_cfa_offset 128
  51 0024 233C1106 		sd	ra,120(sp)
  52 0028 23388106 		sd	s0,112(sp)
  53 002c 23349106 		sd	s1,104(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57 0030 13040108 		addi	s0,sp,128
  58              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp **** 
  16:src/riscv.cpp ****     uint64 ra = r_a0();
  59              		.loc 1 16 5
  60              	.LBB38:
  61              	.LBB39:
  62              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../lib/console.h"
  10:src/../h/riscv.hpp **** #include "print.hpp"
  11:src/../h/riscv.hpp **** #include "tcb.hpp"
  12:src/../h/riscv.hpp **** #include "MemoryAllocator.hpp"
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     //pop sstatus spp and sstatus spie
  18:src/../h/riscv.hpp ****     static void popSppSpie();
  19:src/../h/riscv.hpp ****     //push x3..31 registers
  20:src/../h/riscv.hpp ****     static void pushRegisters();
  21:src/../h/riscv.hpp ****     //pop x3..31 regiesters
  22:src/../h/riscv.hpp ****     static void popRegisters();
  23:src/../h/riscv.hpp **** 
  24:src/../h/riscv.hpp ****     // read register scause
  25:src/../h/riscv.hpp ****     static uint64 r_scause();
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // write register scause
  28:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // read register sepc
  31:src/../h/riscv.hpp ****     static uint64 r_sepc();
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // write register sepc
  34:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // read register stvec
  37:src/../h/riscv.hpp ****     static uint64 r_stvec();
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // write register stvec
GAS LISTING /tmp/cc8EM8XN.s 			page 3


  40:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // read register stval
  43:src/../h/riscv.hpp ****     static uint64 r_stval();
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // write register stval
  46:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     enum BitMaskSip
  49:src/../h/riscv.hpp ****     {
  50:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  51:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  52:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  53:src/../h/riscv.hpp ****     };
  54:src/../h/riscv.hpp **** 
  55:src/../h/riscv.hpp ****     // mask set register sip
  56:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // mask clear register sip
  59:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // read register sip
  62:src/../h/riscv.hpp ****     static uint64 r_sip();
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // write register sip
  65:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     enum BitMaskSstatus
  68:src/../h/riscv.hpp ****     {
  69:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  70:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  71:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  72:src/../h/riscv.hpp ****     };
  73:src/../h/riscv.hpp **** 
  74:src/../h/riscv.hpp ****     // mask set register sstatus
  75:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // mask clear register sstatus
  78:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // read register sstatus
  81:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // write register sstatus
  84:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     //read a0 register
  87:src/../h/riscv.hpp ****     static uint64 r_a0();
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     //write to a0 register
  90:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp ****     static void supervisorTrap();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp **** private:
  95:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  96:src/../h/riscv.hpp **** };
GAS LISTING /tmp/cc8EM8XN.s 			page 4


  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 100:src/../h/riscv.hpp **** {
 101:src/../h/riscv.hpp ****     uint64 volatile scause;
 102:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 103:src/../h/riscv.hpp ****     return scause;
 104:src/../h/riscv.hpp **** }
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 107:src/../h/riscv.hpp **** {
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     uint64 volatile sepc;
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 115:src/../h/riscv.hpp ****     return sepc;
 116:src/../h/riscv.hpp **** }
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 119:src/../h/riscv.hpp **** {
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     uint64 volatile stvec;
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 127:src/../h/riscv.hpp ****     return stvec;
 128:src/../h/riscv.hpp **** }
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 131:src/../h/riscv.hpp **** {
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     uint64 volatile stval;
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 139:src/../h/riscv.hpp ****     return stval;
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
GAS LISTING /tmp/cc8EM8XN.s 			page 5


 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     uint64 volatile sip;
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 161:src/../h/riscv.hpp ****     return sip;
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 183:src/../h/riscv.hpp ****     return sstatus;
 184:src/../h/riscv.hpp **** }
 185:src/../h/riscv.hpp **** 
 186:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 187:src/../h/riscv.hpp **** {
 188:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** //a0
 192:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 193:src/../h/riscv.hpp **** {
 194:src/../h/riscv.hpp ****     uint64 volatile a0;
  63              		.loc 2 194 5
 195:src/../h/riscv.hpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
  64              		.loc 2 195 5
  65              		.loc 2 195 46 is_stmt 0
  66              	#APP
  67              	# 195 "src/../h/riscv.hpp" 1
 196              	    return a0;
  68              		mv a5, a0
  69              	# 0 "" 2
  70              	#NO_APP
  71 0038 2334F4FA 		sd	a5,-88(s0)
  72              		.loc 2 196 5 is_stmt 1
  73              		.loc 2 196 12 is_stmt 0
  74 003c 833784FA 		ld	a5,-88(s0)
  75              	.LVL0:
  76              	.LBE39:
GAS LISTING /tmp/cc8EM8XN.s 			page 6


  77              	.LBE38:
  17:src/riscv.cpp ****     uint64 scause = r_scause();
  78              		.loc 1 17 5 is_stmt 1
  79              	.LBB40:
  80              	.LBB41:
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  81              		.loc 2 101 5
 102:src/../h/riscv.hpp ****     return scause;
  82              		.loc 2 102 5
 102:src/../h/riscv.hpp ****     return scause;
  83              		.loc 2 102 72 is_stmt 0
  84              	#APP
  85              	# 102 "src/../h/riscv.hpp" 1
  86              		csrr a4, scause
  87              	# 0 "" 2
  88              	#NO_APP
  89 0044 2330E4FA 		sd	a4,-96(s0)
 103:src/../h/riscv.hpp **** }
  90              		.loc 2 103 5 is_stmt 1
 103:src/../h/riscv.hpp **** }
  91              		.loc 2 103 12 is_stmt 0
  92 0048 033504FA 		ld	a0,-96(s0)
  93              	.LVL1:
  94              	.LBE41:
  95              	.LBE40:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){//pomera registar a3??
  96              		.loc 1 19 5 is_stmt 1
  97              	.LBB42:
  98              		.loc 1 19 39 is_stmt 0
  99 004c 930685FF 		addi	a3,a0,-8
 100              		.loc 1 19 5
 101 0050 13071000 		li	a4,1
 102 0054 637CD704 		bleu	a3,a4,.L24
 103              	.LBE42:
  20:src/riscv.cpp ****         //environment call
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  23:src/riscv.cpp ****         int ret;
  24:src/riscv.cpp ****         sem_t * shandle;
  25:src/riscv.cpp ****         switch (ra) {
  26:src/riscv.cpp ****             case 0x01:
  27:src/riscv.cpp ****                 size_t size;
  28:src/riscv.cpp ****                 void *mallocr;
  29:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
  30:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
  31:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
  32:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  33:src/riscv.cpp ****                 break;
  34:src/riscv.cpp **** 
  35:src/riscv.cpp ****             case 0x02:
  36:src/riscv.cpp ****                 void *freep;
  37:src/riscv.cpp ****                 int greska;
  38:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(freep));
  39:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
  40:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
  41:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
GAS LISTING /tmp/cc8EM8XN.s 			page 7


  42:src/riscv.cpp ****                 break;
  43:src/riscv.cpp **** 
  44:src/riscv.cpp ****             case 0x11:
  45:src/riscv.cpp ****                 TCB::Body start_routine;
  46:src/riscv.cpp ****                 void* arg;
  47:src/riscv.cpp ****                 thread_t* thandle;
  48:src/riscv.cpp ****                 void* stek;
  49:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
  50:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
  51:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
  53:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
  54:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
  55:src/riscv.cpp ****                 else ret = -1;
  56:src/riscv.cpp **** 
  57:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  58:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
  59:src/riscv.cpp ****                 break;
  60:src/riscv.cpp **** 
  61:src/riscv.cpp ****             case 0x12:
  62:src/riscv.cpp ****                 ret = TCB::exitThread();
  63:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  64:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  65:src/riscv.cpp ****                 break;
  66:src/riscv.cpp **** 
  67:src/riscv.cpp ****             case 0x13:
  68:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
  69:src/riscv.cpp ****                 TCB::dispatch();
  70:src/riscv.cpp ****                 break;
  71:src/riscv.cpp **** 
  72:src/riscv.cpp ****             case 0x21:
  73:src/riscv.cpp ****                 int val;
  74:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
  75:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
  76:src/riscv.cpp ****                 *shandle = sem::openSemaphore(val);
  77:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
  78:src/riscv.cpp ****                 else ret = -1;
  79:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  80:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  81:src/riscv.cpp ****                 break;
  82:src/riscv.cpp **** 
  83:src/riscv.cpp ****             case 0x22:
  84:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
  85:src/riscv.cpp ****                 ret = (*shandle)->sem::closeSemaphore();
  86:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  87:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  88:src/riscv.cpp ****                 break;
  89:src/riscv.cpp ****             case 0x23:
  90:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
  91:src/riscv.cpp ****                 ret = (*shandle)->sem::wait();
  92:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
  93:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
  94:src/riscv.cpp ****                 break;
  95:src/riscv.cpp ****             case 0x24:
  96:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
  97:src/riscv.cpp ****                 ret = (*shandle)->sem::signal();
  98:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
GAS LISTING /tmp/cc8EM8XN.s 			page 8


  99:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 100:src/riscv.cpp ****                 break;
 101:src/riscv.cpp ****             default:
 102:src/riscv.cpp ****                     break;
 103:src/riscv.cpp **** 
 104:src/riscv.cpp ****         }
 105:src/riscv.cpp **** 
 106:src/riscv.cpp ****         w_sstatus(sstatus);
 107:src/riscv.cpp ****         w_sepc(sepc);
 108:src/riscv.cpp ****     }
 109:src/riscv.cpp ****     else if(scause == 0x8000000000000001UL){
 104              		.loc 1 109 10 is_stmt 1
 105              	.LBB76:
 106              	.LBB43:
 107 0058 9307F0FF 		li	a5,-1
 108              	.LVL2:
 109 005c 9397F703 		slli	a5,a5,63
 110 0060 93871700 		addi	a5,a5,1
 111 0064 6306F51C 		beq	a0,a5,.L25
 110:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 111:src/riscv.cpp ****         TCB::timeSliceCounter++;
 112:src/riscv.cpp ****         //supervisor software interrupt; timer
 113:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 114:src/riscv.cpp **** 
 115:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 116:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 117:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 118:src/riscv.cpp ****             TCB::dispatch();
 119:src/riscv.cpp ****             w_sstatus(sstatus);
 120:src/riscv.cpp ****             w_sepc(sepc);
 121:src/riscv.cpp ****         }
 122:src/riscv.cpp **** 
 123:src/riscv.cpp **** 
 124:src/riscv.cpp ****     }else if(scause == 0x8000000000000009UL){
 112              		.loc 1 124 11
 113 0068 9307F0FF 		li	a5,-1
 114 006c 9397F703 		slli	a5,a5,63
 115 0070 93879700 		addi	a5,a5,9
 116 0074 630AF522 		beq	a0,a5,.L26
 125:src/riscv.cpp ****         // supervisor external interrupt; console
 126:src/riscv.cpp **** 
 127:src/riscv.cpp ****         console_handler();
 128:src/riscv.cpp ****     }else{
 129:src/riscv.cpp ****         //unexpected interrupt;
 130:src/riscv.cpp ****         printInteger(scause);
 117              		.loc 1 130 9
 118              		.loc 1 130 21 is_stmt 0
 119 0078 97000000 		call	_Z12printIntegerm@plt
 119      E7800000 
 120              	.LVL3:
 131:src/riscv.cpp ****         printInteger(r_sepc());
 121              		.loc 1 131 9 is_stmt 1
 122              	.LBB44:
 123              	.LBB45:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 124              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
GAS LISTING /tmp/cc8EM8XN.s 			page 9


 125              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 126              		.loc 2 114 64 is_stmt 0
 127              	#APP
 128              	# 114 "src/../h/riscv.hpp" 1
 129              		csrr a5, sepc
 130              	# 0 "" 2
 131              	#NO_APP
 132 0084 233CF4FC 		sd	a5,-40(s0)
 115:src/../h/riscv.hpp **** }
 133              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 134              		.loc 2 115 12 is_stmt 0
 135 0088 033584FD 		ld	a0,-40(s0)
 136              	.LBE45:
 137              	.LBE44:
 138              		.loc 1 131 21
 139 008c 97000000 		call	_Z12printIntegerm@plt
 139      E7800000 
 140              	.LVL4:
 132:src/riscv.cpp ****         printInteger(r_stval());
 141              		.loc 1 132 9 is_stmt 1
 142              	.LBB46:
 143              	.LBB47:
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 144              		.loc 2 137 5
 138:src/../h/riscv.hpp ****     return stval;
 145              		.loc 2 138 5
 138:src/../h/riscv.hpp ****     return stval;
 146              		.loc 2 138 68 is_stmt 0
 147              	#APP
 148              	# 138 "src/../h/riscv.hpp" 1
 149              		csrr a5, stval
 150              	# 0 "" 2
 151              	#NO_APP
 152 0098 2338F4FC 		sd	a5,-48(s0)
 139:src/../h/riscv.hpp **** }
 153              		.loc 2 139 5 is_stmt 1
 139:src/../h/riscv.hpp **** }
 154              		.loc 2 139 12 is_stmt 0
 155 009c 033504FD 		ld	a0,-48(s0)
 156              	.LBE47:
 157              	.LBE46:
 158              		.loc 1 132 21
 159 00a0 97000000 		call	_Z12printIntegerm@plt
 159      E7800000 
 160              	.LVL5:
 161              	.LBE43:
 162              	.LBE76:
 133:src/riscv.cpp ****     }
 134:src/riscv.cpp **** };...
 163              		.loc 1 134 1
 164 00a8 6F000007 		j	.L3
 165              	.LVL6:
 166              	.L24:
 167              	.LBB77:
 168              	.LBB63:
GAS LISTING /tmp/cc8EM8XN.s 			page 10


  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 169              		.loc 1 21 9 is_stmt 1
 170              	.LBB64:
 171              	.LBB65:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 172              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 173              		.loc 2 114 5
 114:src/../h/riscv.hpp ****     return sepc;
 174              		.loc 2 114 64 is_stmt 0
 175              	#APP
 176              	# 114 "src/../h/riscv.hpp" 1
 177              		csrr a4, sepc
 178              	# 0 "" 2
 179              	#NO_APP
 180 00b0 233CE4FA 		sd	a4,-72(s0)
 115:src/../h/riscv.hpp **** }
 181              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 182              		.loc 2 115 12 is_stmt 0
 183 00b4 033784FB 		ld	a4,-72(s0)
 184              	.LBE65:
 185              	.LBE64:
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 186              		.loc 1 21 41
 187 00b8 13074700 		addi	a4,a4,4
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() +4;
 188              		.loc 1 21 42
 189 00bc 2330E4F8 		sd	a4,-128(s0)
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 190              		.loc 1 22 9 is_stmt 1
 191              	.LBB66:
 192              	.LBB67:
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 193              		.loc 2 181 5
 182:src/../h/riscv.hpp ****     return sstatus;
 194              		.loc 2 182 5
 182:src/../h/riscv.hpp ****     return sstatus;
 195              		.loc 2 182 76 is_stmt 0
 196              	#APP
 197              	# 182 "src/../h/riscv.hpp" 1
 198              		csrr a4, sstatus
 199              	# 0 "" 2
 200              	#NO_APP
 201 00c4 2338E4FA 		sd	a4,-80(s0)
 183:src/../h/riscv.hpp **** }
 202              		.loc 2 183 5 is_stmt 1
 183:src/../h/riscv.hpp **** }
 203              		.loc 2 183 12 is_stmt 0
 204 00c8 033704FB 		ld	a4,-80(s0)
 205              	.LBE67:
 206              	.LBE66:
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 207              		.loc 1 22 45
 208 00cc 2334E4F8 		sd	a4,-120(s0)
  23:src/riscv.cpp ****         int ret;
 209              		.loc 1 23 9 is_stmt 1
GAS LISTING /tmp/cc8EM8XN.s 			page 11


  24:src/riscv.cpp ****         sem_t * shandle;
 210              		.loc 1 24 9
  25:src/riscv.cpp ****         switch (ra) {
 211              		.loc 1 25 9
 212 00d0 13074002 		li	a4,36
 213 00d4 636AF702 		bgtu	a5,a4,.L5
 214 00d8 93972700 		slli	a5,a5,2
 215              	.LVL7:
 216 00dc 17070000 		lla	a4,.L7
 216      13070700 
 217 00e4 B387E700 		add	a5,a5,a4
 218 00e8 83A70700 		lw	a5,0(a5)
 219 00ec B387E700 		add	a5,a5,a4
 220 00f0 67800700 		jr	a5
 221              		.section	.rodata
 222              		.align	2
 223              		.align	2
 224              	.L7:
 225 0000 00000000 		.word	.L5-.L7
 226 0004 00000000 		.word	.L15-.L7
 227 0008 00000000 		.word	.L14-.L7
 228 000c 00000000 		.word	.L5-.L7
 229 0010 00000000 		.word	.L5-.L7
 230 0014 00000000 		.word	.L5-.L7
 231 0018 00000000 		.word	.L5-.L7
 232 001c 00000000 		.word	.L5-.L7
 233 0020 00000000 		.word	.L5-.L7
 234 0024 00000000 		.word	.L5-.L7
 235 0028 00000000 		.word	.L5-.L7
 236 002c 00000000 		.word	.L5-.L7
 237 0030 00000000 		.word	.L5-.L7
 238 0034 00000000 		.word	.L5-.L7
 239 0038 00000000 		.word	.L5-.L7
 240 003c 00000000 		.word	.L5-.L7
 241 0040 00000000 		.word	.L5-.L7
 242 0044 00000000 		.word	.L13-.L7
 243 0048 00000000 		.word	.L12-.L7
 244 004c 00000000 		.word	.L11-.L7
 245 0050 00000000 		.word	.L5-.L7
 246 0054 00000000 		.word	.L5-.L7
 247 0058 00000000 		.word	.L5-.L7
 248 005c 00000000 		.word	.L5-.L7
 249 0060 00000000 		.word	.L5-.L7
 250 0064 00000000 		.word	.L5-.L7
 251 0068 00000000 		.word	.L5-.L7
 252 006c 00000000 		.word	.L5-.L7
 253 0070 00000000 		.word	.L5-.L7
 254 0074 00000000 		.word	.L5-.L7
 255 0078 00000000 		.word	.L5-.L7
 256 007c 00000000 		.word	.L5-.L7
 257 0080 00000000 		.word	.L5-.L7
 258 0084 00000000 		.word	.L10-.L7
 259 0088 00000000 		.word	.L9-.L7
 260 008c 00000000 		.word	.L8-.L7
 261 0090 00000000 		.word	.L6-.L7
 262              		.text
 263              	.L15:
GAS LISTING /tmp/cc8EM8XN.s 			page 12


 264              	.LBB68:
  26:src/riscv.cpp ****             case 0x01:
 265              		.loc 1 26 13
  27:src/riscv.cpp ****                 size_t size;
 266              		.loc 1 27 17
  28:src/riscv.cpp ****                 void *mallocr;
 267              		.loc 1 28 17
  29:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
 268              		.loc 1 29 17
  29:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
 269              		.loc 1 29 57 is_stmt 0
 270              	#APP
 271              	# 29 "src/riscv.cpp" 1
 272              		mv a0, a1
 273              	# 0 "" 2
 274              	.LVL8:
  30:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 275              		.loc 1 30 17 is_stmt 1
  30:src/riscv.cpp ****                 mallocr = MemoryAllocator::mem_alloc(size);
 276              		.loc 1 30 53 is_stmt 0
 277              	#NO_APP
 278 00f8 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 278      E7800000 
 279              	.LVL9:
  31:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 280              		.loc 1 31 17 is_stmt 1
  31:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0"::"r"(mallocr));
 281              		.loc 1 31 60 is_stmt 0
 282              	#APP
 283              	# 31 "src/riscv.cpp" 1
  32:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 284              		mv t0, a0
 285              	# 0 "" 2
 286              		.loc 1 32 17 is_stmt 1
  32:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 287              		.loc 1 32 50 is_stmt 0
 288              	# 32 "src/riscv.cpp" 1
  33:src/riscv.cpp ****                 break;
 289              		sd t0, 80(x8)
 290              	# 0 "" 2
 291              		.loc 1 33 17 is_stmt 1
 292              	.LVL10:
 293              	#NO_APP
 294              	.L5:
 295              	.LBE68:
 106:src/riscv.cpp ****         w_sstatus(sstatus);
 296              		.loc 1 106 9
 106:src/riscv.cpp ****         w_sstatus(sstatus);
 297              		.loc 1 106 18 is_stmt 0
 298 0108 833784F8 		ld	a5,-120(s0)
 299              	.LVL11:
 300              	.LBB69:
 301              	.LBB70:
 188:src/../h/riscv.hpp **** }
 302              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 303              		.loc 2 188 77 is_stmt 0
GAS LISTING /tmp/cc8EM8XN.s 			page 13


 304              	#APP
 305              	# 188 "src/../h/riscv.hpp" 1
 306              		csrw sstatus, a5
 307              	# 0 "" 2
 308              	.LVL12:
 309              	#NO_APP
 310              	.LBE70:
 311              	.LBE69:
 107:src/riscv.cpp ****         w_sepc(sepc);
 312              		.loc 1 107 9 is_stmt 1
 107:src/riscv.cpp ****         w_sepc(sepc);
 313              		.loc 1 107 15 is_stmt 0
 314 0110 833704F8 		ld	a5,-128(s0)
 315              	.LVL13:
 316              	.LBB71:
 317              	.LBB72:
 120:src/../h/riscv.hpp **** }
 318              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 319              		.loc 2 120 65 is_stmt 0
 320              	#APP
 321              	# 120 "src/../h/riscv.hpp" 1
 322              		csrw sepc, a5
 323              	# 0 "" 2
 324              	.LVL14:
 325              	#NO_APP
 326              	.L3:
 327              	.LBE72:
 328              	.LBE71:
 329              	.LBE63:
 330              	.LBE77:
 331              		.loc 1 134 1
 332 0118 83308107 		ld	ra,120(sp)
 333              		.cfi_remember_state
 334              		.cfi_restore 1
 335 011c 03340107 		ld	s0,112(sp)
 336              		.cfi_restore 8
 337              		.cfi_def_cfa 2, 128
 338 0120 83348106 		ld	s1,104(sp)
 339              		.cfi_restore 9
 340 0124 13010108 		addi	sp,sp,128
 341              		.cfi_def_cfa_offset 0
 342 0128 67800000 		jr	ra
 343              	.LVL15:
 344              	.L14:
 345              		.cfi_restore_state
 346              	.LBB78:
 347              	.LBB74:
 348              	.LBB73:
  35:src/riscv.cpp ****             case 0x02:
 349              		.loc 1 35 13 is_stmt 1
  36:src/riscv.cpp ****                 void *freep;
 350              		.loc 1 36 17
  37:src/riscv.cpp ****                 int greska;
 351              		.loc 1 37 17
  38:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(freep));
 352              		.loc 1 38 17
GAS LISTING /tmp/cc8EM8XN.s 			page 14


  38:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(freep));
 353              		.loc 1 38 58 is_stmt 0
 354              	#APP
 355              	# 38 "src/riscv.cpp" 1
 356              		mv a0, a1
 357              	# 0 "" 2
 358              	.LVL16:
  39:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 359              		.loc 1 39 17 is_stmt 1
  39:src/riscv.cpp ****                 greska = MemoryAllocator::mem_free(freep);
 360              		.loc 1 39 51 is_stmt 0
 361              	#NO_APP
 362 0130 97000000 		call	_ZN15MemoryAllocator8mem_freeEPKv@plt
 362      E7800000 
 363              	.LVL17:
  40:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 364              		.loc 1 40 17 is_stmt 1
  40:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(greska));
 365              		.loc 1 40 60 is_stmt 0
 366              	#APP
 367              	# 40 "src/riscv.cpp" 1
  41:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 368              		mv t0, a0
 369              	# 0 "" 2
 370              		.loc 1 41 17 is_stmt 1
  41:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 371              		.loc 1 41 50 is_stmt 0
 372              	# 41 "src/riscv.cpp" 1
  42:src/riscv.cpp ****                 break;
 373              		sd t0, 80(x8)
 374              	# 0 "" 2
 375              		.loc 1 42 17 is_stmt 1
 376              	#NO_APP
 377 0140 6FF09FFC 		j	.L5
 378              	.LVL18:
 379              	.L13:
  44:src/riscv.cpp ****             case 0x11:
 380              		.loc 1 44 13
  45:src/riscv.cpp ****                 TCB::Body start_routine;
 381              		.loc 1 45 17
  46:src/riscv.cpp ****                 void* arg;
 382              		.loc 1 46 17
  47:src/riscv.cpp ****                 thread_t* thandle;
 383              		.loc 1 47 17
  48:src/riscv.cpp ****                 void* stek;
 384              		.loc 1 48 17
  49:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
 385              		.loc 1 49 17
  49:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(thandle));
 386              		.loc 1 49 65 is_stmt 0
 387              	#APP
 388              	# 49 "src/riscv.cpp" 1
 389              		ld s1, 88(x8)
 390              	# 0 "" 2
 391              	.LVL19:
  50:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 392              		.loc 1 50 17 is_stmt 1
GAS LISTING /tmp/cc8EM8XN.s 			page 15


  50:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(start_routine));
 393              		.loc 1 50 71 is_stmt 0
 394              	# 50 "src/riscv.cpp" 1
 395              		ld a0, 96(x8)
 396              	# 0 "" 2
 397              	.LVL20:
  51:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 398              		.loc 1 51 17 is_stmt 1
  51:src/riscv.cpp ****                 __asm__ volatile("ld %0, 104(x8)": "=r"(arg));
 399              		.loc 1 51 62 is_stmt 0
 400              	# 51 "src/riscv.cpp" 1
 401              		ld a1, 104(x8)
 402              	# 0 "" 2
 403              	.LVL21:
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
 404              		.loc 1 52 17 is_stmt 1
  52:src/riscv.cpp ****                 __asm__ volatile("ld %0, 112(x8)": "=r"(stek));
 405              		.loc 1 52 63 is_stmt 0
 406              	# 52 "src/riscv.cpp" 1
 407              		ld a2, 112(x8)
 408              	# 0 "" 2
 409              	.LVL22:
  53:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 410              		.loc 1 53 17 is_stmt 1
  53:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 411              		.loc 1 53 45 is_stmt 0
 412              	#NO_APP
 413 0154 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_@plt
 413      E7800000 
 414              	.LVL23:
  53:src/riscv.cpp ****                 *thandle = TCB::createThread(start_routine,arg, stek);
 415              		.loc 1 53 26
 416 015c 23B0A400 		sd	a0,0(s1)
  54:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
 417              		.loc 1 54 17 is_stmt 1
 418 0160 630A0500 		beqz	a0,.L21
  54:src/riscv.cpp ****                 if(*thandle != nullptr) ret =0;
 419              		.loc 1 54 45 is_stmt 0
 420 0164 93070000 		li	a5,0
 421              	.L16:
 422              	.LVL24:
  57:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 423              		.loc 1 57 17 is_stmt 1
  57:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 424              		.loc 1 57 57 is_stmt 0
 425              	#APP
 426              	# 57 "src/riscv.cpp" 1
  58:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 427              		mv t0, a5
 428              	# 0 "" 2
 429              		.loc 1 58 17 is_stmt 1
  58:src/riscv.cpp ****                 __asm__ volatile("sd t0, 80(x8)");
 430              		.loc 1 58 50 is_stmt 0
 431              	# 58 "src/riscv.cpp" 1
  59:src/riscv.cpp ****                 break;
 432              		sd t0, 80(x8)
 433              	# 0 "" 2
GAS LISTING /tmp/cc8EM8XN.s 			page 16


 434              		.loc 1 59 17 is_stmt 1
 435              	#NO_APP
 436 0170 6FF09FF9 		j	.L5
 437              	.LVL25:
 438              	.L21:
  55:src/riscv.cpp ****                 else ret = -1;
 439              		.loc 1 55 26 is_stmt 0
 440 0174 9307F0FF 		li	a5,-1
 441 0178 6FF01FFF 		j	.L16
 442              	.LVL26:
 443              	.L12:
  61:src/riscv.cpp ****             case 0x12:
 444              		.loc 1 61 13 is_stmt 1
  62:src/riscv.cpp ****                 ret = TCB::exitThread();
 445              		.loc 1 62 17
  62:src/riscv.cpp ****                 ret = TCB::exitThread();
 446              		.loc 1 62 38 is_stmt 0
 447 017c 97000000 		call	_ZN3TCB10exitThreadEv@plt
 447      E7800000 
 448              	.LVL27:
  63:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 449              		.loc 1 63 17 is_stmt 1
  63:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 450              		.loc 1 63 57 is_stmt 0
 451              	#APP
 452              	# 63 "src/riscv.cpp" 1
  64:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 453              		mv t0, a0
 454              	# 0 "" 2
 455              		.loc 1 64 17 is_stmt 1
  64:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 456              		.loc 1 64 50 is_stmt 0
 457              	# 64 "src/riscv.cpp" 1
  65:src/riscv.cpp ****                 break;
 458              		sw t0, 80(x8)
 459              	# 0 "" 2
 460              		.loc 1 65 17 is_stmt 1
 461              	#NO_APP
 462 018c 6FF0DFF7 		j	.L5
 463              	.LVL28:
 464              	.L11:
  67:src/riscv.cpp ****             case 0x13:
 465              		.loc 1 67 13
  68:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 466              		.loc 1 68 17
  68:src/riscv.cpp ****                 TCB::timeSliceCounter=0;
 467              		.loc 1 68 38 is_stmt 0
 468 0190 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 468      83B70700 
 469 0198 23B00700 		sd	zero,0(a5)
  69:src/riscv.cpp ****                 TCB::dispatch();
 470              		.loc 1 69 17 is_stmt 1
  69:src/riscv.cpp ****                 TCB::dispatch();
 471              		.loc 1 69 30 is_stmt 0
 472 019c 97000000 		call	_ZN3TCB8dispatchEv@plt
 472      E7800000 
 473              	.LVL29:
GAS LISTING /tmp/cc8EM8XN.s 			page 17


  70:src/riscv.cpp ****                 break;
 474              		.loc 1 70 17 is_stmt 1
 475 01a4 6FF05FF6 		j	.L5
 476              	.LVL30:
 477              	.L10:
  72:src/riscv.cpp ****             case 0x21:
 478              		.loc 1 72 13
  73:src/riscv.cpp ****                 int val;
 479              		.loc 1 73 17
  74:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 480              		.loc 1 74 17
  74:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 481              		.loc 1 74 65 is_stmt 0
 482              	#APP
 483              	# 74 "src/riscv.cpp" 1
 484              		ld s1, 88(x8)
 485              	# 0 "" 2
 486              	.LVL31:
  75:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
 487              		.loc 1 75 17 is_stmt 1
  75:src/riscv.cpp ****                 __asm__ volatile("ld %0, 96(x8)": "=r"(val));
 488              		.loc 1 75 61 is_stmt 0
 489              	# 75 "src/riscv.cpp" 1
 490              		ld a0, 96(x8)
 491              	# 0 "" 2
 492              	.LVL32:
  76:src/riscv.cpp ****                 *shandle = sem::openSemaphore(val);
 493              		.loc 1 76 17 is_stmt 1
  76:src/riscv.cpp ****                 *shandle = sem::openSemaphore(val);
 494              		.loc 1 76 46 is_stmt 0
 495              	#NO_APP
 496 01b0 1B050500 		sext.w	a0,a0
 497 01b4 97000000 		call	_ZN3sem13openSemaphoreEi@plt
 497      E7800000 
 498              	.LVL33:
  76:src/riscv.cpp ****                 *shandle = sem::openSemaphore(val);
 499              		.loc 1 76 26
 500 01bc 23B0A400 		sd	a0,0(s1)
  77:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
 501              		.loc 1 77 17 is_stmt 1
 502 01c0 630A0500 		beqz	a0,.L22
  77:src/riscv.cpp ****                 if(*shandle != nullptr) ret =0;
 503              		.loc 1 77 45 is_stmt 0
 504 01c4 93070000 		li	a5,0
 505              	.L17:
 506              	.LVL34:
  79:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 507              		.loc 1 79 17 is_stmt 1
  79:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 508              		.loc 1 79 57 is_stmt 0
 509              	#APP
 510              	# 79 "src/riscv.cpp" 1
  80:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 511              		mv t0, a5
 512              	# 0 "" 2
 513              		.loc 1 80 17 is_stmt 1
  80:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
GAS LISTING /tmp/cc8EM8XN.s 			page 18


 514              		.loc 1 80 50 is_stmt 0
 515              	# 80 "src/riscv.cpp" 1
  81:src/riscv.cpp ****                 break;
 516              		sw t0, 80(x8)
 517              	# 0 "" 2
 518              		.loc 1 81 17 is_stmt 1
 519              	#NO_APP
 520 01d0 6FF09FF3 		j	.L5
 521              	.LVL35:
 522              	.L22:
  78:src/riscv.cpp ****                 else ret = -1;
 523              		.loc 1 78 26 is_stmt 0
 524 01d4 9307F0FF 		li	a5,-1
 525 01d8 6FF01FFF 		j	.L17
 526              	.LVL36:
 527              	.L9:
  83:src/riscv.cpp ****             case 0x22:
 528              		.loc 1 83 13 is_stmt 1
  84:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 529              		.loc 1 84 17
  84:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 530              		.loc 1 84 65 is_stmt 0
 531              	#APP
 532              	# 84 "src/riscv.cpp" 1
 533              		ld a5, 88(x8)
 534              	# 0 "" 2
 535              	.LVL37:
  85:src/riscv.cpp ****                 ret = (*shandle)->sem::closeSemaphore();
 536              		.loc 1 85 17 is_stmt 1
  85:src/riscv.cpp ****                 ret = (*shandle)->sem::closeSemaphore();
 537              		.loc 1 85 54 is_stmt 0
 538              	#NO_APP
 539 01e0 03B50700 		ld	a0,0(a5)
 540              	.LVL38:
 541 01e4 97000000 		call	_ZN3sem14closeSemaphoreEv@plt
 541      E7800000 
 542              	.LVL39:
  86:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 543              		.loc 1 86 17 is_stmt 1
  86:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 544              		.loc 1 86 57 is_stmt 0
 545              	#APP
 546              	# 86 "src/riscv.cpp" 1
  87:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 547              		mv t0, a0
 548              	# 0 "" 2
 549              		.loc 1 87 17 is_stmt 1
  87:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 550              		.loc 1 87 50 is_stmt 0
 551              	# 87 "src/riscv.cpp" 1
  88:src/riscv.cpp ****                 break;
 552              		sw t0, 80(x8)
 553              	# 0 "" 2
 554              		.loc 1 88 17 is_stmt 1
 555              	#NO_APP
 556 01f4 6FF05FF1 		j	.L5
 557              	.LVL40:
GAS LISTING /tmp/cc8EM8XN.s 			page 19


 558              	.L8:
  89:src/riscv.cpp ****             case 0x23:
 559              		.loc 1 89 13
  90:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 560              		.loc 1 90 17
  90:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 561              		.loc 1 90 65 is_stmt 0
 562              	#APP
 563              	# 90 "src/riscv.cpp" 1
 564              		ld a5, 88(x8)
 565              	# 0 "" 2
 566              	.LVL41:
  91:src/riscv.cpp ****                 ret = (*shandle)->sem::wait();
 567              		.loc 1 91 17 is_stmt 1
  91:src/riscv.cpp ****                 ret = (*shandle)->sem::wait();
 568              		.loc 1 91 44 is_stmt 0
 569              	#NO_APP
 570 01fc 03B50700 		ld	a0,0(a5)
 571              	.LVL42:
 572 0200 97000000 		call	_ZN3sem4waitEv@plt
 572      E7800000 
 573              	.LVL43:
  92:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 574              		.loc 1 92 17 is_stmt 1
  92:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 575              		.loc 1 92 57 is_stmt 0
 576              	#APP
 577              	# 92 "src/riscv.cpp" 1
  93:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 578              		mv t0, a0
 579              	# 0 "" 2
 580              		.loc 1 93 17 is_stmt 1
  93:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 581              		.loc 1 93 50 is_stmt 0
 582              	# 93 "src/riscv.cpp" 1
  94:src/riscv.cpp ****                 break;
 583              		sw t0, 80(x8)
 584              	# 0 "" 2
 585              		.loc 1 94 17 is_stmt 1
 586              	#NO_APP
 587 0210 6FF09FEF 		j	.L5
 588              	.LVL44:
 589              	.L6:
  95:src/riscv.cpp ****             case 0x24:
 590              		.loc 1 95 13
  96:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 591              		.loc 1 96 17
  96:src/riscv.cpp ****                 __asm__ volatile("ld %0, 88(x8)": "=r"(shandle));
 592              		.loc 1 96 65 is_stmt 0
 593              	#APP
 594              	# 96 "src/riscv.cpp" 1
 595              		ld a5, 88(x8)
 596              	# 0 "" 2
 597              	.LVL45:
  97:src/riscv.cpp ****                 ret = (*shandle)->sem::signal();
 598              		.loc 1 97 17 is_stmt 1
  97:src/riscv.cpp ****                 ret = (*shandle)->sem::signal();
GAS LISTING /tmp/cc8EM8XN.s 			page 20


 599              		.loc 1 97 46 is_stmt 0
 600              	#NO_APP
 601 0218 03B50700 		ld	a0,0(a5)
 602              	.LVL46:
 603 021c 97000000 		call	_ZN3sem6signalEv@plt
 603      E7800000 
 604              	.LVL47:
  98:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 605              		.loc 1 98 17 is_stmt 1
  98:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" ::"r"(ret));
 606              		.loc 1 98 57 is_stmt 0
 607              	#APP
 608              	# 98 "src/riscv.cpp" 1
  99:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 609              		mv t0, a0
 610              	# 0 "" 2
 611              		.loc 1 99 17 is_stmt 1
  99:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(x8)");
 612              		.loc 1 99 50 is_stmt 0
 613              	# 99 "src/riscv.cpp" 1
 100:src/riscv.cpp ****                 break;
 614              		sw t0, 80(x8)
 615              	# 0 "" 2
 616              		.loc 1 100 17 is_stmt 1
 617              	#NO_APP
 618 022c 6FF0DFED 		j	.L5
 619              	.LVL48:
 620              	.L25:
 621              	.LBE73:
 622              	.LBE74:
 623              	.LBB75:
 624              	.LBB48:
 110:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 625              		.loc 1 110 9
 626              	.LBB49:
 627              	.LBB50:
 154:src/../h/riscv.hpp **** }
 628              		.loc 2 154 5
 154:src/../h/riscv.hpp **** }
 629              		.loc 2 154 64 is_stmt 0
 630 0230 93072000 		li	a5,2
 631              	#APP
 632              	# 154 "src/../h/riscv.hpp" 1
 633              		csrc sip, a5
 634              	# 0 "" 2
 635              	.LVL49:
 636              	#NO_APP
 637              	.LBE50:
 638              	.LBE49:
 111:src/riscv.cpp ****         TCB::timeSliceCounter++;
 639              		.loc 1 111 9 is_stmt 1
 111:src/riscv.cpp ****         TCB::timeSliceCounter++;
 640              		.loc 1 111 30 is_stmt 0
 641 0238 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 641      03370700 
 642 0240 83370700 		ld	a5,0(a4)
 643 0244 93871700 		addi	a5,a5,1
GAS LISTING /tmp/cc8EM8XN.s 			page 21


 644 0248 2330F700 		sd	a5,0(a4)
 113:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 645              		.loc 1 113 9 is_stmt 1
 646              	.LBB51:
 113:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 647              		.loc 1 113 63 is_stmt 0
 648 024c 17070000 		la	a4,_ZN3TCB7runningE
 648      03370700 
 649 0254 03370700 		ld	a4,0(a4)
 650              	.LVL50:
 651              	.LBB52:
 652              	.LBB53:
 653              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 5/19/24.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJEKAT_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJEKAT_TCB_HPP
   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "riscv.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** class TCB {
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp ****     void *operator new(size_t n);
  14:src/../h/tcb.hpp **** 
  15:src/../h/tcb.hpp ****     void *operator new[](size_t n);
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept;
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void operator delete[](void *p) noexcept;
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp **** public:
  22:src/../h/tcb.hpp ****     ~TCB(){TCB::operator delete[](stack);}
  23:src/../h/tcb.hpp ****     bool isFinished() const {return finished;}
  24:src/../h/tcb.hpp ****     void setFinished(bool f) { TCB::finished = f;}
  25:src/../h/tcb.hpp **** 
  26:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 654              		.loc 3 26 35 is_stmt 1
 655              		.loc 3 26 42 is_stmt 0
 656 0258 03378702 		ld	a4,40(a4)
 657              	.LVL51:
 658              	.LBE53:
 659              	.LBE52:
 113:src/riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 660              		.loc 1 113 9
 661 025c E3EEE7EA 		bltu	a5,a4,.L3
 662              	.LBB54:
 115:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 663              		.loc 1 115 13 is_stmt 1
 664              	.LBB55:
 665              	.LBB56:
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 666              		.loc 2 113 5
 114:src/../h/riscv.hpp ****     return sepc;
 667              		.loc 2 114 5
GAS LISTING /tmp/cc8EM8XN.s 			page 22


 114:src/../h/riscv.hpp ****     return sepc;
 668              		.loc 2 114 64 is_stmt 0
 669              	#APP
 670              	# 114 "src/../h/riscv.hpp" 1
 671              		csrr a5, sepc
 672              	# 0 "" 2
 673              	#NO_APP
 674 0264 2334F4FC 		sd	a5,-56(s0)
 115:src/../h/riscv.hpp **** }
 675              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 676              		.loc 2 115 12 is_stmt 0
 677 0268 833784FC 		ld	a5,-56(s0)
 678              	.LBE56:
 679              	.LBE55:
 115:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 680              		.loc 1 115 43
 681 026c 2338F4F8 		sd	a5,-112(s0)
 116:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 682              		.loc 1 116 13 is_stmt 1
 683              	.LBB57:
 684              	.LBB58:
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 685              		.loc 2 181 5
 182:src/../h/riscv.hpp ****     return sstatus;
 686              		.loc 2 182 5
 182:src/../h/riscv.hpp ****     return sstatus;
 687              		.loc 2 182 76 is_stmt 0
 688              	#APP
 689              	# 182 "src/../h/riscv.hpp" 1
 690              		csrr a5, sstatus
 691              	# 0 "" 2
 692              	#NO_APP
 693 0274 2330F4FC 		sd	a5,-64(s0)
 183:src/../h/riscv.hpp **** }
 694              		.loc 2 183 5 is_stmt 1
 183:src/../h/riscv.hpp **** }
 695              		.loc 2 183 12 is_stmt 0
 696 0278 833704FC 		ld	a5,-64(s0)
 697              	.LBE58:
 698              	.LBE57:
 116:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 699              		.loc 1 116 49
 700 027c 233CF4F8 		sd	a5,-104(s0)
 117:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 701              		.loc 1 117 13 is_stmt 1
 117:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 702              		.loc 1 117 34 is_stmt 0
 703 0280 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 703      83B70700 
 704 0288 23B00700 		sd	zero,0(a5)
 118:src/riscv.cpp ****             TCB::dispatch();
 705              		.loc 1 118 13 is_stmt 1
 118:src/riscv.cpp ****             TCB::dispatch();
 706              		.loc 1 118 26 is_stmt 0
 707 028c 97000000 		call	_ZN3TCB8dispatchEv@plt
 707      E7800000 
GAS LISTING /tmp/cc8EM8XN.s 			page 23


 708              	.LVL52:
 119:src/riscv.cpp ****             w_sstatus(sstatus);
 709              		.loc 1 119 13 is_stmt 1
 119:src/riscv.cpp ****             w_sstatus(sstatus);
 710              		.loc 1 119 22 is_stmt 0
 711 0294 833784F9 		ld	a5,-104(s0)
 712              	.LVL53:
 713              	.LBB59:
 714              	.LBB60:
 188:src/../h/riscv.hpp **** }
 715              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 716              		.loc 2 188 77 is_stmt 0
 717              	#APP
 718              	# 188 "src/../h/riscv.hpp" 1
 719              		csrw sstatus, a5
 720              	# 0 "" 2
 721              	.LVL54:
 722              	#NO_APP
 723              	.LBE60:
 724              	.LBE59:
 120:src/riscv.cpp ****             w_sepc(sepc);
 725              		.loc 1 120 13 is_stmt 1
 120:src/riscv.cpp ****             w_sepc(sepc);
 726              		.loc 1 120 19 is_stmt 0
 727 029c 833704F9 		ld	a5,-112(s0)
 728              	.LVL55:
 729              	.LBB61:
 730              	.LBB62:
 120:src/../h/riscv.hpp **** }
 731              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 732              		.loc 2 120 65 is_stmt 0
 733              	#APP
 734              	# 120 "src/../h/riscv.hpp" 1
 121:src/../h/riscv.hpp **** 
 735              		csrw sepc, a5
 736              	# 0 "" 2
 737              		.loc 2 121 1
 738              	#NO_APP
 739 02a4 6FF05FE7 		j	.L3
 740              	.LVL56:
 741              	.L26:
 742              	.LBE62:
 743              	.LBE61:
 744              	.LBE54:
 745              	.LBE51:
 746              	.LBE48:
 127:src/riscv.cpp ****         console_handler();
 747              		.loc 1 127 9 is_stmt 1
 127:src/riscv.cpp ****         console_handler();
 748              		.loc 1 127 24 is_stmt 0
 749 02a8 97000000 		call	console_handler@plt
 749      E7800000 
 750              	.LVL57:
 751 02b0 6FF09FE6 		j	.L3
 752              	.LBE75:
GAS LISTING /tmp/cc8EM8XN.s 			page 24


 753              	.LBE78:
 754              		.cfi_endproc
 755              	.LFE44:
 757              	.Letext0:
 758              		.file 4 "src/../h/../lib/hw.h"
 759              		.file 5 "src/../h/MemoryAllocator.hpp"
 760              		.file 6 "src/../h/list.hpp"
 761              		.file 7 "src/../h/semaphore.hpp"
 762              		.file 8 "src/../h/syscall_c.hpp"
 763              		.file 9 "src/../h/print.hpp"
 764              		.file 10 "src/../h/../lib/console.h"
GAS LISTING /tmp/cc8EM8XN.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/cc8EM8XN.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cc8EM8XN.s:13     .text:0000000000000000 .L0 
     /tmp/cc8EM8XN.s:14     .text:0000000000000000 .L0 
     /tmp/cc8EM8XN.s:15     .text:0000000000000004 .L0 
     /tmp/cc8EM8XN.s:17     .text:0000000000000008 .L0 
     /tmp/cc8EM8XN.s:19     .text:000000000000000c .L0 
     /tmp/cc8EM8XN.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:10     .text:000000000000000c .L0 
     /tmp/cc8EM8XN.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:11     .text:0000000000000010 .L0 
     /tmp/cc8EM8XN.s:33     .text:0000000000000014 .L0 
     /tmp/cc8EM8XN.s:34     .text:0000000000000018 .L0 
     /tmp/cc8EM8XN.s:35     .text:0000000000000018 .L0 
     /tmp/cc8EM8XN.s:37     .text:000000000000001c .L0 
     /tmp/cc8EM8XN.s:39     .text:0000000000000020 .L0 
     /tmp/cc8EM8XN.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/cc8EM8XN.s:48     .text:0000000000000020 .L0 
     /tmp/cc8EM8XN.s:49     .text:0000000000000020 .L0 
     /tmp/cc8EM8XN.s:50     .text:0000000000000024 .L0 
     /tmp/cc8EM8XN.s:54     .text:0000000000000030 .L0 
     /tmp/cc8EM8XN.s:55     .text:0000000000000030 .L0 
     /tmp/cc8EM8XN.s:56     .text:0000000000000030 .L0 
     /tmp/cc8EM8XN.s:58     .text:0000000000000034 .L0 
     /tmp/cc8EM8XN.s:63     .text:0000000000000034 .L0 
     /tmp/cc8EM8XN.s:64     .text:0000000000000034 .L0 
     /tmp/cc8EM8XN.s:65     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:195    .text:0000000000000034 .L0 
     /tmp/cc8EM8XN.s:73     .text:000000000000003c .L0 
     /tmp/cc8EM8XN.s:74     .text:000000000000003c .L0 
     /tmp/cc8EM8XN.s:81     .text:0000000000000040 .L0 
     /tmp/cc8EM8XN.s:82     .text:0000000000000040 .L0 
     /tmp/cc8EM8XN.s:83     .text:0000000000000040 .L0 
  src/../h/riscv.hpp:102    .text:0000000000000040 .L0 
     /tmp/cc8EM8XN.s:91     .text:0000000000000048 .L0 
     /tmp/cc8EM8XN.s:92     .text:0000000000000048 .L0 
     /tmp/cc8EM8XN.s:98     .text:000000000000004c .L0 
     /tmp/cc8EM8XN.s:99     .text:000000000000004c .L0 
     /tmp/cc8EM8XN.s:101    .text:0000000000000050 .L0 
     /tmp/cc8EM8XN.s:107    .text:0000000000000058 .L0 
     /tmp/cc8EM8XN.s:113    .text:0000000000000068 .L0 
     /tmp/cc8EM8XN.s:118    .text:0000000000000078 .L0 
     /tmp/cc8EM8XN.s:119    .text:0000000000000078 .L0 
     /tmp/cc8EM8XN.s:124    .text:0000000000000080 .L0 
     /tmp/cc8EM8XN.s:125    .text:0000000000000080 .L0 
     /tmp/cc8EM8XN.s:126    .text:0000000000000080 .L0 
  src/../h/riscv.hpp:114    .text:0000000000000080 .L0 
     /tmp/cc8EM8XN.s:134    .text:0000000000000088 .L0 
     /tmp/cc8EM8XN.s:135    .text:0000000000000088 .L0 
     /tmp/cc8EM8XN.s:139    .text:000000000000008c .L0 
     /tmp/cc8EM8XN.s:144    .text:0000000000000094 .L0 
     /tmp/cc8EM8XN.s:145    .text:0000000000000094 .L0 
     /tmp/cc8EM8XN.s:146    .text:0000000000000094 .L0 
  src/../h/riscv.hpp:138    .text:0000000000000094 .L0 
     /tmp/cc8EM8XN.s:154    .text:000000000000009c .L0 
     /tmp/cc8EM8XN.s:155    .text:000000000000009c .L0 
GAS LISTING /tmp/cc8EM8XN.s 			page 26


     /tmp/cc8EM8XN.s:159    .text:00000000000000a0 .L0 
     /tmp/cc8EM8XN.s:164    .text:00000000000000a8 .L0 
     /tmp/cc8EM8XN.s:172    .text:00000000000000ac .L0 
     /tmp/cc8EM8XN.s:173    .text:00000000000000ac .L0 
     /tmp/cc8EM8XN.s:174    .text:00000000000000ac .L0 
  src/../h/riscv.hpp:114    .text:00000000000000ac .L0 
     /tmp/cc8EM8XN.s:182    .text:00000000000000b4 .L0 
     /tmp/cc8EM8XN.s:183    .text:00000000000000b4 .L0 
     /tmp/cc8EM8XN.s:187    .text:00000000000000b8 .L0 
     /tmp/cc8EM8XN.s:189    .text:00000000000000bc .L0 
     /tmp/cc8EM8XN.s:193    .text:00000000000000c0 .L0 
     /tmp/cc8EM8XN.s:194    .text:00000000000000c0 .L0 
     /tmp/cc8EM8XN.s:195    .text:00000000000000c0 .L0 
  src/../h/riscv.hpp:182    .text:00000000000000c0 .L0 
     /tmp/cc8EM8XN.s:203    .text:00000000000000c8 .L0 
     /tmp/cc8EM8XN.s:204    .text:00000000000000c8 .L0 
     /tmp/cc8EM8XN.s:208    .text:00000000000000cc .L0 
     /tmp/cc8EM8XN.s:210    .text:00000000000000d0 .L0 
     /tmp/cc8EM8XN.s:211    .text:00000000000000d0 .L0 
     /tmp/cc8EM8XN.s:212    .text:00000000000000d0 .L0 
     /tmp/cc8EM8XN.s:266    .text:00000000000000f4 .L0 
     /tmp/cc8EM8XN.s:267    .text:00000000000000f4 .L0 
     /tmp/cc8EM8XN.s:268    .text:00000000000000f4 .L0 
     /tmp/cc8EM8XN.s:269    .text:00000000000000f4 .L0 
       src/riscv.cpp:29     .text:00000000000000f4 .L0 
     /tmp/cc8EM8XN.s:276    .text:00000000000000f8 .L0 
     /tmp/cc8EM8XN.s:278    .text:00000000000000f8 .L0 
     /tmp/cc8EM8XN.s:281    .text:0000000000000100 .L0 
       src/riscv.cpp:31     .text:0000000000000100 .L0 
     /tmp/cc8EM8XN.s:287    .text:0000000000000104 .L0 
       src/riscv.cpp:32     .text:0000000000000104 .L0 
     /tmp/cc8EM8XN.s:296    .text:0000000000000108 .L0 
     /tmp/cc8EM8XN.s:297    .text:0000000000000108 .L0 
     /tmp/cc8EM8XN.s:298    .text:0000000000000108 .L0 
     /tmp/cc8EM8XN.s:303    .text:000000000000010c .L0 
  src/../h/riscv.hpp:188    .text:000000000000010c .L0 
     /tmp/cc8EM8XN.s:313    .text:0000000000000110 .L0 
     /tmp/cc8EM8XN.s:314    .text:0000000000000110 .L0 
     /tmp/cc8EM8XN.s:319    .text:0000000000000114 .L0 
  src/../h/riscv.hpp:120    .text:0000000000000114 .L0 
     /tmp/cc8EM8XN.s:332    .text:0000000000000118 .L0 
     /tmp/cc8EM8XN.s:333    .text:000000000000011c .L0 
     /tmp/cc8EM8XN.s:334    .text:000000000000011c .L0 
     /tmp/cc8EM8XN.s:336    .text:0000000000000120 .L0 
     /tmp/cc8EM8XN.s:337    .text:0000000000000120 .L0 
     /tmp/cc8EM8XN.s:339    .text:0000000000000124 .L0 
     /tmp/cc8EM8XN.s:341    .text:0000000000000128 .L0 
     /tmp/cc8EM8XN.s:345    .text:000000000000012c .L0 
     /tmp/cc8EM8XN.s:350    .text:000000000000012c .L0 
     /tmp/cc8EM8XN.s:351    .text:000000000000012c .L0 
     /tmp/cc8EM8XN.s:352    .text:000000000000012c .L0 
     /tmp/cc8EM8XN.s:353    .text:000000000000012c .L0 
       src/riscv.cpp:38     .text:000000000000012c .L0 
     /tmp/cc8EM8XN.s:360    .text:0000000000000130 .L0 
     /tmp/cc8EM8XN.s:362    .text:0000000000000130 .L0 
     /tmp/cc8EM8XN.s:365    .text:0000000000000138 .L0 
       src/riscv.cpp:40     .text:0000000000000138 .L0 
GAS LISTING /tmp/cc8EM8XN.s 			page 27


     /tmp/cc8EM8XN.s:371    .text:000000000000013c .L0 
       src/riscv.cpp:41     .text:000000000000013c .L0 
     /tmp/cc8EM8XN.s:377    .text:0000000000000140 .L0 
     /tmp/cc8EM8XN.s:381    .text:0000000000000144 .L0 
     /tmp/cc8EM8XN.s:382    .text:0000000000000144 .L0 
     /tmp/cc8EM8XN.s:383    .text:0000000000000144 .L0 
     /tmp/cc8EM8XN.s:384    .text:0000000000000144 .L0 
     /tmp/cc8EM8XN.s:385    .text:0000000000000144 .L0 
     /tmp/cc8EM8XN.s:386    .text:0000000000000144 .L0 
       src/riscv.cpp:49     .text:0000000000000144 .L0 
     /tmp/cc8EM8XN.s:393    .text:0000000000000148 .L0 
       src/riscv.cpp:50     .text:0000000000000148 .L0 
     /tmp/cc8EM8XN.s:399    .text:000000000000014c .L0 
       src/riscv.cpp:51     .text:000000000000014c .L0 
     /tmp/cc8EM8XN.s:405    .text:0000000000000150 .L0 
       src/riscv.cpp:52     .text:0000000000000150 .L0 
     /tmp/cc8EM8XN.s:411    .text:0000000000000154 .L0 
     /tmp/cc8EM8XN.s:413    .text:0000000000000154 .L0 
     /tmp/cc8EM8XN.s:416    .text:000000000000015c .L0 
     /tmp/cc8EM8XN.s:418    .text:0000000000000160 .L0 
     /tmp/cc8EM8XN.s:420    .text:0000000000000164 .L0 
     /tmp/cc8EM8XN.s:424    .text:0000000000000168 .L0 
       src/riscv.cpp:57     .text:0000000000000168 .L0 
     /tmp/cc8EM8XN.s:430    .text:000000000000016c .L0 
       src/riscv.cpp:58     .text:000000000000016c .L0 
     /tmp/cc8EM8XN.s:436    .text:0000000000000170 .L0 
     /tmp/cc8EM8XN.s:440    .text:0000000000000174 .L0 
     /tmp/cc8EM8XN.s:445    .text:000000000000017c .L0 
     /tmp/cc8EM8XN.s:446    .text:000000000000017c .L0 
     /tmp/cc8EM8XN.s:447    .text:000000000000017c .L0 
     /tmp/cc8EM8XN.s:450    .text:0000000000000184 .L0 
       src/riscv.cpp:63     .text:0000000000000184 .L0 
     /tmp/cc8EM8XN.s:456    .text:0000000000000188 .L0 
       src/riscv.cpp:64     .text:0000000000000188 .L0 
     /tmp/cc8EM8XN.s:462    .text:000000000000018c .L0 
     /tmp/cc8EM8XN.s:466    .text:0000000000000190 .L0 
     /tmp/cc8EM8XN.s:467    .text:0000000000000190 .L0 
     /tmp/cc8EM8XN.s:468    .text:0000000000000190 .L0 
     /tmp/cc8EM8XN.s:471    .text:000000000000019c .L0 
     /tmp/cc8EM8XN.s:472    .text:000000000000019c .L0 
     /tmp/cc8EM8XN.s:475    .text:00000000000001a4 .L0 
     /tmp/cc8EM8XN.s:479    .text:00000000000001a8 .L0 
     /tmp/cc8EM8XN.s:480    .text:00000000000001a8 .L0 
     /tmp/cc8EM8XN.s:481    .text:00000000000001a8 .L0 
       src/riscv.cpp:74     .text:00000000000001a8 .L0 
     /tmp/cc8EM8XN.s:488    .text:00000000000001ac .L0 
       src/riscv.cpp:75     .text:00000000000001ac .L0 
     /tmp/cc8EM8XN.s:494    .text:00000000000001b0 .L0 
     /tmp/cc8EM8XN.s:496    .text:00000000000001b0 .L0 
     /tmp/cc8EM8XN.s:500    .text:00000000000001bc .L0 
     /tmp/cc8EM8XN.s:502    .text:00000000000001c0 .L0 
     /tmp/cc8EM8XN.s:504    .text:00000000000001c4 .L0 
     /tmp/cc8EM8XN.s:508    .text:00000000000001c8 .L0 
       src/riscv.cpp:79     .text:00000000000001c8 .L0 
     /tmp/cc8EM8XN.s:514    .text:00000000000001cc .L0 
       src/riscv.cpp:80     .text:00000000000001cc .L0 
     /tmp/cc8EM8XN.s:520    .text:00000000000001d0 .L0 
GAS LISTING /tmp/cc8EM8XN.s 			page 28


     /tmp/cc8EM8XN.s:524    .text:00000000000001d4 .L0 
     /tmp/cc8EM8XN.s:529    .text:00000000000001dc .L0 
     /tmp/cc8EM8XN.s:530    .text:00000000000001dc .L0 
       src/riscv.cpp:84     .text:00000000000001dc .L0 
     /tmp/cc8EM8XN.s:537    .text:00000000000001e0 .L0 
     /tmp/cc8EM8XN.s:539    .text:00000000000001e0 .L0 
     /tmp/cc8EM8XN.s:544    .text:00000000000001ec .L0 
       src/riscv.cpp:86     .text:00000000000001ec .L0 
     /tmp/cc8EM8XN.s:550    .text:00000000000001f0 .L0 
       src/riscv.cpp:87     .text:00000000000001f0 .L0 
     /tmp/cc8EM8XN.s:556    .text:00000000000001f4 .L0 
     /tmp/cc8EM8XN.s:560    .text:00000000000001f8 .L0 
     /tmp/cc8EM8XN.s:561    .text:00000000000001f8 .L0 
       src/riscv.cpp:90     .text:00000000000001f8 .L0 
     /tmp/cc8EM8XN.s:568    .text:00000000000001fc .L0 
     /tmp/cc8EM8XN.s:570    .text:00000000000001fc .L0 
     /tmp/cc8EM8XN.s:575    .text:0000000000000208 .L0 
       src/riscv.cpp:92     .text:0000000000000208 .L0 
     /tmp/cc8EM8XN.s:581    .text:000000000000020c .L0 
       src/riscv.cpp:93     .text:000000000000020c .L0 
     /tmp/cc8EM8XN.s:587    .text:0000000000000210 .L0 
     /tmp/cc8EM8XN.s:591    .text:0000000000000214 .L0 
     /tmp/cc8EM8XN.s:592    .text:0000000000000214 .L0 
       src/riscv.cpp:96     .text:0000000000000214 .L0 
     /tmp/cc8EM8XN.s:599    .text:0000000000000218 .L0 
     /tmp/cc8EM8XN.s:601    .text:0000000000000218 .L0 
     /tmp/cc8EM8XN.s:606    .text:0000000000000224 .L0 
       src/riscv.cpp:98     .text:0000000000000224 .L0 
     /tmp/cc8EM8XN.s:612    .text:0000000000000228 .L0 
       src/riscv.cpp:99     .text:0000000000000228 .L0 
     /tmp/cc8EM8XN.s:618    .text:000000000000022c .L0 
     /tmp/cc8EM8XN.s:628    .text:0000000000000230 .L0 
     /tmp/cc8EM8XN.s:629    .text:0000000000000230 .L0 
     /tmp/cc8EM8XN.s:630    .text:0000000000000230 .L0 
     /tmp/cc8EM8XN.s:640    .text:0000000000000238 .L0 
     /tmp/cc8EM8XN.s:641    .text:0000000000000238 .L0 
     /tmp/cc8EM8XN.s:647    .text:000000000000024c .L0 
     /tmp/cc8EM8XN.s:648    .text:000000000000024c .L0 
     /tmp/cc8EM8XN.s:655    .text:0000000000000258 .L0 
     /tmp/cc8EM8XN.s:656    .text:0000000000000258 .L0 
     /tmp/cc8EM8XN.s:661    .text:000000000000025c .L0 
     /tmp/cc8EM8XN.s:666    .text:0000000000000260 .L0 
     /tmp/cc8EM8XN.s:667    .text:0000000000000260 .L0 
     /tmp/cc8EM8XN.s:668    .text:0000000000000260 .L0 
  src/../h/riscv.hpp:114    .text:0000000000000260 .L0 
     /tmp/cc8EM8XN.s:676    .text:0000000000000268 .L0 
     /tmp/cc8EM8XN.s:677    .text:0000000000000268 .L0 
     /tmp/cc8EM8XN.s:681    .text:000000000000026c .L0 
     /tmp/cc8EM8XN.s:685    .text:0000000000000270 .L0 
     /tmp/cc8EM8XN.s:686    .text:0000000000000270 .L0 
     /tmp/cc8EM8XN.s:687    .text:0000000000000270 .L0 
  src/../h/riscv.hpp:182    .text:0000000000000270 .L0 
     /tmp/cc8EM8XN.s:695    .text:0000000000000278 .L0 
     /tmp/cc8EM8XN.s:696    .text:0000000000000278 .L0 
     /tmp/cc8EM8XN.s:700    .text:000000000000027c .L0 
     /tmp/cc8EM8XN.s:702    .text:0000000000000280 .L0 
     /tmp/cc8EM8XN.s:703    .text:0000000000000280 .L0 
GAS LISTING /tmp/cc8EM8XN.s 			page 29


     /tmp/cc8EM8XN.s:706    .text:000000000000028c .L0 
     /tmp/cc8EM8XN.s:707    .text:000000000000028c .L0 
     /tmp/cc8EM8XN.s:710    .text:0000000000000294 .L0 
     /tmp/cc8EM8XN.s:711    .text:0000000000000294 .L0 
     /tmp/cc8EM8XN.s:716    .text:0000000000000298 .L0 
  src/../h/riscv.hpp:188    .text:0000000000000298 .L0 
     /tmp/cc8EM8XN.s:726    .text:000000000000029c .L0 
     /tmp/cc8EM8XN.s:727    .text:000000000000029c .L0 
     /tmp/cc8EM8XN.s:732    .text:00000000000002a0 .L0 
  src/../h/riscv.hpp:120    .text:00000000000002a0 .L0 
     /tmp/cc8EM8XN.s:739    .text:00000000000002a4 .L0 
     /tmp/cc8EM8XN.s:748    .text:00000000000002a8 .L0 
     /tmp/cc8EM8XN.s:749    .text:00000000000002a8 .L0 
     /tmp/cc8EM8XN.s:754    .text:00000000000002b4 .L0 
     /tmp/cc8EM8XN.s:765    .text:00000000000002b4 .L0 
     /tmp/cc8EM8XN.s:224    .rodata:0000000000000000 .L7
     /tmp/cc8EM8XN.s:216    .text:00000000000000dc .L0 
     /tmp/cc8EM8XN.s:468    .text:0000000000000190 .L0 
     /tmp/cc8EM8XN.s:641    .text:0000000000000238 .L0 
     /tmp/cc8EM8XN.s:648    .text:000000000000024c .L0 
     /tmp/cc8EM8XN.s:703    .text:0000000000000280 .L0 
     /tmp/cc8EM8XN.s:166    .text:00000000000000ac .L24
     /tmp/cc8EM8XN.s:620    .text:0000000000000230 .L25
     /tmp/cc8EM8XN.s:741    .text:00000000000002a8 .L26
     /tmp/cc8EM8XN.s:326    .text:0000000000000118 .L3
     /tmp/cc8EM8XN.s:294    .text:0000000000000108 .L5
     /tmp/cc8EM8XN.s:438    .text:0000000000000174 .L21
     /tmp/cc8EM8XN.s:421    .text:0000000000000168 .L16
     /tmp/cc8EM8XN.s:522    .text:00000000000001d4 .L22
     /tmp/cc8EM8XN.s:505    .text:00000000000001c8 .L17
     /tmp/cc8EM8XN.s:263    .text:00000000000000f4 .L15
     /tmp/cc8EM8XN.s:344    .text:000000000000012c .L14
     /tmp/cc8EM8XN.s:379    .text:0000000000000144 .L13
     /tmp/cc8EM8XN.s:443    .text:000000000000017c .L12
     /tmp/cc8EM8XN.s:464    .text:0000000000000190 .L11
     /tmp/cc8EM8XN.s:477    .text:00000000000001a8 .L10
     /tmp/cc8EM8XN.s:527    .text:00000000000001dc .L9
     /tmp/cc8EM8XN.s:558    .text:00000000000001f8 .L8
     /tmp/cc8EM8XN.s:589    .text:0000000000000214 .L6
     /tmp/cc8EM8XN.s:2457   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc8EM8XN.s:4000   .debug_str:00000000000007dc .LASF182
     /tmp/cc8EM8XN.s:4090   .debug_str:0000000000000aeb .LASF183
     /tmp/cc8EM8XN.s:4098   .debug_str:0000000000000b32 .LASF184
     /tmp/cc8EM8XN.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc8EM8XN.s:757    .text:00000000000002b4 .Letext0
     /tmp/cc8EM8XN.s:3726   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc8EM8XN.s:3846   .debug_str:0000000000000369 .LASF0
     /tmp/cc8EM8XN.s:3878   .debug_str:000000000000045d .LASF1
     /tmp/cc8EM8XN.s:3966   .debug_str:00000000000006ce .LASF2
     /tmp/cc8EM8XN.s:3974   .debug_str:000000000000070b .LASF4
     /tmp/cc8EM8XN.s:3856   .debug_str:00000000000003a9 .LASF3
     /tmp/cc8EM8XN.s:3740   .debug_str:0000000000000075 .LASF5
     /tmp/cc8EM8XN.s:3938   .debug_str:00000000000005dd .LASF6
     /tmp/cc8EM8XN.s:3866   .debug_str:000000000000040c .LASF7
     /tmp/cc8EM8XN.s:3822   .debug_str:00000000000002a9 .LASF8
     /tmp/cc8EM8XN.s:3832   .debug_str:00000000000002f7 .LASF9
     /tmp/cc8EM8XN.s:3766   .debug_str:000000000000011b .LASF10
GAS LISTING /tmp/cc8EM8XN.s 			page 30


     /tmp/cc8EM8XN.s:3814   .debug_str:0000000000000275 .LASF11
     /tmp/cc8EM8XN.s:3780   .debug_str:0000000000000183 .LASF12
     /tmp/cc8EM8XN.s:3764   .debug_str:000000000000010b .LASF13
     /tmp/cc8EM8XN.s:4008   .debug_str:00000000000008c8 .LASF14
     /tmp/cc8EM8XN.s:3800   .debug_str:00000000000001f6 .LASF15
     /tmp/cc8EM8XN.s:3994   .debug_str:00000000000007ab .LASF16
     /tmp/cc8EM8XN.s:3934   .debug_str:00000000000005c1 .LASF26
     /tmp/cc8EM8XN.s:4028   .debug_str:0000000000000939 .LASF55
     /tmp/cc8EM8XN.s:3752   .debug_str:00000000000000b7 .LASF17
     /tmp/cc8EM8XN.s:3876   .debug_str:0000000000000458 .LASF18
     /tmp/cc8EM8XN.s:3794   .debug_str:00000000000001de .LASF19
     /tmp/cc8EM8XN.s:4026   .debug_str:0000000000000934 .LASF28
     /tmp/cc8EM8XN.s:4060   .debug_str:0000000000000a2d .LASF30
     /tmp/cc8EM8XN.s:3784   .debug_str:0000000000000198 .LASF20
     /tmp/cc8EM8XN.s:3870   .debug_str:0000000000000432 .LASF73
     /tmp/cc8EM8XN.s:3984   .debug_str:000000000000073f .LASF75
     /tmp/cc8EM8XN.s:3902   .debug_str:0000000000000500 .LASF21
     /tmp/cc8EM8XN.s:3744   .debug_str:0000000000000087 .LASF23
     /tmp/cc8EM8XN.s:4016   .debug_str:00000000000008f7 .LASF22
     /tmp/cc8EM8XN.s:3946   .debug_str:000000000000062c .LASF24
     /tmp/cc8EM8XN.s:3750   .debug_str:00000000000000b2 .LASF77
     /tmp/cc8EM8XN.s:4106   .debug_str:0000000000000b86 .LASF79
     /tmp/cc8EM8XN.s:3894   .debug_str:00000000000004c5 .LASF25
     /tmp/cc8EM8XN.s:4070   .debug_str:0000000000000a78 .LASF27
     /tmp/cc8EM8XN.s:4108   .debug_str:0000000000000ba2 .LASF29
     /tmp/cc8EM8XN.s:4056   .debug_str:0000000000000a01 .LASF31
     /tmp/cc8EM8XN.s:3758   .debug_str:00000000000000d6 .LASF32
     /tmp/cc8EM8XN.s:4050   .debug_str:00000000000009d6 .LASF33
     /tmp/cc8EM8XN.s:3732   .debug_str:0000000000000017 .LASF34
     /tmp/cc8EM8XN.s:3916   .debug_str:0000000000000542 .LASF36
     /tmp/cc8EM8XN.s:3992   .debug_str:0000000000000798 .LASF35
     /tmp/cc8EM8XN.s:3996   .debug_str:00000000000007c1 .LASF37
     /tmp/cc8EM8XN.s:3782   .debug_str:0000000000000193 .LASF185
     /tmp/cc8EM8XN.s:3812   .debug_str:0000000000000270 .LASF38
     /tmp/cc8EM8XN.s:3914   .debug_str:000000000000053d .LASF39
     /tmp/cc8EM8XN.s:3908   .debug_str:0000000000000519 .LASF40
     /tmp/cc8EM8XN.s:4012   .debug_str:00000000000008db .LASF41
     /tmp/cc8EM8XN.s:3810   .debug_str:0000000000000259 .LASF47
     /tmp/cc8EM8XN.s:3970   .debug_str:00000000000006e9 .LASF186
     /tmp/cc8EM8XN.s:3960   .debug_str:00000000000006a3 .LASF187
     /tmp/cc8EM8XN.s:3872   .debug_str:0000000000000441 .LASF42
     /tmp/cc8EM8XN.s:3762   .debug_str:00000000000000ee .LASF43
     /tmp/cc8EM8XN.s:3892   .debug_str:00000000000004bd .LASF44
     /tmp/cc8EM8XN.s:3804   .debug_str:0000000000000219 .LASF45
     /tmp/cc8EM8XN.s:3936   .debug_str:00000000000005d1 .LASF46
     /tmp/cc8EM8XN.s:4072   .debug_str:0000000000000a82 .LASF48
     /tmp/cc8EM8XN.s:4114   .debug_str:0000000000000bc2 .LASF49
     /tmp/cc8EM8XN.s:4104   .debug_str:0000000000000b6b .LASF50
     /tmp/cc8EM8XN.s:3986   .debug_str:0000000000000766 .LASF51
     /tmp/cc8EM8XN.s:3864   .debug_str:00000000000003ef .LASF52
     /tmp/cc8EM8XN.s:3956   .debug_str:0000000000000692 .LASF53
     /tmp/cc8EM8XN.s:3734   .debug_str:0000000000000027 .LASF54
     /tmp/cc8EM8XN.s:3772   .debug_str:0000000000000147 .LASF56
     /tmp/cc8EM8XN.s:3828   .debug_str:00000000000002cf .LASF57
     /tmp/cc8EM8XN.s:3820   .debug_str:000000000000029d .LASF58
     /tmp/cc8EM8XN.s:3920   .debug_str:000000000000055d .LASF59
     /tmp/cc8EM8XN.s:3968   .debug_str:00000000000006dc .LASF60
GAS LISTING /tmp/cc8EM8XN.s 			page 31


     /tmp/cc8EM8XN.s:3976   .debug_str:0000000000000712 .LASF61
     /tmp/cc8EM8XN.s:3738   .debug_str:0000000000000069 .LASF62
     /tmp/cc8EM8XN.s:4018   .debug_str:0000000000000900 .LASF63
     /tmp/cc8EM8XN.s:3910   .debug_str:000000000000051e .LASF64
     /tmp/cc8EM8XN.s:3754   .debug_str:00000000000000bc .LASF65
     /tmp/cc8EM8XN.s:3926   .debug_str:0000000000000587 .LASF66
     /tmp/cc8EM8XN.s:3884   .debug_str:0000000000000484 .LASF67
     /tmp/cc8EM8XN.s:4058   .debug_str:0000000000000a14 .LASF68
     /tmp/cc8EM8XN.s:4032   .debug_str:0000000000000952 .LASF188
     /tmp/cc8EM8XN.s:4006   .debug_str:00000000000008bb .LASF69
     /tmp/cc8EM8XN.s:3834   .debug_str:0000000000000305 .LASF70
     /tmp/cc8EM8XN.s:3928   .debug_str:000000000000059e .LASF189
     /tmp/cc8EM8XN.s:4062   .debug_str:0000000000000a55 .LASF71
     /tmp/cc8EM8XN.s:3898   .debug_str:00000000000004d0 .LASF72
     /tmp/cc8EM8XN.s:4110   .debug_str:0000000000000baf .LASF74
     /tmp/cc8EM8XN.s:3942   .debug_str:0000000000000605 .LASF76
     /tmp/cc8EM8XN.s:3880   .debug_str:0000000000000470 .LASF78
     /tmp/cc8EM8XN.s:4040   .debug_str:0000000000000986 .LASF80
     /tmp/cc8EM8XN.s:4020   .debug_str:000000000000090b .LASF81
     /tmp/cc8EM8XN.s:3776   .debug_str:0000000000000162 .LASF82
     /tmp/cc8EM8XN.s:3988   .debug_str:0000000000000771 .LASF161
     /tmp/cc8EM8XN.s:3730   .debug_str:0000000000000012 .LASF83
     /tmp/cc8EM8XN.s:3858   .debug_str:00000000000003bb .LASF84
     /tmp/cc8EM8XN.s:3896   .debug_str:00000000000004ca .LASF85
     /tmp/cc8EM8XN.s:4046   .debug_str:00000000000009b9 .LASF86
     /tmp/cc8EM8XN.s:4044   .debug_str:00000000000009af .LASF87
     /tmp/cc8EM8XN.s:4014   .debug_str:00000000000008ee .LASF88
     /tmp/cc8EM8XN.s:3922   .debug_str:000000000000056a .LASF89
     /tmp/cc8EM8XN.s:3790   .debug_str:00000000000001c4 .LASF90
     /tmp/cc8EM8XN.s:3756   .debug_str:00000000000000c8 .LASF91
     /tmp/cc8EM8XN.s:3886   .debug_str:0000000000000491 .LASF93
     /tmp/cc8EM8XN.s:3792   .debug_str:00000000000001d5 .LASF92
     /tmp/cc8EM8XN.s:3774   .debug_str:000000000000014f .LASF94
     /tmp/cc8EM8XN.s:4102   .debug_str:0000000000000b5d .LASF190
     /tmp/cc8EM8XN.s:3736   .debug_str:0000000000000041 .LASF191
     /tmp/cc8EM8XN.s:4076   .debug_str:0000000000000aa7 .LASF95
     /tmp/cc8EM8XN.s:3778   .debug_str:0000000000000178 .LASF192
     /tmp/cc8EM8XN.s:3860   .debug_str:00000000000003c4 .LASF96
     /tmp/cc8EM8XN.s:3808   .debug_str:0000000000000250 .LASF97
     /tmp/cc8EM8XN.s:4092   .debug_str:0000000000000af9 .LASF98
     /tmp/cc8EM8XN.s:3836   .debug_str:0000000000000328 .LASF99
     /tmp/cc8EM8XN.s:3844   .debug_str:0000000000000351 .LASF100
     /tmp/cc8EM8XN.s:3982   .debug_str:0000000000000731 .LASF101
     /tmp/cc8EM8XN.s:3806   .debug_str:0000000000000235 .LASF102
     /tmp/cc8EM8XN.s:3848   .debug_str:0000000000000376 .LASF103
     /tmp/cc8EM8XN.s:4086   .debug_str:0000000000000ac9 .LASF104
     /tmp/cc8EM8XN.s:4054   .debug_str:00000000000009f8 .LASF105
     /tmp/cc8EM8XN.s:4048   .debug_str:00000000000009c1 .LASF106
     /tmp/cc8EM8XN.s:3962   .debug_str:00000000000006ba .LASF107
     /tmp/cc8EM8XN.s:3924   .debug_str:0000000000000572 .LASF108
     /tmp/cc8EM8XN.s:3950   .debug_str:0000000000000664 .LASF109
     /tmp/cc8EM8XN.s:3952   .debug_str:000000000000066b .LASF110
     /tmp/cc8EM8XN.s:3918   .debug_str:0000000000000556 .LASF111
     /tmp/cc8EM8XN.s:3868   .debug_str:000000000000041f .LASF112
     /tmp/cc8EM8XN.s:4088   .debug_str:0000000000000ae3 .LASF113
     /tmp/cc8EM8XN.s:4004   .debug_str:00000000000008a7 .LASF114
     /tmp/cc8EM8XN.s:3912   .debug_str:0000000000000535 .LASF115
GAS LISTING /tmp/cc8EM8XN.s 			page 32


     /tmp/cc8EM8XN.s:3816   .debug_str:0000000000000284 .LASF116
     /tmp/cc8EM8XN.s:3890   .debug_str:00000000000004b5 .LASF117
     /tmp/cc8EM8XN.s:3954   .debug_str:000000000000067e .LASF118
     /tmp/cc8EM8XN.s:4112   .debug_str:0000000000000bba .LASF119
     /tmp/cc8EM8XN.s:3852   .debug_str:0000000000000389 .LASF120
     /tmp/cc8EM8XN.s:4002   .debug_str:00000000000008a0 .LASF121
     /tmp/cc8EM8XN.s:3978   .debug_str:0000000000000717 .LASF122
     /tmp/cc8EM8XN.s:3980   .debug_str:000000000000072a .LASF123
     /tmp/cc8EM8XN.s:3770   .debug_str:0000000000000134 .LASF124
     /tmp/cc8EM8XN.s:3798   .debug_str:00000000000001f0 .LASF125
     /tmp/cc8EM8XN.s:3840   .debug_str:0000000000000339 .LASF126
     /tmp/cc8EM8XN.s:3850   .debug_str:0000000000000383 .LASF127
     /tmp/cc8EM8XN.s:3788   .debug_str:00000000000001b2 .LASF128
     /tmp/cc8EM8XN.s:3742   .debug_str:000000000000007c .LASF129
     /tmp/cc8EM8XN.s:3972   .debug_str:00000000000006f3 .LASF130
     /tmp/cc8EM8XN.s:3964   .debug_str:00000000000006c3 .LASF131
     /tmp/cc8EM8XN.s:4034   .debug_str:000000000000095a .LASF132
     /tmp/cc8EM8XN.s:4080   .debug_str:0000000000000ab2 .LASF133
     /tmp/cc8EM8XN.s:4094   .debug_str:0000000000000b02 .LASF134
     /tmp/cc8EM8XN.s:3768   .debug_str:000000000000012a .LASF135
     /tmp/cc8EM8XN.s:3900   .debug_str:00000000000004ea .LASF136
     /tmp/cc8EM8XN.s:4084   .debug_str:0000000000000ac4 .LASF137
     /tmp/cc8EM8XN.s:3930   .debug_str:00000000000005a3 .LASF138
     /tmp/cc8EM8XN.s:3748   .debug_str:00000000000000ad .LASF139
     /tmp/cc8EM8XN.s:4030   .debug_str:0000000000000941 .LASF140
     /tmp/cc8EM8XN.s:4052   .debug_str:00000000000009e9 .LASF141
     /tmp/cc8EM8XN.s:3830   .debug_str:00000000000002db .LASF142
     /tmp/cc8EM8XN.s:3940   .debug_str:00000000000005f0 .LASF143
     /tmp/cc8EM8XN.s:3862   .debug_str:00000000000003cd .LASF144
     /tmp/cc8EM8XN.s:3854   .debug_str:000000000000039d .LASF145
     /tmp/cc8EM8XN.s:4024   .debug_str:0000000000000928 .LASF146
     /tmp/cc8EM8XN.s:3932   .debug_str:00000000000005b4 .LASF147
     /tmp/cc8EM8XN.s:4100   .debug_str:0000000000000b50 .LASF148
     /tmp/cc8EM8XN.s:3882   .debug_str:0000000000000476 .LASF149
     /tmp/cc8EM8XN.s:4042   .debug_str:0000000000000996 .LASF150
     /tmp/cc8EM8XN.s:4036   .debug_str:0000000000000972 .LASF151
     /tmp/cc8EM8XN.s:4096   .debug_str:0000000000000b18 .LASF152
     /tmp/cc8EM8XN.s:4038   .debug_str:0000000000000981 .LASF153
     /tmp/cc8EM8XN.s:3990   .debug_str:0000000000000789 .LASF154
     /tmp/cc8EM8XN.s:4010   .debug_str:00000000000008d4 .LASF155
     /tmp/cc8EM8XN.s:3944   .debug_str:000000000000061b .LASF156
     /tmp/cc8EM8XN.s:4066   .debug_str:0000000000000a67 .LASF157
     /tmp/cc8EM8XN.s:4022   .debug_str:0000000000000916 .LASF158
     /tmp/cc8EM8XN.s:3888   .debug_str:00000000000004aa .LASF159
     /tmp/cc8EM8XN.s:3948   .debug_str:000000000000064e .LASF160
     /tmp/cc8EM8XN.s:3786   .debug_str:00000000000001a6 .LASF162
     /tmp/cc8EM8XN.s:3838   .debug_str:0000000000000333 .LASF163
     /tmp/cc8EM8XN.s:4074   .debug_str:0000000000000aa0 .LASF164
     /tmp/cc8EM8XN.s:4068   .debug_str:0000000000000a6f .LASF165
     /tmp/cc8EM8XN.s:3824   .debug_str:00000000000002b9 .LASF166
     /tmp/cc8EM8XN.s:46     .text:0000000000000020 .LFB44
     /tmp/cc8EM8XN.s:755    .text:00000000000002b4 .LFE44
     /tmp/cc8EM8XN.s:3443   .debug_loc:0000000000000000 .LLST0
     /tmp/cc8EM8XN.s:3998   .debug_str:00000000000007d5 .LASF167
     /tmp/cc8EM8XN.s:3454   .debug_loc:0000000000000036 .LLST1
     /tmp/cc8EM8XN.s:3712   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc8EM8XN.s:4078   .debug_str:0000000000000aad .LASF168
GAS LISTING /tmp/cc8EM8XN.s 			page 33


     /tmp/cc8EM8XN.s:4082   .debug_str:0000000000000abc .LASF169
     /tmp/cc8EM8XN.s:3547   .debug_loc:00000000000001bd .LLST6
     /tmp/cc8EM8XN.s:3958   .debug_str:000000000000069b .LASF170
     /tmp/cc8EM8XN.s:3574   .debug_loc:000000000000023f .LLST7
     /tmp/cc8EM8XN.s:3593   .debug_loc:000000000000029b .LLST8
     /tmp/cc8EM8XN.s:3760   .debug_str:00000000000000e6 .LASF171
     /tmp/cc8EM8XN.s:3600   .debug_loc:00000000000002be .LLST9
     /tmp/cc8EM8XN.s:3796   .debug_str:00000000000001ea .LASF172
     /tmp/cc8EM8XN.s:3607   .debug_loc:00000000000002e1 .LLST10
     /tmp/cc8EM8XN.s:3904   .debug_str:000000000000050a .LASF173
     /tmp/cc8EM8XN.s:3614   .debug_loc:0000000000000304 .LLST11
     /tmp/cc8EM8XN.s:3874   .debug_str:000000000000044a .LASF174
     /tmp/cc8EM8XN.s:3621   .debug_loc:0000000000000327 .LLST12
     /tmp/cc8EM8XN.s:3628   .debug_loc:000000000000034a .LLST13
     /tmp/cc8EM8XN.s:3906   .debug_str:0000000000000511 .LASF175
     /tmp/cc8EM8XN.s:3635   .debug_loc:000000000000036d .LLST14
     /tmp/cc8EM8XN.s:3746   .debug_str:00000000000000a8 .LASF176
     /tmp/cc8EM8XN.s:3642   .debug_loc:0000000000000390 .LLST15
     /tmp/cc8EM8XN.s:3649   .debug_loc:00000000000003b3 .LLST16
     /tmp/cc8EM8XN.s:279    .text:0000000000000100 .LVL9
     /tmp/cc8EM8XN.s:363    .text:0000000000000138 .LVL17
     /tmp/cc8EM8XN.s:414    .text:000000000000015c .LVL23
     /tmp/cc8EM8XN.s:448    .text:0000000000000184 .LVL27
     /tmp/cc8EM8XN.s:473    .text:00000000000001a4 .LVL29
     /tmp/cc8EM8XN.s:498    .text:00000000000001bc .LVL33
     /tmp/cc8EM8XN.s:542    .text:00000000000001ec .LVL39
     /tmp/cc8EM8XN.s:573    .text:0000000000000208 .LVL43
     /tmp/cc8EM8XN.s:604    .text:0000000000000224 .LVL47
     /tmp/cc8EM8XN.s:170    .text:00000000000000ac .LBB64
     /tmp/cc8EM8XN.s:185    .text:00000000000000b8 .LBE64
     /tmp/cc8EM8XN.s:191    .text:00000000000000c0 .LBB66
     /tmp/cc8EM8XN.s:206    .text:00000000000000cc .LBE66
     /tmp/cc8EM8XN.s:300    .text:000000000000010c .LBB69
     /tmp/cc8EM8XN.s:311    .text:0000000000000110 .LBE69
     /tmp/cc8EM8XN.s:3656   .debug_loc:00000000000003d6 .LLST17
     /tmp/cc8EM8XN.s:316    .text:0000000000000114 .LBB71
     /tmp/cc8EM8XN.s:328    .text:0000000000000118 .LBE71
     /tmp/cc8EM8XN.s:3663   .debug_loc:00000000000003f9 .LLST18
     /tmp/cc8EM8XN.s:662    .text:0000000000000260 .LBB54
     /tmp/cc8EM8XN.s:744    .text:00000000000002a8 .LBE54
     /tmp/cc8EM8XN.s:664    .text:0000000000000260 .LBB55
     /tmp/cc8EM8XN.s:679    .text:000000000000026c .LBE55
     /tmp/cc8EM8XN.s:683    .text:0000000000000270 .LBB57
     /tmp/cc8EM8XN.s:698    .text:000000000000027c .LBE57
     /tmp/cc8EM8XN.s:713    .text:0000000000000298 .LBB59
     /tmp/cc8EM8XN.s:724    .text:000000000000029c .LBE59
     /tmp/cc8EM8XN.s:3670   .debug_loc:000000000000041c .LLST4
     /tmp/cc8EM8XN.s:729    .text:00000000000002a0 .LBB61
     /tmp/cc8EM8XN.s:743    .text:00000000000002a8 .LBE61
     /tmp/cc8EM8XN.s:3677   .debug_loc:000000000000043f .LLST5
     /tmp/cc8EM8XN.s:708    .text:0000000000000294 .LVL52
     /tmp/cc8EM8XN.s:60     .text:0000000000000034 .LBB38
     /tmp/cc8EM8XN.s:77     .text:0000000000000040 .LBE38
     /tmp/cc8EM8XN.s:79     .text:0000000000000040 .LBB40
     /tmp/cc8EM8XN.s:95     .text:000000000000004c .LBE40
     /tmp/cc8EM8XN.s:122    .text:0000000000000080 .LBB44
     /tmp/cc8EM8XN.s:137    .text:000000000000008c .LBE44
GAS LISTING /tmp/cc8EM8XN.s 			page 34


     /tmp/cc8EM8XN.s:142    .text:0000000000000094 .LBB46
     /tmp/cc8EM8XN.s:157    .text:00000000000000a0 .LBE46
     /tmp/cc8EM8XN.s:626    .text:0000000000000230 .LBB49
     /tmp/cc8EM8XN.s:638    .text:0000000000000238 .LBE49
     /tmp/cc8EM8XN.s:3684   .debug_loc:0000000000000462 .LLST2
     /tmp/cc8EM8XN.s:651    .text:0000000000000258 .LBB52
     /tmp/cc8EM8XN.s:659    .text:000000000000025c .LBE52
     /tmp/cc8EM8XN.s:3692   .debug_loc:0000000000000486 .LLST3
     /tmp/cc8EM8XN.s:120    .text:0000000000000080 .LVL3
     /tmp/cc8EM8XN.s:140    .text:0000000000000094 .LVL4
     /tmp/cc8EM8XN.s:160    .text:00000000000000a8 .LVL5
     /tmp/cc8EM8XN.s:750    .text:00000000000002b0 .LVL57
     /tmp/cc8EM8XN.s:10     .text:0000000000000000 .LFB43
     /tmp/cc8EM8XN.s:40     .text:0000000000000020 .LFE43
     /tmp/cc8EM8XN.s:4064   .debug_str:0000000000000a62 .LASF177
     /tmp/cc8EM8XN.s:3842   .debug_str:000000000000034b .LASF178
     /tmp/cc8EM8XN.s:3818   .debug_str:0000000000000298 .LASF193
     /tmp/cc8EM8XN.s:3728   .debug_str:0000000000000000 .LASF179
     /tmp/cc8EM8XN.s:3802   .debug_str:000000000000020c .LASF181
     /tmp/cc8EM8XN.s:3826   .debug_str:00000000000002bf .LASF180
     /tmp/cc8EM8XN.s:75     .text:0000000000000040 .LVL0
     /tmp/cc8EM8XN.s:108    .text:000000000000005c .LVL2
     /tmp/cc8EM8XN.s:165    .text:00000000000000ac .LVL6
     /tmp/cc8EM8XN.s:215    .text:00000000000000dc .LVL7
     /tmp/cc8EM8XN.s:93     .text:000000000000004c .LVL1
     /tmp/cc8EM8XN.s:274    .text:00000000000000f8 .LVL8
     /tmp/cc8EM8XN.s:343    .text:000000000000012c .LVL15
     /tmp/cc8EM8XN.s:358    .text:0000000000000130 .LVL16
     /tmp/cc8EM8XN.s:378    .text:0000000000000144 .LVL18
     /tmp/cc8EM8XN.s:397    .text:000000000000014c .LVL20
     /tmp/cc8EM8XN.s:442    .text:000000000000017c .LVL26
     /tmp/cc8EM8XN.s:463    .text:0000000000000190 .LVL28
     /tmp/cc8EM8XN.s:476    .text:00000000000001a8 .LVL30
     /tmp/cc8EM8XN.s:492    .text:00000000000001b0 .LVL32
     /tmp/cc8EM8XN.s:526    .text:00000000000001dc .LVL36
     /tmp/cc8EM8XN.s:540    .text:00000000000001e4 .LVL38
     /tmp/cc8EM8XN.s:557    .text:00000000000001f8 .LVL40
     /tmp/cc8EM8XN.s:571    .text:0000000000000200 .LVL42
     /tmp/cc8EM8XN.s:588    .text:0000000000000214 .LVL44
     /tmp/cc8EM8XN.s:602    .text:000000000000021c .LVL46
     /tmp/cc8EM8XN.s:619    .text:0000000000000230 .LVL48
     /tmp/cc8EM8XN.s:740    .text:00000000000002a8 .LVL56
     /tmp/cc8EM8XN.s:422    .text:0000000000000168 .LVL24
     /tmp/cc8EM8XN.s:437    .text:0000000000000174 .LVL25
     /tmp/cc8EM8XN.s:506    .text:00000000000001c8 .LVL34
     /tmp/cc8EM8XN.s:521    .text:00000000000001d4 .LVL35
     /tmp/cc8EM8XN.s:486    .text:00000000000001ac .LVL31
     /tmp/cc8EM8XN.s:535    .text:00000000000001e0 .LVL37
     /tmp/cc8EM8XN.s:566    .text:00000000000001fc .LVL41
     /tmp/cc8EM8XN.s:597    .text:0000000000000218 .LVL45
     /tmp/cc8EM8XN.s:292    .text:0000000000000108 .LVL10
     /tmp/cc8EM8XN.s:403    .text:0000000000000150 .LVL21
     /tmp/cc8EM8XN.s:391    .text:0000000000000148 .LVL19
     /tmp/cc8EM8XN.s:409    .text:0000000000000154 .LVL22
     /tmp/cc8EM8XN.s:299    .text:000000000000010c .LVL11
     /tmp/cc8EM8XN.s:308    .text:0000000000000110 .LVL12
     /tmp/cc8EM8XN.s:315    .text:0000000000000114 .LVL13
GAS LISTING /tmp/cc8EM8XN.s 			page 35


     /tmp/cc8EM8XN.s:324    .text:0000000000000118 .LVL14
     /tmp/cc8EM8XN.s:712    .text:0000000000000298 .LVL53
     /tmp/cc8EM8XN.s:721    .text:000000000000029c .LVL54
     /tmp/cc8EM8XN.s:728    .text:00000000000002a0 .LVL55
     /tmp/cc8EM8XN.s:635    .text:0000000000000238 .LVL49
     /tmp/cc8EM8XN.s:650    .text:0000000000000258 .LVL50
     /tmp/cc8EM8XN.s:657    .text:000000000000025c .LVL51
     /tmp/cc8EM8XN.s:766    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc8EM8XN.s:168    .text:00000000000000ac .LBB63
     /tmp/cc8EM8XN.s:329    .text:0000000000000118 .LBE63
     /tmp/cc8EM8XN.s:347    .text:000000000000012c .LBB74
     /tmp/cc8EM8XN.s:622    .text:0000000000000230 .LBE74
     /tmp/cc8EM8XN.s:264    .text:00000000000000f4 .LBB68
     /tmp/cc8EM8XN.s:295    .text:0000000000000108 .LBE68
     /tmp/cc8EM8XN.s:348    .text:000000000000012c .LBB73
     /tmp/cc8EM8XN.s:621    .text:0000000000000230 .LBE73

UNDEFINED SYMBOLS
_Z12printIntegerm
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPKv
_ZN3TCB12createThreadEPFvPvES0_S0_
_ZN3TCB10exitThreadEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN3sem13openSemaphoreEi
_ZN3sem14closeSemaphoreEv
_ZN3sem4waitEv
_ZN3sem6signalEv
_ZN3TCB7runningE
console_handler
